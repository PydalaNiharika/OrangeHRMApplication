!SESSION 2024-02-16 18:30:29.897 -----------------------------------------------
eclipse.buildId=4.18.0.I20201202-1800
java.version=11.0.15
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_IN
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

This is a continuation of log file C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\.metadata\.bak_0.log
Created Time: 2024-02-16 20:05:52.717

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-16 20:05:52.717
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-16 20:05:52.719
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-16 20:05:52.811
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.OrangeHrmApplication;

import org.testng.annotations.Test;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;


public class OrangeHrmEmpolyleListadded extends BaseTest{

	@Test 
	public void Webpage() throws IOException, InterruptedException {
		FileInputStream file=new FileInputStream("./src/main/java/testDataFiles/AddEmployee.xlsx");

		XSSFWorkbook workbook=new XSSFWorkbook(file);

		XSSFSheet Sheet=workbook.getSheet("TestData");

		int row_count=Sheet.getLastRowNum();

		System.out.println("The number of row in the Sheet is :-  "+row_count);

		int rowOfCells_Count=Sheet.getLeftCol();

		System.out.println("The number of roeOfCells in the sheet is :-  "+rowOfCells_Count);

		//===================================================================================================================================================


		//<div id="logInPanelHeading">LOGIN Panel</div>

		String expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		// of the current webpage - identifying the LOGIN Panel



		By OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		WebElement OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		String actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(1).createCell(1).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(1).createCell(1).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("FAIL");
		}

		//===================================================================================================================================================

		//Expect Title is - OrangeHRM  (should be same)

		String Expected_orangeHrmLogInPage="OrangeHRM";
		System.out.println("The OrangeHRM logIn Page title is :-  "+Expected_orangeHrmLogInPage);


		String Actual_orangenHrmLogInPageText=driver.getTitle();
		System.out.println("The OrangenHrm LogIn Page Title is :-  "+Actual_orangenHrmLogInPageText);


		if(Actual_orangenHrmLogInPageText.equals(Expected_orangeHrmLogInPage))
		{
		System.out.println("The LogIn Page Title is Match :- PASS");
		Sheet.getRow(1).createCell(4).setCellValue(Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("PASS");
		}
		else {
		System.out.println("The LogIn Page Title is NOT Match :- FAIL");
		Sheet.getRow(1).createCell(4).setCellValue("NOT Match - "+Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("FAIL");
		}


		//===================================================================================================================================================


		// UserName - Test Data

		XSSFRow row=Sheet.getRow(1);

		String userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		By userNameProperty=By.id("txtUsername");
		WebElement userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		String password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		By passwordProperty=By.name("txtPassword");
		WebElement password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		By logInProperty=By.className("button");
		WebElement logIn=driver.findElement(logInProperty);
		logIn.click();


		//===================================================================================================================================================


		 //   *********** Expected Text - Welcome (should have)

		// ---->>>>>>>>>>>>>> Performing click on the Welcome WebElement
		         
		         
		// <a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>

		String Expect_WebpageText= "Admin";
		System.out.println("The Expected OrangeHrm Home page text is Welcome  :-  "+Expect_WebpageText);


		By welcomeAdminProperty=By.linkText("Welcome Admin");
		WebElement welcome=driver.findElement(welcomeAdminProperty);


		//String actual_welcomeHrefAttributeValue=welcome.getAttribute("id");

		            //OR

		String actual_welcomeHrefAttributeValue=welcome.getText();
		System.out.println("The href Attribute value of welcome webElement is :- "+actual_welcomeHrefAttributeValue);


		//if(actual_welcomeHrefAttributeValue.equals(Expect_WebpageText))

		                 //OR

		if(actual_welcomeHrefAttributeValue.contains(Expect_WebpageText))
		{
		System.out.println("The text is Match :- PASS");
		Sheet.getRow(1).createCell(9).setCellValue(actual_welcomeHrefAttributeValue);
		Sheet.getRow(1).createCell(10).setCellValue("PASS ");
		}
		else {
		System.out.println("The text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(9).setCellValue("Not Match the title Welcome");
		Sheet.getRow(1).createCell(10).setCellValue("Not Match the webpage FAIL");
		}



		//===================================================================================================================================================


		 
		//************Automation  Header link PIM  Button

		   //<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/viewPimModule"
		//id="menu_pim_viewPimModule" class="firstLevelMenu"><b>PIM</b></a>

		By PIMButtonProperty= By.linkText("PIM");
		WebElement PIMElement= driver.findElement(PIMButtonProperty);
		       
		Actions mouseHoverOperation=new Actions(driver);
		mouseHoverOperation.moveToElement(PIMElement).build().perform();

		//************Automation  Header link Add Employee  Button
		       
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee"
		   //id="menu_pim_addEmployee">Add Employee</a>

		By AddEmployeeProperty=By.linkText("Add Employee");
		WebElement AddEmployee=driver.findElement(AddEmployeeProperty);
		AddEmployee.click();



		//===================================================================================================================================================



		//   *********** Expected AddEmployeeText - Full Name (should be same)

		String Expect_AddAdminText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_AddAdminText);

		//<label class="hasTopFieldHelp">Full Name</label>
		By fullNameProperty=By.className("hasTopFieldHelp");
		WebElement fullName=driver.findElement(fullNameProperty);

		String Actual_AddEmployeeText=fullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_AddEmployeeText);

		if(Actual_AddEmployeeText.equals(Expect_AddAdminText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(1).createCell(12).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(12).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("FAIL");
		}



		//===================================================================================================================================================
		String addEmployeeUrlAddress="http://127.0.0.1/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee";

		for(int indexrow=1; indexrow<=Sheet.getLastRowNum(); indexrow++) {



		XSSFRow row_AddAdmin=Sheet.getRow(indexrow);

		// --->>>>> This Names is Expected TestData in the Excel Sheet

		            // FirstName - Test Data

		String firstName_TestData=row_AddAdmin.getCell(14).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="firstName" id="firstName">
		By firstNameProperty=By.id("firstName");
		WebElement firstName=driver.findElement(firstNameProperty);
		firstName.sendKeys(firstName_TestData);

		// MiddleName - Test Data
		String middleName_TestData=row_AddAdmin.getCell(15).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="middleName" id="middleName">
		By middleNameProperty=By.id("middleName");
		WebElement middleName=driver.findElement(middleNameProperty);
		middleName.sendKeys(middleName_TestData);

		// LastName - Test Data

		   String lastName_TestData=row_AddAdmin.getCell(16).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="lastName" id="lastName">
		By lastNameProperty=By.id("lastName");
		WebElement lastName=driver.findElement(lastNameProperty);
		lastName.sendKeys(lastName_TestData);

		 
		 
		  //********Enter AddName EmployeeId Automation      



		//<input class="formInputText valid" maxlength="10" type="text"
		//name="employeeId" value="0001" id="employeeId">
		     
		   By employeeIdProperty=By.id("employeeId");
		WebElement employeeId=driver.findElement(employeeIdProperty);
		String Id=employeeId.getAttribute("value");
		     
		System.out.println("the EmployId number is :-  "+Id);
		     
		Sheet.getRow(indexrow).createCell(17).setCellValue(Id);


		 //*************  Automation Save Button
		     
		    //<input type="button" class="" id="btnSave" value="Save">
		   
		    By saveProperty= By.id("btnSave");
		    WebElement  save= driver.findElement(saveProperty);
		    save.click();
		     

		//===================================================================================================================================================

		   

		//   *********** Expected Personal Details Text After Click on Save - Full Name (should be same)

		String Expect_PersonalDetailsPageText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_PersonalDetailsPageText);


		//<label for="Full_Name" class="hasTopFieldHelp">Full Name</label>
		By PersonalDetailsPage_FullNameProperty=By.className("hasTopFieldHelp");
		WebElement PersonalDetailsPage_FullName=driver.findElement(PersonalDetailsPage_FullNameProperty);

		String Actual_PersonalDetailsPageText=PersonalDetailsPage_FullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_PersonalDetailsPageText);

		if(Actual_PersonalDetailsPageText.equals(Expect_PersonalDetailsPageText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(indexrow).createCell(19).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(indexrow).createCell(19).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("FAIL");
		}


		System.out.println();
		//===================================================================================================================================================


		// --->>>>> This Names is Actual TestData in the Add Employee Page

		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving FirstName


		   
		//<input value="Madhu" type="text" name="personal[txtEmpFirstName]" class="block default editable" maxlength="30"
		//title="First Name" id="personal_txtEmpFirstName" disabled="disabled">
		 
		By afterSaveFirstNameProperty= By.id("personal_txtEmpFirstName");
		WebElement afterSaveFirstName = driver.findElement(afterSaveFirstNameProperty);
		String Actual_FirstName=afterSaveFirstName.getAttribute("value");
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving MiddleName
		 
		//<input value="Sai" type="text" name="personal[txtEmpMiddleName]" class="block default editable" maxlength="30"
		//title="Middle Name" id="personal_txtEmpMiddleName" disabled="disabled">
		     
		By afterSaveMiddleNameProperty= By.id("personal_txtEmpMiddleName");
		WebElement  afterSaveMiddleName= driver.findElement(afterSaveMiddleNameProperty);
		String Actual_MiddleName=afterSaveMiddleName.getAttribute("value");  
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving LastName
		 
		//<input value="Chandu" type="text" name="personal[txtEmpLastName]" class="block default editable" maxlength="30"
		//title="Last Name" id="personal_txtEmpLastName" disabled="disabled">
		   
		By afterSaveLastNameProperty=By.id("personal_txtEmpLastName");
		WebElement afterSaveLastName=driver.findElement(afterSaveLastNameProperty);
		String Actual_LastName=afterSaveLastName.getAttribute("value");
		 
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving EmployeeId
		 
		//<input value="0021" type="text" name="personal[txtEmployeeId]" maxlength="10" class="editable"
		//id="personal_txtEmployeeId" disabled="disabled">
		 
		   By afterSaveEmployeeIdPrperty=By.id("personal_txtEmployeeId");
		   WebElement afterSaveEmployeeId=driver.findElement(afterSaveEmployeeIdPrperty);
		String Actual_EmployeeId= afterSaveEmployeeId.getAttribute("value");
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  FristName  
		 
		if(Actual_FirstName.equals("Madhu"))
		{
		      System.out.println("After saving the FirstName are same :-  PASS");
		      Sheet.getRow(indexrow).createCell(21).setCellValue(Actual_FirstName);
		      Sheet.getRow(indexrow).createCell(22).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the FirstName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(21).setCellValue("NOT Match - "+Actual_FirstName);
		   Sheet.getRow(indexrow).createCell(22).setCellValue("FAIL");
		}
		 
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  MiddleName  

		if(Actual_MiddleName.equals("Sai"))
		{
		System.out.println("After saving the MiddleName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(23).setCellValue(Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the MiddleName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(23).setCellValue("NOT Match - "+Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  LastName  
		 
		if(Actual_LastName.equals("Chandu"))
		{
		System.out.println("After saving the LastName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(25).setCellValue(Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the LastName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(25).setCellValue("NOT Match - "+Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  EmployeeId
		 
		 
		if(Actual_EmployeeId.equals(Id))
		{
		System.out.println("After saving the EmployeeId are same :-  PASS");
		Sheet.getRow(indexrow).createCell(27).setCellValue(Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("PASS");
		   
		   
		}
		else
		{
		System.out.println("After saving the EmployeeId are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(27).setCellValue("NOT Match - "+Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("FAIL");

		}


		//...............................................................................................



		 
		//*************  Automation  Welcome Admin Button
		   
		//<a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>
		     

		welcomeAdminProperty=By.linkText("Welcome Admin");
		welcome=driver.findElement(welcomeAdminProperty);

		welcome.click();
		     
		Thread.sleep(5000);
		     
		//*************  Automation  Welcome Admin Button  
		     
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/auth/logout">Logout</a>
		     
		By logOutProperty= By.linkText("Logout");
		WebElement logOut=driver.findElement(logOutProperty);
		logOut.click();
		     


		//===================================================================================================================================================


		//Expected Text - LOGIN Panel (should be same)

		//<div id="logInPanelHeading">LOGIN Panel</div>

		expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		  // of the current webpage - identifying the LOGIN Panel



		OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(indexrow).createCell(30).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(indexrow).createCell(30).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("FAIL");
		}






./src/testDataResult/AddEmployee.xlsx
		FileOutputStream Madhu=new FileOutputStream("./src/testDataResult/AddEmployee.xlsx");
		                 
		       workbook.write(Madhu);

		System.out.println();


		driver.get(addEmployeeUrlAddress);





		// UserName - Test Data

		row=Sheet.getRow(1);

		userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		   userNameProperty=By.id("txtUsername");
		userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		passwordProperty=By.name("txtPassword");
		password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		logInProperty=By.className("button");
		logIn=driver.findElement(logInProperty);
		logIn.click();




		}

		



}













}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-16 20:05:52.811
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-16 20:05:52.812
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-16 20:05:55.593
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.OrangeHrmApplication;

import org.testng.annotations.Test;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;


public class OrangeHrmEmpolyleListadded extends BaseTest{

	@Test 
	public void Webpage() throws IOException, InterruptedException {
		FileInputStream file=new FileInputStream("./src/main/java/testDataFiles/AddEmployee.xlsx");

		XSSFWorkbook workbook=new XSSFWorkbook(file);

		XSSFSheet Sheet=workbook.getSheet("TestData");

		int row_count=Sheet.getLastRowNum();

		System.out.println("The number of row in the Sheet is :-  "+row_count);

		int rowOfCells_Count=Sheet.getLeftCol();

		System.out.println("The number of roeOfCells in the sheet is :-  "+rowOfCells_Count);

		//===================================================================================================================================================


		//<div id="logInPanelHeading">LOGIN Panel</div>

		String expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		// of the current webpage - identifying the LOGIN Panel



		By OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		WebElement OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		String actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(1).createCell(1).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(1).createCell(1).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("FAIL");
		}

		//===================================================================================================================================================

		//Expect Title is - OrangeHRM  (should be same)

		String Expected_orangeHrmLogInPage="OrangeHRM";
		System.out.println("The OrangeHRM logIn Page title is :-  "+Expected_orangeHrmLogInPage);


		String Actual_orangenHrmLogInPageText=driver.getTitle();
		System.out.println("The OrangenHrm LogIn Page Title is :-  "+Actual_orangenHrmLogInPageText);


		if(Actual_orangenHrmLogInPageText.equals(Expected_orangeHrmLogInPage))
		{
		System.out.println("The LogIn Page Title is Match :- PASS");
		Sheet.getRow(1).createCell(4).setCellValue(Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("PASS");
		}
		else {
		System.out.println("The LogIn Page Title is NOT Match :- FAIL");
		Sheet.getRow(1).createCell(4).setCellValue("NOT Match - "+Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("FAIL");
		}


		//===================================================================================================================================================


		// UserName - Test Data

		XSSFRow row=Sheet.getRow(1);

		String userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		By userNameProperty=By.id("txtUsername");
		WebElement userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		String password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		By passwordProperty=By.name("txtPassword");
		WebElement password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		By logInProperty=By.className("button");
		WebElement logIn=driver.findElement(logInProperty);
		logIn.click();


		//===================================================================================================================================================


		 //   *********** Expected Text - Welcome (should have)

		// ---->>>>>>>>>>>>>> Performing click on the Welcome WebElement
		         
		         
		// <a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>

		String Expect_WebpageText= "Admin";
		System.out.println("The Expected OrangeHrm Home page text is Welcome  :-  "+Expect_WebpageText);


		By welcomeAdminProperty=By.linkText("Welcome Admin");
		WebElement welcome=driver.findElement(welcomeAdminProperty);


		//String actual_welcomeHrefAttributeValue=welcome.getAttribute("id");

		            //OR

		String actual_welcomeHrefAttributeValue=welcome.getText();
		System.out.println("The href Attribute value of welcome webElement is :- "+actual_welcomeHrefAttributeValue);


		//if(actual_welcomeHrefAttributeValue.equals(Expect_WebpageText))

		                 //OR

		if(actual_welcomeHrefAttributeValue.contains(Expect_WebpageText))
		{
		System.out.println("The text is Match :- PASS");
		Sheet.getRow(1).createCell(9).setCellValue(actual_welcomeHrefAttributeValue);
		Sheet.getRow(1).createCell(10).setCellValue("PASS ");
		}
		else {
		System.out.println("The text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(9).setCellValue("Not Match the title Welcome");
		Sheet.getRow(1).createCell(10).setCellValue("Not Match the webpage FAIL");
		}



		//===================================================================================================================================================


		 
		//************Automation  Header link PIM  Button

		   //<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/viewPimModule"
		//id="menu_pim_viewPimModule" class="firstLevelMenu"><b>PIM</b></a>

		By PIMButtonProperty= By.linkText("PIM");
		WebElement PIMElement= driver.findElement(PIMButtonProperty);
		       
		Actions mouseHoverOperation=new Actions(driver);
		mouseHoverOperation.moveToElement(PIMElement).build().perform();

		//************Automation  Header link Add Employee  Button
		       
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee"
		   //id="menu_pim_addEmployee">Add Employee</a>

		By AddEmployeeProperty=By.linkText("Add Employee");
		WebElement AddEmployee=driver.findElement(AddEmployeeProperty);
		AddEmployee.click();



		//===================================================================================================================================================



		//   *********** Expected AddEmployeeText - Full Name (should be same)

		String Expect_AddAdminText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_AddAdminText);

		//<label class="hasTopFieldHelp">Full Name</label>
		By fullNameProperty=By.className("hasTopFieldHelp");
		WebElement fullName=driver.findElement(fullNameProperty);

		String Actual_AddEmployeeText=fullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_AddEmployeeText);

		if(Actual_AddEmployeeText.equals(Expect_AddAdminText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(1).createCell(12).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(12).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("FAIL");
		}



		//===================================================================================================================================================
		String addEmployeeUrlAddress="http://127.0.0.1/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee";

		for(int indexrow=1; indexrow<=Sheet.getLastRowNum(); indexrow++) {



		XSSFRow row_AddAdmin=Sheet.getRow(indexrow);

		// --->>>>> This Names is Expected TestData in the Excel Sheet

		            // FirstName - Test Data

		String firstName_TestData=row_AddAdmin.getCell(14).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="firstName" id="firstName">
		By firstNameProperty=By.id("firstName");
		WebElement firstName=driver.findElement(firstNameProperty);
		firstName.sendKeys(firstName_TestData);

		// MiddleName - Test Data
		String middleName_TestData=row_AddAdmin.getCell(15).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="middleName" id="middleName">
		By middleNameProperty=By.id("middleName");
		WebElement middleName=driver.findElement(middleNameProperty);
		middleName.sendKeys(middleName_TestData);

		// LastName - Test Data

		   String lastName_TestData=row_AddAdmin.getCell(16).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="lastName" id="lastName">
		By lastNameProperty=By.id("lastName");
		WebElement lastName=driver.findElement(lastNameProperty);
		lastName.sendKeys(lastName_TestData);

		 
		 
		  //********Enter AddName EmployeeId Automation      



		//<input class="formInputText valid" maxlength="10" type="text"
		//name="employeeId" value="0001" id="employeeId">
		     
		   By employeeIdProperty=By.id("employeeId");
		WebElement employeeId=driver.findElement(employeeIdProperty);
		String Id=employeeId.getAttribute("value");
		     
		System.out.println("the EmployId number is :-  "+Id);
		     
		Sheet.getRow(indexrow).createCell(17).setCellValue(Id);


		 //*************  Automation Save Button
		     
		    //<input type="button" class="" id="btnSave" value="Save">
		   
		    By saveProperty= By.id("btnSave");
		    WebElement  save= driver.findElement(saveProperty);
		    save.click();
		     

		//===================================================================================================================================================

		   

		//   *********** Expected Personal Details Text After Click on Save - Full Name (should be same)

		String Expect_PersonalDetailsPageText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_PersonalDetailsPageText);


		//<label for="Full_Name" class="hasTopFieldHelp">Full Name</label>
		By PersonalDetailsPage_FullNameProperty=By.className("hasTopFieldHelp");
		WebElement PersonalDetailsPage_FullName=driver.findElement(PersonalDetailsPage_FullNameProperty);

		String Actual_PersonalDetailsPageText=PersonalDetailsPage_FullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_PersonalDetailsPageText);

		if(Actual_PersonalDetailsPageText.equals(Expect_PersonalDetailsPageText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(indexrow).createCell(19).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(indexrow).createCell(19).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("FAIL");
		}


		System.out.println();
		//===================================================================================================================================================


		// --->>>>> This Names is Actual TestData in the Add Employee Page

		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving FirstName


		   
		//<input value="Madhu" type="text" name="personal[txtEmpFirstName]" class="block default editable" maxlength="30"
		//title="First Name" id="personal_txtEmpFirstName" disabled="disabled">
		 
		By afterSaveFirstNameProperty= By.id("personal_txtEmpFirstName");
		WebElement afterSaveFirstName = driver.findElement(afterSaveFirstNameProperty);
		String Actual_FirstName=afterSaveFirstName.getAttribute("value");
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving MiddleName
		 
		//<input value="Sai" type="text" name="personal[txtEmpMiddleName]" class="block default editable" maxlength="30"
		//title="Middle Name" id="personal_txtEmpMiddleName" disabled="disabled">
		     
		By afterSaveMiddleNameProperty= By.id("personal_txtEmpMiddleName");
		WebElement  afterSaveMiddleName= driver.findElement(afterSaveMiddleNameProperty);
		String Actual_MiddleName=afterSaveMiddleName.getAttribute("value");  
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving LastName
		 
		//<input value="Chandu" type="text" name="personal[txtEmpLastName]" class="block default editable" maxlength="30"
		//title="Last Name" id="personal_txtEmpLastName" disabled="disabled">
		   
		By afterSaveLastNameProperty=By.id("personal_txtEmpLastName");
		WebElement afterSaveLastName=driver.findElement(afterSaveLastNameProperty);
		String Actual_LastName=afterSaveLastName.getAttribute("value");
		 
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving EmployeeId
		 
		//<input value="0021" type="text" name="personal[txtEmployeeId]" maxlength="10" class="editable"
		//id="personal_txtEmployeeId" disabled="disabled">
		 
		   By afterSaveEmployeeIdPrperty=By.id("personal_txtEmployeeId");
		   WebElement afterSaveEmployeeId=driver.findElement(afterSaveEmployeeIdPrperty);
		String Actual_EmployeeId= afterSaveEmployeeId.getAttribute("value");
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  FristName  
		 
		if(Actual_FirstName.equals("Madhu"))
		{
		      System.out.println("After saving the FirstName are same :-  PASS");
		      Sheet.getRow(indexrow).createCell(21).setCellValue(Actual_FirstName);
		      Sheet.getRow(indexrow).createCell(22).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the FirstName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(21).setCellValue("NOT Match - "+Actual_FirstName);
		   Sheet.getRow(indexrow).createCell(22).setCellValue("FAIL");
		}
		 
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  MiddleName  

		if(Actual_MiddleName.equals("Sai"))
		{
		System.out.println("After saving the MiddleName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(23).setCellValue(Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the MiddleName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(23).setCellValue("NOT Match - "+Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  LastName  
		 
		if(Actual_LastName.equals("Chandu"))
		{
		System.out.println("After saving the LastName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(25).setCellValue(Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the LastName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(25).setCellValue("NOT Match - "+Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  EmployeeId
		 
		 
		if(Actual_EmployeeId.equals(Id))
		{
		System.out.println("After saving the EmployeeId are same :-  PASS");
		Sheet.getRow(indexrow).createCell(27).setCellValue(Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("PASS");
		   
		   
		}
		else
		{
		System.out.println("After saving the EmployeeId are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(27).setCellValue("NOT Match - "+Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("FAIL");

		}


		//...............................................................................................



		 
		//*************  Automation  Welcome Admin Button
		   
		//<a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>
		     

		welcomeAdminProperty=By.linkText("Welcome Admin");
		welcome=driver.findElement(welcomeAdminProperty);

		welcome.click();
		     
		Thread.sleep(5000);
		     
		//*************  Automation  Welcome Admin Button  
		     
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/auth/logout">Logout</a>
		     
		By logOutProperty= By.linkText("Logout");
		WebElement logOut=driver.findElement(logOutProperty);
		logOut.click();
		     


		//===================================================================================================================================================


		//Expected Text - LOGIN Panel (should be same)

		//<div id="logInPanelHeading">LOGIN Panel</div>

		expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		  // of the current webpage - identifying the LOGIN Panel



		OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(indexrow).createCell(30).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(indexrow).createCell(30).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("FAIL");
		}






./src/testDataResult/AddEmployee.xlsx
		FileOutputStream Madhu=new FileOutputStream("./src/testDataResult/AddEmployee.xlsx");
		                 
		       workbook.write(Madhu);

		System.out.println();


		driver.get(addEmployeeUrlAddress);





		// UserName - Test Data

		row=Sheet.getRow(1);

		userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		   userNameProperty=By.id("txtUsername");
		userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		passwordProperty=By.name("txtPassword");
		password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		logInProperty=By.className("button");
		logIn=driver.findElement(logInProperty);
		logIn.click();




		}

		



}













}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-16 20:05:55.594
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-16 20:05:55.596
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-16 20:05:56.137
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.OrangeHrmApplication;

import org.testng.annotations.Test;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;


public class OrangeHrmEmpolyleListadded extends BaseTest{

	@Test 
	public void Webpage() throws IOException, InterruptedException {
		FileInputStream file=new FileInputStream("./src/main/java/testDataFiles/AddEmployee.xlsx");

		XSSFWorkbook workbook=new XSSFWorkbook(file);

		XSSFSheet Sheet=workbook.getSheet("TestData");

		int row_count=Sheet.getLastRowNum();

		System.out.println("The number of row in the Sheet is :-  "+row_count);

		int rowOfCells_Count=Sheet.getLeftCol();

		System.out.println("The number of roeOfCells in the sheet is :-  "+rowOfCells_Count);

		//===================================================================================================================================================


		//<div id="logInPanelHeading">LOGIN Panel</div>

		String expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		// of the current webpage - identifying the LOGIN Panel



		By OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		WebElement OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		String actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(1).createCell(1).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(1).createCell(1).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("FAIL");
		}

		//===================================================================================================================================================

		//Expect Title is - OrangeHRM  (should be same)

		String Expected_orangeHrmLogInPage="OrangeHRM";
		System.out.println("The OrangeHRM logIn Page title is :-  "+Expected_orangeHrmLogInPage);


		String Actual_orangenHrmLogInPageText=driver.getTitle();
		System.out.println("The OrangenHrm LogIn Page Title is :-  "+Actual_orangenHrmLogInPageText);


		if(Actual_orangenHrmLogInPageText.equals(Expected_orangeHrmLogInPage))
		{
		System.out.println("The LogIn Page Title is Match :- PASS");
		Sheet.getRow(1).createCell(4).setCellValue(Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("PASS");
		}
		else {
		System.out.println("The LogIn Page Title is NOT Match :- FAIL");
		Sheet.getRow(1).createCell(4).setCellValue("NOT Match - "+Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("FAIL");
		}


		//===================================================================================================================================================


		// UserName - Test Data

		XSSFRow row=Sheet.getRow(1);

		String userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		By userNameProperty=By.id("txtUsername");
		WebElement userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		String password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		By passwordProperty=By.name("txtPassword");
		WebElement password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		By logInProperty=By.className("button");
		WebElement logIn=driver.findElement(logInProperty);
		logIn.click();


		//===================================================================================================================================================


		 //   *********** Expected Text - Welcome (should have)

		// ---->>>>>>>>>>>>>> Performing click on the Welcome WebElement
		         
		         
		// <a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>

		String Expect_WebpageText= "Admin";
		System.out.println("The Expected OrangeHrm Home page text is Welcome  :-  "+Expect_WebpageText);


		By welcomeAdminProperty=By.linkText("Welcome Admin");
		WebElement welcome=driver.findElement(welcomeAdminProperty);


		//String actual_welcomeHrefAttributeValue=welcome.getAttribute("id");

		            //OR

		String actual_welcomeHrefAttributeValue=welcome.getText();
		System.out.println("The href Attribute value of welcome webElement is :- "+actual_welcomeHrefAttributeValue);


		//if(actual_welcomeHrefAttributeValue.equals(Expect_WebpageText))

		                 //OR

		if(actual_welcomeHrefAttributeValue.contains(Expect_WebpageText))
		{
		System.out.println("The text is Match :- PASS");
		Sheet.getRow(1).createCell(9).setCellValue(actual_welcomeHrefAttributeValue);
		Sheet.getRow(1).createCell(10).setCellValue("PASS ");
		}
		else {
		System.out.println("The text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(9).setCellValue("Not Match the title Welcome");
		Sheet.getRow(1).createCell(10).setCellValue("Not Match the webpage FAIL");
		}



		//===================================================================================================================================================


		 
		//************Automation  Header link PIM  Button

		   //<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/viewPimModule"
		//id="menu_pim_viewPimModule" class="firstLevelMenu"><b>PIM</b></a>

		By PIMButtonProperty= By.linkText("PIM");
		WebElement PIMElement= driver.findElement(PIMButtonProperty);
		       
		Actions mouseHoverOperation=new Actions(driver);
		mouseHoverOperation.moveToElement(PIMElement).build().perform();

		//************Automation  Header link Add Employee  Button
		       
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee"
		   //id="menu_pim_addEmployee">Add Employee</a>

		By AddEmployeeProperty=By.linkText("Add Employee");
		WebElement AddEmployee=driver.findElement(AddEmployeeProperty);
		AddEmployee.click();



		//===================================================================================================================================================



		//   *********** Expected AddEmployeeText - Full Name (should be same)

		String Expect_AddAdminText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_AddAdminText);

		//<label class="hasTopFieldHelp">Full Name</label>
		By fullNameProperty=By.className("hasTopFieldHelp");
		WebElement fullName=driver.findElement(fullNameProperty);

		String Actual_AddEmployeeText=fullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_AddEmployeeText);

		if(Actual_AddEmployeeText.equals(Expect_AddAdminText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(1).createCell(12).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(12).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("FAIL");
		}



		//===================================================================================================================================================
		String addEmployeeUrlAddress="http://127.0.0.1/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee";

		for(int indexrow=1; indexrow<=Sheet.getLastRowNum(); indexrow++) {



		XSSFRow row_AddAdmin=Sheet.getRow(indexrow);

		// --->>>>> This Names is Expected TestData in the Excel Sheet

		            // FirstName - Test Data

		String firstName_TestData=row_AddAdmin.getCell(14).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="firstName" id="firstName">
		By firstNameProperty=By.id("firstName");
		WebElement firstName=driver.findElement(firstNameProperty);
		firstName.sendKeys(firstName_TestData);

		// MiddleName - Test Data
		String middleName_TestData=row_AddAdmin.getCell(15).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="middleName" id="middleName">
		By middleNameProperty=By.id("middleName");
		WebElement middleName=driver.findElement(middleNameProperty);
		middleName.sendKeys(middleName_TestData);

		// LastName - Test Data

		   String lastName_TestData=row_AddAdmin.getCell(16).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="lastName" id="lastName">
		By lastNameProperty=By.id("lastName");
		WebElement lastName=driver.findElement(lastNameProperty);
		lastName.sendKeys(lastName_TestData);

		 
		 
		  //********Enter AddName EmployeeId Automation      



		//<input class="formInputText valid" maxlength="10" type="text"
		//name="employeeId" value="0001" id="employeeId">
		     
		   By employeeIdProperty=By.id("employeeId");
		WebElement employeeId=driver.findElement(employeeIdProperty);
		String Id=employeeId.getAttribute("value");
		     
		System.out.println("the EmployId number is :-  "+Id);
		     
		Sheet.getRow(indexrow).createCell(17).setCellValue(Id);


		 //*************  Automation Save Button
		     
		    //<input type="button" class="" id="btnSave" value="Save">
		   
		    By saveProperty= By.id("btnSave");
		    WebElement  save= driver.findElement(saveProperty);
		    save.click();
		     

		//===================================================================================================================================================

		   

		//   *********** Expected Personal Details Text After Click on Save - Full Name (should be same)

		String Expect_PersonalDetailsPageText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_PersonalDetailsPageText);


		//<label for="Full_Name" class="hasTopFieldHelp">Full Name</label>
		By PersonalDetailsPage_FullNameProperty=By.className("hasTopFieldHelp");
		WebElement PersonalDetailsPage_FullName=driver.findElement(PersonalDetailsPage_FullNameProperty);

		String Actual_PersonalDetailsPageText=PersonalDetailsPage_FullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_PersonalDetailsPageText);

		if(Actual_PersonalDetailsPageText.equals(Expect_PersonalDetailsPageText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(indexrow).createCell(19).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(indexrow).createCell(19).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("FAIL");
		}


		System.out.println();
		//===================================================================================================================================================


		// --->>>>> This Names is Actual TestData in the Add Employee Page

		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving FirstName


		   
		//<input value="Madhu" type="text" name="personal[txtEmpFirstName]" class="block default editable" maxlength="30"
		//title="First Name" id="personal_txtEmpFirstName" disabled="disabled">
		 
		By afterSaveFirstNameProperty= By.id("personal_txtEmpFirstName");
		WebElement afterSaveFirstName = driver.findElement(afterSaveFirstNameProperty);
		String Actual_FirstName=afterSaveFirstName.getAttribute("value");
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving MiddleName
		 
		//<input value="Sai" type="text" name="personal[txtEmpMiddleName]" class="block default editable" maxlength="30"
		//title="Middle Name" id="personal_txtEmpMiddleName" disabled="disabled">
		     
		By afterSaveMiddleNameProperty= By.id("personal_txtEmpMiddleName");
		WebElement  afterSaveMiddleName= driver.findElement(afterSaveMiddleNameProperty);
		String Actual_MiddleName=afterSaveMiddleName.getAttribute("value");  
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving LastName
		 
		//<input value="Chandu" type="text" name="personal[txtEmpLastName]" class="block default editable" maxlength="30"
		//title="Last Name" id="personal_txtEmpLastName" disabled="disabled">
		   
		By afterSaveLastNameProperty=By.id("personal_txtEmpLastName");
		WebElement afterSaveLastName=driver.findElement(afterSaveLastNameProperty);
		String Actual_LastName=afterSaveLastName.getAttribute("value");
		 
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving EmployeeId
		 
		//<input value="0021" type="text" name="personal[txtEmployeeId]" maxlength="10" class="editable"
		//id="personal_txtEmployeeId" disabled="disabled">
		 
		   By afterSaveEmployeeIdPrperty=By.id("personal_txtEmployeeId");
		   WebElement afterSaveEmployeeId=driver.findElement(afterSaveEmployeeIdPrperty);
		String Actual_EmployeeId= afterSaveEmployeeId.getAttribute("value");
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  FristName  
		 
		if(Actual_FirstName.equals("Madhu"))
		{
		      System.out.println("After saving the FirstName are same :-  PASS");
		      Sheet.getRow(indexrow).createCell(21).setCellValue(Actual_FirstName);
		      Sheet.getRow(indexrow).createCell(22).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the FirstName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(21).setCellValue("NOT Match - "+Actual_FirstName);
		   Sheet.getRow(indexrow).createCell(22).setCellValue("FAIL");
		}
		 
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  MiddleName  

		if(Actual_MiddleName.equals("Sai"))
		{
		System.out.println("After saving the MiddleName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(23).setCellValue(Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the MiddleName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(23).setCellValue("NOT Match - "+Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  LastName  
		 
		if(Actual_LastName.equals("Chandu"))
		{
		System.out.println("After saving the LastName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(25).setCellValue(Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the LastName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(25).setCellValue("NOT Match - "+Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  EmployeeId
		 
		 
		if(Actual_EmployeeId.equals(Id))
		{
		System.out.println("After saving the EmployeeId are same :-  PASS");
		Sheet.getRow(indexrow).createCell(27).setCellValue(Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("PASS");
		   
		   
		}
		else
		{
		System.out.println("After saving the EmployeeId are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(27).setCellValue("NOT Match - "+Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("FAIL");

		}


		//...............................................................................................



		 
		//*************  Automation  Welcome Admin Button
		   
		//<a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>
		     

		welcomeAdminProperty=By.linkText("Welcome Admin");
		welcome=driver.findElement(welcomeAdminProperty);

		welcome.click();
		     
		Thread.sleep(5000);
		     
		//*************  Automation  Welcome Admin Button  
		     
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/auth/logout">Logout</a>
		     
		By logOutProperty= By.linkText("Logout");
		WebElement logOut=driver.findElement(logOutProperty);
		logOut.click();
		     


		//===================================================================================================================================================


		//Expected Text - LOGIN Panel (should be same)

		//<div id="logInPanelHeading">LOGIN Panel</div>

		expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		  // of the current webpage - identifying the LOGIN Panel



		OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(indexrow).createCell(30).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(indexrow).createCell(30).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("FAIL");
		}






./src/testDataResult/AddEmployee.xlsx
		FileOutputStream Madhu=new FileOutputStream("./src/testDataResult/AddEmployee.xlsx");
		                 
		       workbook.write(Madhu);

		System.out.println();


		driver.get(addEmployeeUrlAddress);





		// UserName - Test Data

		row=Sheet.getRow(1);

		userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		   userNameProperty=By.id("txtUsername");
		userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		passwordProperty=By.name("txtPassword");
		password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		logInProperty=By.className("button");
		logIn=driver.findElement(logInProperty);
		logIn.click();




		}

		



}













}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-16 20:05:56.138
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-16 20:05:56.139
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-16 20:05:57.236
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.OrangeHrmApplication;

import org.testng.annotations.Test;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;


public class OrangeHrmEmpolyleListadded extends BaseTest{

	@Test 
	public void Webpage() throws IOException, InterruptedException {
		FileInputStream file=new FileInputStream("./src/main/java/testDataFiles/AddEmployee.xlsx");

		XSSFWorkbook workbook=new XSSFWorkbook(file);

		XSSFSheet Sheet=workbook.getSheet("TestData");

		int row_count=Sheet.getLastRowNum();

		System.out.println("The number of row in the Sheet is :-  "+row_count);

		int rowOfCells_Count=Sheet.getLeftCol();

		System.out.println("The number of roeOfCells in the sheet is :-  "+rowOfCells_Count);

		//===================================================================================================================================================


		//<div id="logInPanelHeading">LOGIN Panel</div>

		String expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		// of the current webpage - identifying the LOGIN Panel



		By OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		WebElement OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		String actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(1).createCell(1).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(1).createCell(1).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("FAIL");
		}

		//===================================================================================================================================================

		//Expect Title is - OrangeHRM  (should be same)

		String Expected_orangeHrmLogInPage="OrangeHRM";
		System.out.println("The OrangeHRM logIn Page title is :-  "+Expected_orangeHrmLogInPage);


		String Actual_orangenHrmLogInPageText=driver.getTitle();
		System.out.println("The OrangenHrm LogIn Page Title is :-  "+Actual_orangenHrmLogInPageText);


		if(Actual_orangenHrmLogInPageText.equals(Expected_orangeHrmLogInPage))
		{
		System.out.println("The LogIn Page Title is Match :- PASS");
		Sheet.getRow(1).createCell(4).setCellValue(Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("PASS");
		}
		else {
		System.out.println("The LogIn Page Title is NOT Match :- FAIL");
		Sheet.getRow(1).createCell(4).setCellValue("NOT Match - "+Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("FAIL");
		}


		//===================================================================================================================================================


		// UserName - Test Data

		XSSFRow row=Sheet.getRow(1);

		String userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		By userNameProperty=By.id("txtUsername");
		WebElement userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		String password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		By passwordProperty=By.name("txtPassword");
		WebElement password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		By logInProperty=By.className("button");
		WebElement logIn=driver.findElement(logInProperty);
		logIn.click();


		//===================================================================================================================================================


		 //   *********** Expected Text - Welcome (should have)

		// ---->>>>>>>>>>>>>> Performing click on the Welcome WebElement
		         
		         
		// <a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>

		String Expect_WebpageText= "Admin";
		System.out.println("The Expected OrangeHrm Home page text is Welcome  :-  "+Expect_WebpageText);


		By welcomeAdminProperty=By.linkText("Welcome Admin");
		WebElement welcome=driver.findElement(welcomeAdminProperty);


		//String actual_welcomeHrefAttributeValue=welcome.getAttribute("id");

		            //OR

		String actual_welcomeHrefAttributeValue=welcome.getText();
		System.out.println("The href Attribute value of welcome webElement is :- "+actual_welcomeHrefAttributeValue);


		//if(actual_welcomeHrefAttributeValue.equals(Expect_WebpageText))

		                 //OR

		if(actual_welcomeHrefAttributeValue.contains(Expect_WebpageText))
		{
		System.out.println("The text is Match :- PASS");
		Sheet.getRow(1).createCell(9).setCellValue(actual_welcomeHrefAttributeValue);
		Sheet.getRow(1).createCell(10).setCellValue("PASS ");
		}
		else {
		System.out.println("The text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(9).setCellValue("Not Match the title Welcome");
		Sheet.getRow(1).createCell(10).setCellValue("Not Match the webpage FAIL");
		}



		//===================================================================================================================================================


		 
		//************Automation  Header link PIM  Button

		   //<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/viewPimModule"
		//id="menu_pim_viewPimModule" class="firstLevelMenu"><b>PIM</b></a>

		By PIMButtonProperty= By.linkText("PIM");
		WebElement PIMElement= driver.findElement(PIMButtonProperty);
		       
		Actions mouseHoverOperation=new Actions(driver);
		mouseHoverOperation.moveToElement(PIMElement).build().perform();

		//************Automation  Header link Add Employee  Button
		       
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee"
		   //id="menu_pim_addEmployee">Add Employee</a>

		By AddEmployeeProperty=By.linkText("Add Employee");
		WebElement AddEmployee=driver.findElement(AddEmployeeProperty);
		AddEmployee.click();



		//===================================================================================================================================================



		//   *********** Expected AddEmployeeText - Full Name (should be same)

		String Expect_AddAdminText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_AddAdminText);

		//<label class="hasTopFieldHelp">Full Name</label>
		By fullNameProperty=By.className("hasTopFieldHelp");
		WebElement fullName=driver.findElement(fullNameProperty);

		String Actual_AddEmployeeText=fullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_AddEmployeeText);

		if(Actual_AddEmployeeText.equals(Expect_AddAdminText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(1).createCell(12).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(12).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("FAIL");
		}



		//===================================================================================================================================================
		String addEmployeeUrlAddress="http://127.0.0.1/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee";

		for(int indexrow=1; indexrow<=Sheet.getLastRowNum(); indexrow++) {



		XSSFRow row_AddAdmin=Sheet.getRow(indexrow);

		// --->>>>> This Names is Expected TestData in the Excel Sheet

		            // FirstName - Test Data

		String firstName_TestData=row_AddAdmin.getCell(14).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="firstName" id="firstName">
		By firstNameProperty=By.id("firstName");
		WebElement firstName=driver.findElement(firstNameProperty);
		firstName.sendKeys(firstName_TestData);

		// MiddleName - Test Data
		String middleName_TestData=row_AddAdmin.getCell(15).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="middleName" id="middleName">
		By middleNameProperty=By.id("middleName");
		WebElement middleName=driver.findElement(middleNameProperty);
		middleName.sendKeys(middleName_TestData);

		// LastName - Test Data

		   String lastName_TestData=row_AddAdmin.getCell(16).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="lastName" id="lastName">
		By lastNameProperty=By.id("lastName");
		WebElement lastName=driver.findElement(lastNameProperty);
		lastName.sendKeys(lastName_TestData);

		 
		 
		  //********Enter AddName EmployeeId Automation      



		//<input class="formInputText valid" maxlength="10" type="text"
		//name="employeeId" value="0001" id="employeeId">
		     
		   By employeeIdProperty=By.id("employeeId");
		WebElement employeeId=driver.findElement(employeeIdProperty);
		String Id=employeeId.getAttribute("value");
		     
		System.out.println("the EmployId number is :-  "+Id);
		     
		Sheet.getRow(indexrow).createCell(17).setCellValue(Id);


		 //*************  Automation Save Button
		     
		    //<input type="button" class="" id="btnSave" value="Save">
		   
		    By saveProperty= By.id("btnSave");
		    WebElement  save= driver.findElement(saveProperty);
		    save.click();
		     

		//===================================================================================================================================================

		   

		//   *********** Expected Personal Details Text After Click on Save - Full Name (should be same)

		String Expect_PersonalDetailsPageText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_PersonalDetailsPageText);


		//<label for="Full_Name" class="hasTopFieldHelp">Full Name</label>
		By PersonalDetailsPage_FullNameProperty=By.className("hasTopFieldHelp");
		WebElement PersonalDetailsPage_FullName=driver.findElement(PersonalDetailsPage_FullNameProperty);

		String Actual_PersonalDetailsPageText=PersonalDetailsPage_FullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_PersonalDetailsPageText);

		if(Actual_PersonalDetailsPageText.equals(Expect_PersonalDetailsPageText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(indexrow).createCell(19).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(indexrow).createCell(19).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("FAIL");
		}


		System.out.println();
		//===================================================================================================================================================


		// --->>>>> This Names is Actual TestData in the Add Employee Page

		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving FirstName


		   
		//<input value="Madhu" type="text" name="personal[txtEmpFirstName]" class="block default editable" maxlength="30"
		//title="First Name" id="personal_txtEmpFirstName" disabled="disabled">
		 
		By afterSaveFirstNameProperty= By.id("personal_txtEmpFirstName");
		WebElement afterSaveFirstName = driver.findElement(afterSaveFirstNameProperty);
		String Actual_FirstName=afterSaveFirstName.getAttribute("value");
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving MiddleName
		 
		//<input value="Sai" type="text" name="personal[txtEmpMiddleName]" class="block default editable" maxlength="30"
		//title="Middle Name" id="personal_txtEmpMiddleName" disabled="disabled">
		     
		By afterSaveMiddleNameProperty= By.id("personal_txtEmpMiddleName");
		WebElement  afterSaveMiddleName= driver.findElement(afterSaveMiddleNameProperty);
		String Actual_MiddleName=afterSaveMiddleName.getAttribute("value");  
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving LastName
		 
		//<input value="Chandu" type="text" name="personal[txtEmpLastName]" class="block default editable" maxlength="30"
		//title="Last Name" id="personal_txtEmpLastName" disabled="disabled">
		   
		By afterSaveLastNameProperty=By.id("personal_txtEmpLastName");
		WebElement afterSaveLastName=driver.findElement(afterSaveLastNameProperty);
		String Actual_LastName=afterSaveLastName.getAttribute("value");
		 
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving EmployeeId
		 
		//<input value="0021" type="text" name="personal[txtEmployeeId]" maxlength="10" class="editable"
		//id="personal_txtEmployeeId" disabled="disabled">
		 
		   By afterSaveEmployeeIdPrperty=By.id("personal_txtEmployeeId");
		   WebElement afterSaveEmployeeId=driver.findElement(afterSaveEmployeeIdPrperty);
		String Actual_EmployeeId= afterSaveEmployeeId.getAttribute("value");
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  FristName  
		 
		if(Actual_FirstName.equals("Madhu"))
		{
		      System.out.println("After saving the FirstName are same :-  PASS");
		      Sheet.getRow(indexrow).createCell(21).setCellValue(Actual_FirstName);
		      Sheet.getRow(indexrow).createCell(22).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the FirstName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(21).setCellValue("NOT Match - "+Actual_FirstName);
		   Sheet.getRow(indexrow).createCell(22).setCellValue("FAIL");
		}
		 
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  MiddleName  

		if(Actual_MiddleName.equals("Sai"))
		{
		System.out.println("After saving the MiddleName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(23).setCellValue(Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the MiddleName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(23).setCellValue("NOT Match - "+Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  LastName  
		 
		if(Actual_LastName.equals("Chandu"))
		{
		System.out.println("After saving the LastName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(25).setCellValue(Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the LastName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(25).setCellValue("NOT Match - "+Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  EmployeeId
		 
		 
		if(Actual_EmployeeId.equals(Id))
		{
		System.out.println("After saving the EmployeeId are same :-  PASS");
		Sheet.getRow(indexrow).createCell(27).setCellValue(Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("PASS");
		   
		   
		}
		else
		{
		System.out.println("After saving the EmployeeId are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(27).setCellValue("NOT Match - "+Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("FAIL");

		}


		//...............................................................................................



		 
		//*************  Automation  Welcome Admin Button
		   
		//<a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>
		     

		welcomeAdminProperty=By.linkText("Welcome Admin");
		welcome=driver.findElement(welcomeAdminProperty);

		welcome.click();
		     
		Thread.sleep(5000);
		     
		//*************  Automation  Welcome Admin Button  
		     
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/auth/logout">Logout</a>
		     
		By logOutProperty= By.linkText("Logout");
		WebElement logOut=driver.findElement(logOutProperty);
		logOut.click();
		     


		//===================================================================================================================================================


		//Expected Text - LOGIN Panel (should be same)

		//<div id="logInPanelHeading">LOGIN Panel</div>

		expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		  // of the current webpage - identifying the LOGIN Panel



		OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(indexrow).createCell(30).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(indexrow).createCell(30).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("FAIL");
		}






./src/testDataResult/AddEmployee.xlsx
		FileOutputStream Madhu=new FileOutputStream("/AddEmployee.xlsx");
		                 
		       workbook.write(Madhu);

		System.out.println();


		driver.get(addEmployeeUrlAddress);





		// UserName - Test Data

		row=Sheet.getRow(1);

		userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		   userNameProperty=By.id("txtUsername");
		userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		passwordProperty=By.name("txtPassword");
		password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		logInProperty=By.className("button");
		logIn=driver.findElement(logInProperty);
		logIn.click();




		}

		



}













}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-16 20:05:57.237
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-16 20:05:57.239
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-16 20:05:57.253
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.OrangeHrmApplication;

import org.testng.annotations.Test;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;


public class OrangeHrmEmpolyleListadded extends BaseTest{

	@Test 
	public void Webpage() throws IOException, InterruptedException {
		FileInputStream file=new FileInputStream("./src/main/java/testDataFiles/AddEmployee.xlsx");

		XSSFWorkbook workbook=new XSSFWorkbook(file);

		XSSFSheet Sheet=workbook.getSheet("TestData");

		int row_count=Sheet.getLastRowNum();

		System.out.println("The number of row in the Sheet is :-  "+row_count);

		int rowOfCells_Count=Sheet.getLeftCol();

		System.out.println("The number of roeOfCells in the sheet is :-  "+rowOfCells_Count);

		//===================================================================================================================================================


		//<div id="logInPanelHeading">LOGIN Panel</div>

		String expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		// of the current webpage - identifying the LOGIN Panel



		By OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		WebElement OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		String actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(1).createCell(1).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(1).createCell(1).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("FAIL");
		}

		//===================================================================================================================================================

		//Expect Title is - OrangeHRM  (should be same)

		String Expected_orangeHrmLogInPage="OrangeHRM";
		System.out.println("The OrangeHRM logIn Page title is :-  "+Expected_orangeHrmLogInPage);


		String Actual_orangenHrmLogInPageText=driver.getTitle();
		System.out.println("The OrangenHrm LogIn Page Title is :-  "+Actual_orangenHrmLogInPageText);


		if(Actual_orangenHrmLogInPageText.equals(Expected_orangeHrmLogInPage))
		{
		System.out.println("The LogIn Page Title is Match :- PASS");
		Sheet.getRow(1).createCell(4).setCellValue(Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("PASS");
		}
		else {
		System.out.println("The LogIn Page Title is NOT Match :- FAIL");
		Sheet.getRow(1).createCell(4).setCellValue("NOT Match - "+Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("FAIL");
		}


		//===================================================================================================================================================


		// UserName - Test Data

		XSSFRow row=Sheet.getRow(1);

		String userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		By userNameProperty=By.id("txtUsername");
		WebElement userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		String password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		By passwordProperty=By.name("txtPassword");
		WebElement password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		By logInProperty=By.className("button");
		WebElement logIn=driver.findElement(logInProperty);
		logIn.click();


		//===================================================================================================================================================


		 //   *********** Expected Text - Welcome (should have)

		// ---->>>>>>>>>>>>>> Performing click on the Welcome WebElement
		         
		         
		// <a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>

		String Expect_WebpageText= "Admin";
		System.out.println("The Expected OrangeHrm Home page text is Welcome  :-  "+Expect_WebpageText);


		By welcomeAdminProperty=By.linkText("Welcome Admin");
		WebElement welcome=driver.findElement(welcomeAdminProperty);


		//String actual_welcomeHrefAttributeValue=welcome.getAttribute("id");

		            //OR

		String actual_welcomeHrefAttributeValue=welcome.getText();
		System.out.println("The href Attribute value of welcome webElement is :- "+actual_welcomeHrefAttributeValue);


		//if(actual_welcomeHrefAttributeValue.equals(Expect_WebpageText))

		                 //OR

		if(actual_welcomeHrefAttributeValue.contains(Expect_WebpageText))
		{
		System.out.println("The text is Match :- PASS");
		Sheet.getRow(1).createCell(9).setCellValue(actual_welcomeHrefAttributeValue);
		Sheet.getRow(1).createCell(10).setCellValue("PASS ");
		}
		else {
		System.out.println("The text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(9).setCellValue("Not Match the title Welcome");
		Sheet.getRow(1).createCell(10).setCellValue("Not Match the webpage FAIL");
		}



		//===================================================================================================================================================


		 
		//************Automation  Header link PIM  Button

		   //<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/viewPimModule"
		//id="menu_pim_viewPimModule" class="firstLevelMenu"><b>PIM</b></a>

		By PIMButtonProperty= By.linkText("PIM");
		WebElement PIMElement= driver.findElement(PIMButtonProperty);
		       
		Actions mouseHoverOperation=new Actions(driver);
		mouseHoverOperation.moveToElement(PIMElement).build().perform();

		//************Automation  Header link Add Employee  Button
		       
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee"
		   //id="menu_pim_addEmployee">Add Employee</a>

		By AddEmployeeProperty=By.linkText("Add Employee");
		WebElement AddEmployee=driver.findElement(AddEmployeeProperty);
		AddEmployee.click();



		//===================================================================================================================================================



		//   *********** Expected AddEmployeeText - Full Name (should be same)

		String Expect_AddAdminText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_AddAdminText);

		//<label class="hasTopFieldHelp">Full Name</label>
		By fullNameProperty=By.className("hasTopFieldHelp");
		WebElement fullName=driver.findElement(fullNameProperty);

		String Actual_AddEmployeeText=fullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_AddEmployeeText);

		if(Actual_AddEmployeeText.equals(Expect_AddAdminText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(1).createCell(12).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(12).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("FAIL");
		}



		//===================================================================================================================================================
		String addEmployeeUrlAddress="http://127.0.0.1/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee";

		for(int indexrow=1; indexrow<=Sheet.getLastRowNum(); indexrow++) {



		XSSFRow row_AddAdmin=Sheet.getRow(indexrow);

		// --->>>>> This Names is Expected TestData in the Excel Sheet

		            // FirstName - Test Data

		String firstName_TestData=row_AddAdmin.getCell(14).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="firstName" id="firstName">
		By firstNameProperty=By.id("firstName");
		WebElement firstName=driver.findElement(firstNameProperty);
		firstName.sendKeys(firstName_TestData);

		// MiddleName - Test Data
		String middleName_TestData=row_AddAdmin.getCell(15).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="middleName" id="middleName">
		By middleNameProperty=By.id("middleName");
		WebElement middleName=driver.findElement(middleNameProperty);
		middleName.sendKeys(middleName_TestData);

		// LastName - Test Data

		   String lastName_TestData=row_AddAdmin.getCell(16).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="lastName" id="lastName">
		By lastNameProperty=By.id("lastName");
		WebElement lastName=driver.findElement(lastNameProperty);
		lastName.sendKeys(lastName_TestData);

		 
		 
		  //********Enter AddName EmployeeId Automation      



		//<input class="formInputText valid" maxlength="10" type="text"
		//name="employeeId" value="0001" id="employeeId">
		     
		   By employeeIdProperty=By.id("employeeId");
		WebElement employeeId=driver.findElement(employeeIdProperty);
		String Id=employeeId.getAttribute("value");
		     
		System.out.println("the EmployId number is :-  "+Id);
		     
		Sheet.getRow(indexrow).createCell(17).setCellValue(Id);


		 //*************  Automation Save Button
		     
		    //<input type="button" class="" id="btnSave" value="Save">
		   
		    By saveProperty= By.id("btnSave");
		    WebElement  save= driver.findElement(saveProperty);
		    save.click();
		     

		//===================================================================================================================================================

		   

		//   *********** Expected Personal Details Text After Click on Save - Full Name (should be same)

		String Expect_PersonalDetailsPageText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_PersonalDetailsPageText);


		//<label for="Full_Name" class="hasTopFieldHelp">Full Name</label>
		By PersonalDetailsPage_FullNameProperty=By.className("hasTopFieldHelp");
		WebElement PersonalDetailsPage_FullName=driver.findElement(PersonalDetailsPage_FullNameProperty);

		String Actual_PersonalDetailsPageText=PersonalDetailsPage_FullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_PersonalDetailsPageText);

		if(Actual_PersonalDetailsPageText.equals(Expect_PersonalDetailsPageText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(indexrow).createCell(19).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(indexrow).createCell(19).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("FAIL");
		}


		System.out.println();
		//===================================================================================================================================================


		// --->>>>> This Names is Actual TestData in the Add Employee Page

		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving FirstName


		   
		//<input value="Madhu" type="text" name="personal[txtEmpFirstName]" class="block default editable" maxlength="30"
		//title="First Name" id="personal_txtEmpFirstName" disabled="disabled">
		 
		By afterSaveFirstNameProperty= By.id("personal_txtEmpFirstName");
		WebElement afterSaveFirstName = driver.findElement(afterSaveFirstNameProperty);
		String Actual_FirstName=afterSaveFirstName.getAttribute("value");
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving MiddleName
		 
		//<input value="Sai" type="text" name="personal[txtEmpMiddleName]" class="block default editable" maxlength="30"
		//title="Middle Name" id="personal_txtEmpMiddleName" disabled="disabled">
		     
		By afterSaveMiddleNameProperty= By.id("personal_txtEmpMiddleName");
		WebElement  afterSaveMiddleName= driver.findElement(afterSaveMiddleNameProperty);
		String Actual_MiddleName=afterSaveMiddleName.getAttribute("value");  
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving LastName
		 
		//<input value="Chandu" type="text" name="personal[txtEmpLastName]" class="block default editable" maxlength="30"
		//title="Last Name" id="personal_txtEmpLastName" disabled="disabled">
		   
		By afterSaveLastNameProperty=By.id("personal_txtEmpLastName");
		WebElement afterSaveLastName=driver.findElement(afterSaveLastNameProperty);
		String Actual_LastName=afterSaveLastName.getAttribute("value");
		 
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving EmployeeId
		 
		//<input value="0021" type="text" name="personal[txtEmployeeId]" maxlength="10" class="editable"
		//id="personal_txtEmployeeId" disabled="disabled">
		 
		   By afterSaveEmployeeIdPrperty=By.id("personal_txtEmployeeId");
		   WebElement afterSaveEmployeeId=driver.findElement(afterSaveEmployeeIdPrperty);
		String Actual_EmployeeId= afterSaveEmployeeId.getAttribute("value");
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  FristName  
		 
		if(Actual_FirstName.equals("Madhu"))
		{
		      System.out.println("After saving the FirstName are same :-  PASS");
		      Sheet.getRow(indexrow).createCell(21).setCellValue(Actual_FirstName);
		      Sheet.getRow(indexrow).createCell(22).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the FirstName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(21).setCellValue("NOT Match - "+Actual_FirstName);
		   Sheet.getRow(indexrow).createCell(22).setCellValue("FAIL");
		}
		 
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  MiddleName  

		if(Actual_MiddleName.equals("Sai"))
		{
		System.out.println("After saving the MiddleName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(23).setCellValue(Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the MiddleName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(23).setCellValue("NOT Match - "+Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  LastName  
		 
		if(Actual_LastName.equals("Chandu"))
		{
		System.out.println("After saving the LastName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(25).setCellValue(Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the LastName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(25).setCellValue("NOT Match - "+Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  EmployeeId
		 
		 
		if(Actual_EmployeeId.equals(Id))
		{
		System.out.println("After saving the EmployeeId are same :-  PASS");
		Sheet.getRow(indexrow).createCell(27).setCellValue(Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("PASS");
		   
		   
		}
		else
		{
		System.out.println("After saving the EmployeeId are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(27).setCellValue("NOT Match - "+Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("FAIL");

		}


		//...............................................................................................



		 
		//*************  Automation  Welcome Admin Button
		   
		//<a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>
		     

		welcomeAdminProperty=By.linkText("Welcome Admin");
		welcome=driver.findElement(welcomeAdminProperty);

		welcome.click();
		     
		Thread.sleep(5000);
		     
		//*************  Automation  Welcome Admin Button  
		     
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/auth/logout">Logout</a>
		     
		By logOutProperty= By.linkText("Logout");
		WebElement logOut=driver.findElement(logOutProperty);
		logOut.click();
		     


		//===================================================================================================================================================


		//Expected Text - LOGIN Panel (should be same)

		//<div id="logInPanelHeading">LOGIN Panel</div>

		expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		  // of the current webpage - identifying the LOGIN Panel



		OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(indexrow).createCell(30).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(indexrow).createCell(30).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("FAIL");
		}






./src/testDataResult/AddEmployee.xlsx
		FileOutputStream Madhu=new FileOutputStream("/AddEmployee.xlsx");
		                 
		       workbook.write(Madhu);

		System.out.println();


		driver.get(addEmployeeUrlAddress);





		// UserName - Test Data

		row=Sheet.getRow(1);

		userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		   userNameProperty=By.id("txtUsername");
		userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		passwordProperty=By.name("txtPassword");
		password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		logInProperty=By.className("button");
		logIn=driver.findElement(logInProperty);
		logIn.click();




		}

		



}













}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-16 20:05:57.255
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-16 20:05:57.256
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-16 20:06:18.628
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.OrangeHrmApplication;

import org.testng.annotations.Test;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;


public class OrangeHrmEmpolyleListadded extends BaseTest{

	@Test 
	public void Webpage() throws IOException, InterruptedException {
		FileInputStream file=new FileInputStream("./src/main/java/testDataFiles/AddEmployee.xlsx");

		XSSFWorkbook workbook=new XSSFWorkbook(file);

		XSSFSheet Sheet=workbook.getSheet("TestData");

		int row_count=Sheet.getLastRowNum();

		System.out.println("The number of row in the Sheet is :-  "+row_count);

		int rowOfCells_Count=Sheet.getLeftCol();

		System.out.println("The number of roeOfCells in the sheet is :-  "+rowOfCells_Count);

		//===================================================================================================================================================


		//<div id="logInPanelHeading">LOGIN Panel</div>

		String expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		// of the current webpage - identifying the LOGIN Panel



		By OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		WebElement OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		String actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(1).createCell(1).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(1).createCell(1).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("FAIL");
		}

		//===================================================================================================================================================

		//Expect Title is - OrangeHRM  (should be same)

		String Expected_orangeHrmLogInPage="OrangeHRM";
		System.out.println("The OrangeHRM logIn Page title is :-  "+Expected_orangeHrmLogInPage);


		String Actual_orangenHrmLogInPageText=driver.getTitle();
		System.out.println("The OrangenHrm LogIn Page Title is :-  "+Actual_orangenHrmLogInPageText);


		if(Actual_orangenHrmLogInPageText.equals(Expected_orangeHrmLogInPage))
		{
		System.out.println("The LogIn Page Title is Match :- PASS");
		Sheet.getRow(1).createCell(4).setCellValue(Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("PASS");
		}
		else {
		System.out.println("The LogIn Page Title is NOT Match :- FAIL");
		Sheet.getRow(1).createCell(4).setCellValue("NOT Match - "+Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("FAIL");
		}


		//===================================================================================================================================================


		// UserName - Test Data

		XSSFRow row=Sheet.getRow(1);

		String userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		By userNameProperty=By.id("txtUsername");
		WebElement userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		String password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		By passwordProperty=By.name("txtPassword");
		WebElement password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		By logInProperty=By.className("button");
		WebElement logIn=driver.findElement(logInProperty);
		logIn.click();


		//===================================================================================================================================================


		 //   *********** Expected Text - Welcome (should have)

		// ---->>>>>>>>>>>>>> Performing click on the Welcome WebElement
		         
		         
		// <a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>

		String Expect_WebpageText= "Admin";
		System.out.println("The Expected OrangeHrm Home page text is Welcome  :-  "+Expect_WebpageText);


		By welcomeAdminProperty=By.linkText("Welcome Admin");
		WebElement welcome=driver.findElement(welcomeAdminProperty);


		//String actual_welcomeHrefAttributeValue=welcome.getAttribute("id");

		            //OR

		String actual_welcomeHrefAttributeValue=welcome.getText();
		System.out.println("The href Attribute value of welcome webElement is :- "+actual_welcomeHrefAttributeValue);


		//if(actual_welcomeHrefAttributeValue.equals(Expect_WebpageText))

		                 //OR

		if(actual_welcomeHrefAttributeValue.contains(Expect_WebpageText))
		{
		System.out.println("The text is Match :- PASS");
		Sheet.getRow(1).createCell(9).setCellValue(actual_welcomeHrefAttributeValue);
		Sheet.getRow(1).createCell(10).setCellValue("PASS ");
		}
		else {
		System.out.println("The text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(9).setCellValue("Not Match the title Welcome");
		Sheet.getRow(1).createCell(10).setCellValue("Not Match the webpage FAIL");
		}



		//===================================================================================================================================================


		 
		//************Automation  Header link PIM  Button

		   //<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/viewPimModule"
		//id="menu_pim_viewPimModule" class="firstLevelMenu"><b>PIM</b></a>

		By PIMButtonProperty= By.linkText("PIM");
		WebElement PIMElement= driver.findElement(PIMButtonProperty);
		       
		Actions mouseHoverOperation=new Actions(driver);
		mouseHoverOperation.moveToElement(PIMElement).build().perform();

		//************Automation  Header link Add Employee  Button
		       
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee"
		   //id="menu_pim_addEmployee">Add Employee</a>

		By AddEmployeeProperty=By.linkText("Add Employee");
		WebElement AddEmployee=driver.findElement(AddEmployeeProperty);
		AddEmployee.click();



		//===================================================================================================================================================



		//   *********** Expected AddEmployeeText - Full Name (should be same)

		String Expect_AddAdminText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_AddAdminText);

		//<label class="hasTopFieldHelp">Full Name</label>
		By fullNameProperty=By.className("hasTopFieldHelp");
		WebElement fullName=driver.findElement(fullNameProperty);

		String Actual_AddEmployeeText=fullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_AddEmployeeText);

		if(Actual_AddEmployeeText.equals(Expect_AddAdminText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(1).createCell(12).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(12).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("FAIL");
		}



		//===================================================================================================================================================
		String addEmployeeUrlAddress="http://127.0.0.1/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee";

		for(int indexrow=1; indexrow<=Sheet.getLastRowNum(); indexrow++) {



		XSSFRow row_AddAdmin=Sheet.getRow(indexrow);

		// --->>>>> This Names is Expected TestData in the Excel Sheet

		            // FirstName - Test Data

		String firstName_TestData=row_AddAdmin.getCell(14).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="firstName" id="firstName">
		By firstNameProperty=By.id("firstName");
		WebElement firstName=driver.findElement(firstNameProperty);
		firstName.sendKeys(firstName_TestData);

		// MiddleName - Test Data
		String middleName_TestData=row_AddAdmin.getCell(15).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="middleName" id="middleName">
		By middleNameProperty=By.id("middleName");
		WebElement middleName=driver.findElement(middleNameProperty);
		middleName.sendKeys(middleName_TestData);

		// LastName - Test Data

		   String lastName_TestData=row_AddAdmin.getCell(16).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="lastName" id="lastName">
		By lastNameProperty=By.id("lastName");
		WebElement lastName=driver.findElement(lastNameProperty);
		lastName.sendKeys(lastName_TestData);

		 
		 
		  //********Enter AddName EmployeeId Automation      



		//<input class="formInputText valid" maxlength="10" type="text"
		//name="employeeId" value="0001" id="employeeId">
		     
		   By employeeIdProperty=By.id("employeeId");
		WebElement employeeId=driver.findElement(employeeIdProperty);
		String Id=employeeId.getAttribute("value");
		     
		System.out.println("the EmployId number is :-  "+Id);
		     
		Sheet.getRow(indexrow).createCell(17).setCellValue(Id);


		 //*************  Automation Save Button
		     
		    //<input type="button" class="" id="btnSave" value="Save">
		   
		    By saveProperty= By.id("btnSave");
		    WebElement  save= driver.findElement(saveProperty);
		    save.click();
		     

		//===================================================================================================================================================

		   

		//   *********** Expected Personal Details Text After Click on Save - Full Name (should be same)

		String Expect_PersonalDetailsPageText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_PersonalDetailsPageText);


		//<label for="Full_Name" class="hasTopFieldHelp">Full Name</label>
		By PersonalDetailsPage_FullNameProperty=By.className("hasTopFieldHelp");
		WebElement PersonalDetailsPage_FullName=driver.findElement(PersonalDetailsPage_FullNameProperty);

		String Actual_PersonalDetailsPageText=PersonalDetailsPage_FullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_PersonalDetailsPageText);

		if(Actual_PersonalDetailsPageText.equals(Expect_PersonalDetailsPageText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(indexrow).createCell(19).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(indexrow).createCell(19).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("FAIL");
		}


		System.out.println();
		//===================================================================================================================================================


		// --->>>>> This Names is Actual TestData in the Add Employee Page

		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving FirstName


		   
		//<input value="Madhu" type="text" name="personal[txtEmpFirstName]" class="block default editable" maxlength="30"
		//title="First Name" id="personal_txtEmpFirstName" disabled="disabled">
		 
		By afterSaveFirstNameProperty= By.id("personal_txtEmpFirstName");
		WebElement afterSaveFirstName = driver.findElement(afterSaveFirstNameProperty);
		String Actual_FirstName=afterSaveFirstName.getAttribute("value");
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving MiddleName
		 
		//<input value="Sai" type="text" name="personal[txtEmpMiddleName]" class="block default editable" maxlength="30"
		//title="Middle Name" id="personal_txtEmpMiddleName" disabled="disabled">
		     
		By afterSaveMiddleNameProperty= By.id("personal_txtEmpMiddleName");
		WebElement  afterSaveMiddleName= driver.findElement(afterSaveMiddleNameProperty);
		String Actual_MiddleName=afterSaveMiddleName.getAttribute("value");  
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving LastName
		 
		//<input value="Chandu" type="text" name="personal[txtEmpLastName]" class="block default editable" maxlength="30"
		//title="Last Name" id="personal_txtEmpLastName" disabled="disabled">
		   
		By afterSaveLastNameProperty=By.id("personal_txtEmpLastName");
		WebElement afterSaveLastName=driver.findElement(afterSaveLastNameProperty);
		String Actual_LastName=afterSaveLastName.getAttribute("value");
		 
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving EmployeeId
		 
		//<input value="0021" type="text" name="personal[txtEmployeeId]" maxlength="10" class="editable"
		//id="personal_txtEmployeeId" disabled="disabled">
		 
		   By afterSaveEmployeeIdPrperty=By.id("personal_txtEmployeeId");
		   WebElement afterSaveEmployeeId=driver.findElement(afterSaveEmployeeIdPrperty);
		String Actual_EmployeeId= afterSaveEmployeeId.getAttribute("value");
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  FristName  
		 
		if(Actual_FirstName.equals("Madhu"))
		{
		      System.out.println("After saving the FirstName are same :-  PASS");
		      Sheet.getRow(indexrow).createCell(21).setCellValue(Actual_FirstName);
		      Sheet.getRow(indexrow).createCell(22).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the FirstName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(21).setCellValue("NOT Match - "+Actual_FirstName);
		   Sheet.getRow(indexrow).createCell(22).setCellValue("FAIL");
		}
		 
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  MiddleName  

		if(Actual_MiddleName.equals("Sai"))
		{
		System.out.println("After saving the MiddleName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(23).setCellValue(Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the MiddleName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(23).setCellValue("NOT Match - "+Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  LastName  
		 
		if(Actual_LastName.equals("Chandu"))
		{
		System.out.println("After saving the LastName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(25).setCellValue(Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the LastName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(25).setCellValue("NOT Match - "+Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  EmployeeId
		 
		 
		if(Actual_EmployeeId.equals(Id))
		{
		System.out.println("After saving the EmployeeId are same :-  PASS");
		Sheet.getRow(indexrow).createCell(27).setCellValue(Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("PASS");
		   
		   
		}
		else
		{
		System.out.println("After saving the EmployeeId are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(27).setCellValue("NOT Match - "+Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("FAIL");

		}


		//...............................................................................................



		 
		//*************  Automation  Welcome Admin Button
		   
		//<a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>
		     

		welcomeAdminProperty=By.linkText("Welcome Admin");
		welcome=driver.findElement(welcomeAdminProperty);

		welcome.click();
		     
		Thread.sleep(5000);
		     
		//*************  Automation  Welcome Admin Button  
		     
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/auth/logout">Logout</a>
		     
		By logOutProperty= By.linkText("Logout");
		WebElement logOut=driver.findElement(logOutProperty);
		logOut.click();
		     


		//===================================================================================================================================================


		//Expected Text - LOGIN Panel (should be same)

		//<div id="logInPanelHeading">LOGIN Panel</div>

		expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		  // of the current webpage - identifying the LOGIN Panel



		OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(indexrow).createCell(30).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(indexrow).createCell(30).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("FAIL");
		}






./src/testDataResult/AddEmployee.xlsx
		FileOutputStream Madhu=new FileOutputStream("/AddEmployee.xlsx");
		                 
		       workbook.write(Madhu);

		System.out.println();


		driver.get(addEmployeeUrlAddress);





		// UserName - Test Data

		row=Sheet.getRow(1);

		userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		   userNameProperty=By.id("txtUsername");
		userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		passwordProperty=By.name("txtPassword");
		password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		logInProperty=By.className("button");
		logIn=driver.findElement(logInProperty);
		logIn.click();




		}

		



}













}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-16 20:06:18.630
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-16 20:06:18.631
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-16 20:06:19.320
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.OrangeHrmApplication;

import org.testng.annotations.Test;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;


public class OrangeHrmEmpolyleListadded extends BaseTest{

	@Test 
	public void Webpage() throws IOException, InterruptedException {
		FileInputStream file=new FileInputStream("./src/main/java/testDataFiles/AddEmployee.xlsx");

		XSSFWorkbook workbook=new XSSFWorkbook(file);

		XSSFSheet Sheet=workbook.getSheet("TestData");

		int row_count=Sheet.getLastRowNum();

		System.out.println("The number of row in the Sheet is :-  "+row_count);

		int rowOfCells_Count=Sheet.getLeftCol();

		System.out.println("The number of roeOfCells in the sheet is :-  "+rowOfCells_Count);

		//===================================================================================================================================================


		//<div id="logInPanelHeading">LOGIN Panel</div>

		String expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		// of the current webpage - identifying the LOGIN Panel



		By OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		WebElement OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		String actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(1).createCell(1).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(1).createCell(1).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("FAIL");
		}

		//===================================================================================================================================================

		//Expect Title is - OrangeHRM  (should be same)

		String Expected_orangeHrmLogInPage="OrangeHRM";
		System.out.println("The OrangeHRM logIn Page title is :-  "+Expected_orangeHrmLogInPage);


		String Actual_orangenHrmLogInPageText=driver.getTitle();
		System.out.println("The OrangenHrm LogIn Page Title is :-  "+Actual_orangenHrmLogInPageText);


		if(Actual_orangenHrmLogInPageText.equals(Expected_orangeHrmLogInPage))
		{
		System.out.println("The LogIn Page Title is Match :- PASS");
		Sheet.getRow(1).createCell(4).setCellValue(Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("PASS");
		}
		else {
		System.out.println("The LogIn Page Title is NOT Match :- FAIL");
		Sheet.getRow(1).createCell(4).setCellValue("NOT Match - "+Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("FAIL");
		}


		//===================================================================================================================================================


		// UserName - Test Data

		XSSFRow row=Sheet.getRow(1);

		String userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		By userNameProperty=By.id("txtUsername");
		WebElement userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		String password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		By passwordProperty=By.name("txtPassword");
		WebElement password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		By logInProperty=By.className("button");
		WebElement logIn=driver.findElement(logInProperty);
		logIn.click();


		//===================================================================================================================================================


		 //   *********** Expected Text - Welcome (should have)

		// ---->>>>>>>>>>>>>> Performing click on the Welcome WebElement
		         
		         
		// <a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>

		String Expect_WebpageText= "Admin";
		System.out.println("The Expected OrangeHrm Home page text is Welcome  :-  "+Expect_WebpageText);


		By welcomeAdminProperty=By.linkText("Welcome Admin");
		WebElement welcome=driver.findElement(welcomeAdminProperty);


		//String actual_welcomeHrefAttributeValue=welcome.getAttribute("id");

		            //OR

		String actual_welcomeHrefAttributeValue=welcome.getText();
		System.out.println("The href Attribute value of welcome webElement is :- "+actual_welcomeHrefAttributeValue);


		//if(actual_welcomeHrefAttributeValue.equals(Expect_WebpageText))

		                 //OR

		if(actual_welcomeHrefAttributeValue.contains(Expect_WebpageText))
		{
		System.out.println("The text is Match :- PASS");
		Sheet.getRow(1).createCell(9).setCellValue(actual_welcomeHrefAttributeValue);
		Sheet.getRow(1).createCell(10).setCellValue("PASS ");
		}
		else {
		System.out.println("The text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(9).setCellValue("Not Match the title Welcome");
		Sheet.getRow(1).createCell(10).setCellValue("Not Match the webpage FAIL");
		}



		//===================================================================================================================================================


		 
		//************Automation  Header link PIM  Button

		   //<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/viewPimModule"
		//id="menu_pim_viewPimModule" class="firstLevelMenu"><b>PIM</b></a>

		By PIMButtonProperty= By.linkText("PIM");
		WebElement PIMElement= driver.findElement(PIMButtonProperty);
		       
		Actions mouseHoverOperation=new Actions(driver);
		mouseHoverOperation.moveToElement(PIMElement).build().perform();

		//************Automation  Header link Add Employee  Button
		       
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee"
		   //id="menu_pim_addEmployee">Add Employee</a>

		By AddEmployeeProperty=By.linkText("Add Employee");
		WebElement AddEmployee=driver.findElement(AddEmployeeProperty);
		AddEmployee.click();



		//===================================================================================================================================================



		//   *********** Expected AddEmployeeText - Full Name (should be same)

		String Expect_AddAdminText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_AddAdminText);

		//<label class="hasTopFieldHelp">Full Name</label>
		By fullNameProperty=By.className("hasTopFieldHelp");
		WebElement fullName=driver.findElement(fullNameProperty);

		String Actual_AddEmployeeText=fullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_AddEmployeeText);

		if(Actual_AddEmployeeText.equals(Expect_AddAdminText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(1).createCell(12).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(12).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("FAIL");
		}



		//===================================================================================================================================================
		String addEmployeeUrlAddress="http://127.0.0.1/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee";

		for(int indexrow=1; indexrow<=Sheet.getLastRowNum(); indexrow++) {



		XSSFRow row_AddAdmin=Sheet.getRow(indexrow);

		// --->>>>> This Names is Expected TestData in the Excel Sheet

		            // FirstName - Test Data

		String firstName_TestData=row_AddAdmin.getCell(14).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="firstName" id="firstName">
		By firstNameProperty=By.id("firstName");
		WebElement firstName=driver.findElement(firstNameProperty);
		firstName.sendKeys(firstName_TestData);

		// MiddleName - Test Data
		String middleName_TestData=row_AddAdmin.getCell(15).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="middleName" id="middleName">
		By middleNameProperty=By.id("middleName");
		WebElement middleName=driver.findElement(middleNameProperty);
		middleName.sendKeys(middleName_TestData);

		// LastName - Test Data

		   String lastName_TestData=row_AddAdmin.getCell(16).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="lastName" id="lastName">
		By lastNameProperty=By.id("lastName");
		WebElement lastName=driver.findElement(lastNameProperty);
		lastName.sendKeys(lastName_TestData);

		 
		 
		  //********Enter AddName EmployeeId Automation      



		//<input class="formInputText valid" maxlength="10" type="text"
		//name="employeeId" value="0001" id="employeeId">
		     
		   By employeeIdProperty=By.id("employeeId");
		WebElement employeeId=driver.findElement(employeeIdProperty);
		String Id=employeeId.getAttribute("value");
		     
		System.out.println("the EmployId number is :-  "+Id);
		     
		Sheet.getRow(indexrow).createCell(17).setCellValue(Id);


		 //*************  Automation Save Button
		     
		    //<input type="button" class="" id="btnSave" value="Save">
		   
		    By saveProperty= By.id("btnSave");
		    WebElement  save= driver.findElement(saveProperty);
		    save.click();
		     

		//===================================================================================================================================================

		   

		//   *********** Expected Personal Details Text After Click on Save - Full Name (should be same)

		String Expect_PersonalDetailsPageText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_PersonalDetailsPageText);


		//<label for="Full_Name" class="hasTopFieldHelp">Full Name</label>
		By PersonalDetailsPage_FullNameProperty=By.className("hasTopFieldHelp");
		WebElement PersonalDetailsPage_FullName=driver.findElement(PersonalDetailsPage_FullNameProperty);

		String Actual_PersonalDetailsPageText=PersonalDetailsPage_FullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_PersonalDetailsPageText);

		if(Actual_PersonalDetailsPageText.equals(Expect_PersonalDetailsPageText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(indexrow).createCell(19).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(indexrow).createCell(19).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("FAIL");
		}


		System.out.println();
		//===================================================================================================================================================


		// --->>>>> This Names is Actual TestData in the Add Employee Page

		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving FirstName


		   
		//<input value="Madhu" type="text" name="personal[txtEmpFirstName]" class="block default editable" maxlength="30"
		//title="First Name" id="personal_txtEmpFirstName" disabled="disabled">
		 
		By afterSaveFirstNameProperty= By.id("personal_txtEmpFirstName");
		WebElement afterSaveFirstName = driver.findElement(afterSaveFirstNameProperty);
		String Actual_FirstName=afterSaveFirstName.getAttribute("value");
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving MiddleName
		 
		//<input value="Sai" type="text" name="personal[txtEmpMiddleName]" class="block default editable" maxlength="30"
		//title="Middle Name" id="personal_txtEmpMiddleName" disabled="disabled">
		     
		By afterSaveMiddleNameProperty= By.id("personal_txtEmpMiddleName");
		WebElement  afterSaveMiddleName= driver.findElement(afterSaveMiddleNameProperty);
		String Actual_MiddleName=afterSaveMiddleName.getAttribute("value");  
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving LastName
		 
		//<input value="Chandu" type="text" name="personal[txtEmpLastName]" class="block default editable" maxlength="30"
		//title="Last Name" id="personal_txtEmpLastName" disabled="disabled">
		   
		By afterSaveLastNameProperty=By.id("personal_txtEmpLastName");
		WebElement afterSaveLastName=driver.findElement(afterSaveLastNameProperty);
		String Actual_LastName=afterSaveLastName.getAttribute("value");
		 
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving EmployeeId
		 
		//<input value="0021" type="text" name="personal[txtEmployeeId]" maxlength="10" class="editable"
		//id="personal_txtEmployeeId" disabled="disabled">
		 
		   By afterSaveEmployeeIdPrperty=By.id("personal_txtEmployeeId");
		   WebElement afterSaveEmployeeId=driver.findElement(afterSaveEmployeeIdPrperty);
		String Actual_EmployeeId= afterSaveEmployeeId.getAttribute("value");
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  FristName  
		 
		if(Actual_FirstName.equals("Madhu"))
		{
		      System.out.println("After saving the FirstName are same :-  PASS");
		      Sheet.getRow(indexrow).createCell(21).setCellValue(Actual_FirstName);
		      Sheet.getRow(indexrow).createCell(22).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the FirstName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(21).setCellValue("NOT Match - "+Actual_FirstName);
		   Sheet.getRow(indexrow).createCell(22).setCellValue("FAIL");
		}
		 
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  MiddleName  

		if(Actual_MiddleName.equals("Sai"))
		{
		System.out.println("After saving the MiddleName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(23).setCellValue(Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the MiddleName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(23).setCellValue("NOT Match - "+Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  LastName  
		 
		if(Actual_LastName.equals("Chandu"))
		{
		System.out.println("After saving the LastName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(25).setCellValue(Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the LastName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(25).setCellValue("NOT Match - "+Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  EmployeeId
		 
		 
		if(Actual_EmployeeId.equals(Id))
		{
		System.out.println("After saving the EmployeeId are same :-  PASS");
		Sheet.getRow(indexrow).createCell(27).setCellValue(Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("PASS");
		   
		   
		}
		else
		{
		System.out.println("After saving the EmployeeId are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(27).setCellValue("NOT Match - "+Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("FAIL");

		}


		//...............................................................................................



		 
		//*************  Automation  Welcome Admin Button
		   
		//<a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>
		     

		welcomeAdminProperty=By.linkText("Welcome Admin");
		welcome=driver.findElement(welcomeAdminProperty);

		welcome.click();
		     
		Thread.sleep(5000);
		     
		//*************  Automation  Welcome Admin Button  
		     
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/auth/logout">Logout</a>
		     
		By logOutProperty= By.linkText("Logout");
		WebElement logOut=driver.findElement(logOutProperty);
		logOut.click();
		     


		//===================================================================================================================================================


		//Expected Text - LOGIN Panel (should be same)

		//<div id="logInPanelHeading">LOGIN Panel</div>

		expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		  // of the current webpage - identifying the LOGIN Panel



		OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(indexrow).createCell(30).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(indexrow).createCell(30).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("FAIL");
		}






./src/testDataResult/AddEmployee.xlsx
		FileOutputStream Madhu=new FileOutputStream("/AddEmployee.xlsx");
		                 
		       workbook.write(Madhu);

		System.out.println();


		driver.get(addEmployeeUrlAddress);





		// UserName - Test Data

		row=Sheet.getRow(1);

		userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		   userNameProperty=By.id("txtUsername");
		userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		passwordProperty=By.name("txtPassword");
		password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		logInProperty=By.className("button");
		logIn=driver.findElement(logInProperty);
		logIn.click();




		}

		



}













}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-16 20:06:19.321
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-16 20:06:19.322
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-16 20:06:22.025
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.OrangeHrmApplication;

import org.testng.annotations.Test;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;


public class OrangeHrmEmpolyleListadded extends BaseTest{

	@Test 
	public void Webpage() throws IOException, InterruptedException {
		FileInputStream file=new FileInputStream("./src/main/java/testDataFiles/AddEmployee.xlsx");

		XSSFWorkbook workbook=new XSSFWorkbook(file);

		XSSFSheet Sheet=workbook.getSheet("TestData");

		int row_count=Sheet.getLastRowNum();

		System.out.println("The number of row in the Sheet is :-  "+row_count);

		int rowOfCells_Count=Sheet.getLeftCol();

		System.out.println("The number of roeOfCells in the sheet is :-  "+rowOfCells_Count);

		//===================================================================================================================================================


		//<div id="logInPanelHeading">LOGIN Panel</div>

		String expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		// of the current webpage - identifying the LOGIN Panel



		By OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		WebElement OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		String actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(1).createCell(1).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(1).createCell(1).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("FAIL");
		}

		//===================================================================================================================================================

		//Expect Title is - OrangeHRM  (should be same)

		String Expected_orangeHrmLogInPage="OrangeHRM";
		System.out.println("The OrangeHRM logIn Page title is :-  "+Expected_orangeHrmLogInPage);


		String Actual_orangenHrmLogInPageText=driver.getTitle();
		System.out.println("The OrangenHrm LogIn Page Title is :-  "+Actual_orangenHrmLogInPageText);


		if(Actual_orangenHrmLogInPageText.equals(Expected_orangeHrmLogInPage))
		{
		System.out.println("The LogIn Page Title is Match :- PASS");
		Sheet.getRow(1).createCell(4).setCellValue(Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("PASS");
		}
		else {
		System.out.println("The LogIn Page Title is NOT Match :- FAIL");
		Sheet.getRow(1).createCell(4).setCellValue("NOT Match - "+Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("FAIL");
		}


		//===================================================================================================================================================


		// UserName - Test Data

		XSSFRow row=Sheet.getRow(1);

		String userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		By userNameProperty=By.id("txtUsername");
		WebElement userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		String password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		By passwordProperty=By.name("txtPassword");
		WebElement password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		By logInProperty=By.className("button");
		WebElement logIn=driver.findElement(logInProperty);
		logIn.click();


		//===================================================================================================================================================


		 //   *********** Expected Text - Welcome (should have)

		// ---->>>>>>>>>>>>>> Performing click on the Welcome WebElement
		         
		         
		// <a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>

		String Expect_WebpageText= "Admin";
		System.out.println("The Expected OrangeHrm Home page text is Welcome  :-  "+Expect_WebpageText);


		By welcomeAdminProperty=By.linkText("Welcome Admin");
		WebElement welcome=driver.findElement(welcomeAdminProperty);


		//String actual_welcomeHrefAttributeValue=welcome.getAttribute("id");

		            //OR

		String actual_welcomeHrefAttributeValue=welcome.getText();
		System.out.println("The href Attribute value of welcome webElement is :- "+actual_welcomeHrefAttributeValue);


		//if(actual_welcomeHrefAttributeValue.equals(Expect_WebpageText))

		                 //OR

		if(actual_welcomeHrefAttributeValue.contains(Expect_WebpageText))
		{
		System.out.println("The text is Match :- PASS");
		Sheet.getRow(1).createCell(9).setCellValue(actual_welcomeHrefAttributeValue);
		Sheet.getRow(1).createCell(10).setCellValue("PASS ");
		}
		else {
		System.out.println("The text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(9).setCellValue("Not Match the title Welcome");
		Sheet.getRow(1).createCell(10).setCellValue("Not Match the webpage FAIL");
		}



		//===================================================================================================================================================


		 
		//************Automation  Header link PIM  Button

		   //<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/viewPimModule"
		//id="menu_pim_viewPimModule" class="firstLevelMenu"><b>PIM</b></a>

		By PIMButtonProperty= By.linkText("PIM");
		WebElement PIMElement= driver.findElement(PIMButtonProperty);
		       
		Actions mouseHoverOperation=new Actions(driver);
		mouseHoverOperation.moveToElement(PIMElement).build().perform();

		//************Automation  Header link Add Employee  Button
		       
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee"
		   //id="menu_pim_addEmployee">Add Employee</a>

		By AddEmployeeProperty=By.linkText("Add Employee");
		WebElement AddEmployee=driver.findElement(AddEmployeeProperty);
		AddEmployee.click();



		//===================================================================================================================================================



		//   *********** Expected AddEmployeeText - Full Name (should be same)

		String Expect_AddAdminText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_AddAdminText);

		//<label class="hasTopFieldHelp">Full Name</label>
		By fullNameProperty=By.className("hasTopFieldHelp");
		WebElement fullName=driver.findElement(fullNameProperty);

		String Actual_AddEmployeeText=fullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_AddEmployeeText);

		if(Actual_AddEmployeeText.equals(Expect_AddAdminText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(1).createCell(12).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(12).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("FAIL");
		}



		//===================================================================================================================================================
		String addEmployeeUrlAddress="http://127.0.0.1/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee";

		for(int indexrow=1; indexrow<=Sheet.getLastRowNum(); indexrow++) {



		XSSFRow row_AddAdmin=Sheet.getRow(indexrow);

		// --->>>>> This Names is Expected TestData in the Excel Sheet

		            // FirstName - Test Data

		String firstName_TestData=row_AddAdmin.getCell(14).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="firstName" id="firstName">
		By firstNameProperty=By.id("firstName");
		WebElement firstName=driver.findElement(firstNameProperty);
		firstName.sendKeys(firstName_TestData);

		// MiddleName - Test Data
		String middleName_TestData=row_AddAdmin.getCell(15).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="middleName" id="middleName">
		By middleNameProperty=By.id("middleName");
		WebElement middleName=driver.findElement(middleNameProperty);
		middleName.sendKeys(middleName_TestData);

		// LastName - Test Data

		   String lastName_TestData=row_AddAdmin.getCell(16).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="lastName" id="lastName">
		By lastNameProperty=By.id("lastName");
		WebElement lastName=driver.findElement(lastNameProperty);
		lastName.sendKeys(lastName_TestData);

		 
		 
		  //********Enter AddName EmployeeId Automation      



		//<input class="formInputText valid" maxlength="10" type="text"
		//name="employeeId" value="0001" id="employeeId">
		     
		   By employeeIdProperty=By.id("employeeId");
		WebElement employeeId=driver.findElement(employeeIdProperty);
		String Id=employeeId.getAttribute("value");
		     
		System.out.println("the EmployId number is :-  "+Id);
		     
		Sheet.getRow(indexrow).createCell(17).setCellValue(Id);


		 //*************  Automation Save Button
		     
		    //<input type="button" class="" id="btnSave" value="Save">
		   
		    By saveProperty= By.id("btnSave");
		    WebElement  save= driver.findElement(saveProperty);
		    save.click();
		     

		//===================================================================================================================================================

		   

		//   *********** Expected Personal Details Text After Click on Save - Full Name (should be same)

		String Expect_PersonalDetailsPageText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_PersonalDetailsPageText);


		//<label for="Full_Name" class="hasTopFieldHelp">Full Name</label>
		By PersonalDetailsPage_FullNameProperty=By.className("hasTopFieldHelp");
		WebElement PersonalDetailsPage_FullName=driver.findElement(PersonalDetailsPage_FullNameProperty);

		String Actual_PersonalDetailsPageText=PersonalDetailsPage_FullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_PersonalDetailsPageText);

		if(Actual_PersonalDetailsPageText.equals(Expect_PersonalDetailsPageText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(indexrow).createCell(19).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(indexrow).createCell(19).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("FAIL");
		}


		System.out.println();
		//===================================================================================================================================================


		// --->>>>> This Names is Actual TestData in the Add Employee Page

		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving FirstName


		   
		//<input value="Madhu" type="text" name="personal[txtEmpFirstName]" class="block default editable" maxlength="30"
		//title="First Name" id="personal_txtEmpFirstName" disabled="disabled">
		 
		By afterSaveFirstNameProperty= By.id("personal_txtEmpFirstName");
		WebElement afterSaveFirstName = driver.findElement(afterSaveFirstNameProperty);
		String Actual_FirstName=afterSaveFirstName.getAttribute("value");
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving MiddleName
		 
		//<input value="Sai" type="text" name="personal[txtEmpMiddleName]" class="block default editable" maxlength="30"
		//title="Middle Name" id="personal_txtEmpMiddleName" disabled="disabled">
		     
		By afterSaveMiddleNameProperty= By.id("personal_txtEmpMiddleName");
		WebElement  afterSaveMiddleName= driver.findElement(afterSaveMiddleNameProperty);
		String Actual_MiddleName=afterSaveMiddleName.getAttribute("value");  
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving LastName
		 
		//<input value="Chandu" type="text" name="personal[txtEmpLastName]" class="block default editable" maxlength="30"
		//title="Last Name" id="personal_txtEmpLastName" disabled="disabled">
		   
		By afterSaveLastNameProperty=By.id("personal_txtEmpLastName");
		WebElement afterSaveLastName=driver.findElement(afterSaveLastNameProperty);
		String Actual_LastName=afterSaveLastName.getAttribute("value");
		 
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving EmployeeId
		 
		//<input value="0021" type="text" name="personal[txtEmployeeId]" maxlength="10" class="editable"
		//id="personal_txtEmployeeId" disabled="disabled">
		 
		   By afterSaveEmployeeIdPrperty=By.id("personal_txtEmployeeId");
		   WebElement afterSaveEmployeeId=driver.findElement(afterSaveEmployeeIdPrperty);
		String Actual_EmployeeId= afterSaveEmployeeId.getAttribute("value");
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  FristName  
		 
		if(Actual_FirstName.equals("Madhu"))
		{
		      System.out.println("After saving the FirstName are same :-  PASS");
		      Sheet.getRow(indexrow).createCell(21).setCellValue(Actual_FirstName);
		      Sheet.getRow(indexrow).createCell(22).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the FirstName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(21).setCellValue("NOT Match - "+Actual_FirstName);
		   Sheet.getRow(indexrow).createCell(22).setCellValue("FAIL");
		}
		 
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  MiddleName  

		if(Actual_MiddleName.equals("Sai"))
		{
		System.out.println("After saving the MiddleName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(23).setCellValue(Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the MiddleName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(23).setCellValue("NOT Match - "+Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  LastName  
		 
		if(Actual_LastName.equals("Chandu"))
		{
		System.out.println("After saving the LastName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(25).setCellValue(Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the LastName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(25).setCellValue("NOT Match - "+Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  EmployeeId
		 
		 
		if(Actual_EmployeeId.equals(Id))
		{
		System.out.println("After saving the EmployeeId are same :-  PASS");
		Sheet.getRow(indexrow).createCell(27).setCellValue(Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("PASS");
		   
		   
		}
		else
		{
		System.out.println("After saving the EmployeeId are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(27).setCellValue("NOT Match - "+Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("FAIL");

		}


		//...............................................................................................



		 
		//*************  Automation  Welcome Admin Button
		   
		//<a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>
		     

		welcomeAdminProperty=By.linkText("Welcome Admin");
		welcome=driver.findElement(welcomeAdminProperty);

		welcome.click();
		     
		Thread.sleep(5000);
		     
		//*************  Automation  Welcome Admin Button  
		     
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/auth/logout">Logout</a>
		     
		By logOutProperty= By.linkText("Logout");
		WebElement logOut=driver.findElement(logOutProperty);
		logOut.click();
		     


		//===================================================================================================================================================


		//Expected Text - LOGIN Panel (should be same)

		//<div id="logInPanelHeading">LOGIN Panel</div>

		expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		  // of the current webpage - identifying the LOGIN Panel



		OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(indexrow).createCell(30).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(indexrow).createCell(30).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("FAIL");
		}






./src/testDataResult/AddEmployee.xlsx
		FileOutputStream Madhu=new FileOutputStream("/AddEmployee.xlsx");
		                 
		       workbook.write(Madhu);

		System.out.println();


		driver.get(addEmployeeUrlAddress);





		// UserName - Test Data

		row=Sheet.getRow(1);

		userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		   userNameProperty=By.id("txtUsername");
		userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		passwordProperty=By.name("txtPassword");
		password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		logInProperty=By.className("button");
		logIn=driver.findElement(logInProperty);
		logIn.click();




		}

		



}













}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-16 20:06:22.026
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-16 20:06:22.028
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-16 20:06:23.268
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.OrangeHrmApplication;

import org.testng.annotations.Test;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;


public class OrangeHrmEmpolyleListadded extends BaseTest{

	@Test 
	public void Webpage() throws IOException, InterruptedException {
		FileInputStream file=new FileInputStream("./src/main/java/testDataFiles/AddEmployee.xlsx");

		XSSFWorkbook workbook=new XSSFWorkbook(file);

		XSSFSheet Sheet=workbook.getSheet("TestData");

		int row_count=Sheet.getLastRowNum();

		System.out.println("The number of row in the Sheet is :-  "+row_count);

		int rowOfCells_Count=Sheet.getLeftCol();

		System.out.println("The number of roeOfCells in the sheet is :-  "+rowOfCells_Count);

		//===================================================================================================================================================


		//<div id="logInPanelHeading">LOGIN Panel</div>

		String expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		// of the current webpage - identifying the LOGIN Panel



		By OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		WebElement OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		String actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(1).createCell(1).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(1).createCell(1).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("FAIL");
		}

		//===================================================================================================================================================

		//Expect Title is - OrangeHRM  (should be same)

		String Expected_orangeHrmLogInPage="OrangeHRM";
		System.out.println("The OrangeHRM logIn Page title is :-  "+Expected_orangeHrmLogInPage);


		String Actual_orangenHrmLogInPageText=driver.getTitle();
		System.out.println("The OrangenHrm LogIn Page Title is :-  "+Actual_orangenHrmLogInPageText);


		if(Actual_orangenHrmLogInPageText.equals(Expected_orangeHrmLogInPage))
		{
		System.out.println("The LogIn Page Title is Match :- PASS");
		Sheet.getRow(1).createCell(4).setCellValue(Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("PASS");
		}
		else {
		System.out.println("The LogIn Page Title is NOT Match :- FAIL");
		Sheet.getRow(1).createCell(4).setCellValue("NOT Match - "+Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("FAIL");
		}


		//===================================================================================================================================================


		// UserName - Test Data

		XSSFRow row=Sheet.getRow(1);

		String userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		By userNameProperty=By.id("txtUsername");
		WebElement userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		String password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		By passwordProperty=By.name("txtPassword");
		WebElement password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		By logInProperty=By.className("button");
		WebElement logIn=driver.findElement(logInProperty);
		logIn.click();


		//===================================================================================================================================================


		 //   *********** Expected Text - Welcome (should have)

		// ---->>>>>>>>>>>>>> Performing click on the Welcome WebElement
		         
		         
		// <a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>

		String Expect_WebpageText= "Admin";
		System.out.println("The Expected OrangeHrm Home page text is Welcome  :-  "+Expect_WebpageText);


		By welcomeAdminProperty=By.linkText("Welcome Admin");
		WebElement welcome=driver.findElement(welcomeAdminProperty);


		//String actual_welcomeHrefAttributeValue=welcome.getAttribute("id");

		            //OR

		String actual_welcomeHrefAttributeValue=welcome.getText();
		System.out.println("The href Attribute value of welcome webElement is :- "+actual_welcomeHrefAttributeValue);


		//if(actual_welcomeHrefAttributeValue.equals(Expect_WebpageText))

		                 //OR

		if(actual_welcomeHrefAttributeValue.contains(Expect_WebpageText))
		{
		System.out.println("The text is Match :- PASS");
		Sheet.getRow(1).createCell(9).setCellValue(actual_welcomeHrefAttributeValue);
		Sheet.getRow(1).createCell(10).setCellValue("PASS ");
		}
		else {
		System.out.println("The text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(9).setCellValue("Not Match the title Welcome");
		Sheet.getRow(1).createCell(10).setCellValue("Not Match the webpage FAIL");
		}



		//===================================================================================================================================================


		 
		//************Automation  Header link PIM  Button

		   //<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/viewPimModule"
		//id="menu_pim_viewPimModule" class="firstLevelMenu"><b>PIM</b></a>

		By PIMButtonProperty= By.linkText("PIM");
		WebElement PIMElement= driver.findElement(PIMButtonProperty);
		       
		Actions mouseHoverOperation=new Actions(driver);
		mouseHoverOperation.moveToElement(PIMElement).build().perform();

		//************Automation  Header link Add Employee  Button
		       
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee"
		   //id="menu_pim_addEmployee">Add Employee</a>

		By AddEmployeeProperty=By.linkText("Add Employee");
		WebElement AddEmployee=driver.findElement(AddEmployeeProperty);
		AddEmployee.click();



		//===================================================================================================================================================



		//   *********** Expected AddEmployeeText - Full Name (should be same)

		String Expect_AddAdminText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_AddAdminText);

		//<label class="hasTopFieldHelp">Full Name</label>
		By fullNameProperty=By.className("hasTopFieldHelp");
		WebElement fullName=driver.findElement(fullNameProperty);

		String Actual_AddEmployeeText=fullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_AddEmployeeText);

		if(Actual_AddEmployeeText.equals(Expect_AddAdminText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(1).createCell(12).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(12).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("FAIL");
		}



		//===================================================================================================================================================
		String addEmployeeUrlAddress="http://127.0.0.1/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee";

		for(int indexrow=1; indexrow<=Sheet.getLastRowNum(); indexrow++) {



		XSSFRow row_AddAdmin=Sheet.getRow(indexrow);

		// --->>>>> This Names is Expected TestData in the Excel Sheet

		            // FirstName - Test Data

		String firstName_TestData=row_AddAdmin.getCell(14).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="firstName" id="firstName">
		By firstNameProperty=By.id("firstName");
		WebElement firstName=driver.findElement(firstNameProperty);
		firstName.sendKeys(firstName_TestData);

		// MiddleName - Test Data
		String middleName_TestData=row_AddAdmin.getCell(15).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="middleName" id="middleName">
		By middleNameProperty=By.id("middleName");
		WebElement middleName=driver.findElement(middleNameProperty);
		middleName.sendKeys(middleName_TestData);

		// LastName - Test Data

		   String lastName_TestData=row_AddAdmin.getCell(16).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="lastName" id="lastName">
		By lastNameProperty=By.id("lastName");
		WebElement lastName=driver.findElement(lastNameProperty);
		lastName.sendKeys(lastName_TestData);

		 
		 
		  //********Enter AddName EmployeeId Automation      



		//<input class="formInputText valid" maxlength="10" type="text"
		//name="employeeId" value="0001" id="employeeId">
		     
		   By employeeIdProperty=By.id("employeeId");
		WebElement employeeId=driver.findElement(employeeIdProperty);
		String Id=employeeId.getAttribute("value");
		     
		System.out.println("the EmployId number is :-  "+Id);
		     
		Sheet.getRow(indexrow).createCell(17).setCellValue(Id);


		 //*************  Automation Save Button
		     
		    //<input type="button" class="" id="btnSave" value="Save">
		   
		    By saveProperty= By.id("btnSave");
		    WebElement  save= driver.findElement(saveProperty);
		    save.click();
		     

		//===================================================================================================================================================

		   

		//   *********** Expected Personal Details Text After Click on Save - Full Name (should be same)

		String Expect_PersonalDetailsPageText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_PersonalDetailsPageText);


		//<label for="Full_Name" class="hasTopFieldHelp">Full Name</label>
		By PersonalDetailsPage_FullNameProperty=By.className("hasTopFieldHelp");
		WebElement PersonalDetailsPage_FullName=driver.findElement(PersonalDetailsPage_FullNameProperty);

		String Actual_PersonalDetailsPageText=PersonalDetailsPage_FullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_PersonalDetailsPageText);

		if(Actual_PersonalDetailsPageText.equals(Expect_PersonalDetailsPageText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(indexrow).createCell(19).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(indexrow).createCell(19).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("FAIL");
		}


		System.out.println();
		//===================================================================================================================================================


		// --->>>>> This Names is Actual TestData in the Add Employee Page

		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving FirstName


		   
		//<input value="Madhu" type="text" name="personal[txtEmpFirstName]" class="block default editable" maxlength="30"
		//title="First Name" id="personal_txtEmpFirstName" disabled="disabled">
		 
		By afterSaveFirstNameProperty= By.id("personal_txtEmpFirstName");
		WebElement afterSaveFirstName = driver.findElement(afterSaveFirstNameProperty);
		String Actual_FirstName=afterSaveFirstName.getAttribute("value");
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving MiddleName
		 
		//<input value="Sai" type="text" name="personal[txtEmpMiddleName]" class="block default editable" maxlength="30"
		//title="Middle Name" id="personal_txtEmpMiddleName" disabled="disabled">
		     
		By afterSaveMiddleNameProperty= By.id("personal_txtEmpMiddleName");
		WebElement  afterSaveMiddleName= driver.findElement(afterSaveMiddleNameProperty);
		String Actual_MiddleName=afterSaveMiddleName.getAttribute("value");  
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving LastName
		 
		//<input value="Chandu" type="text" name="personal[txtEmpLastName]" class="block default editable" maxlength="30"
		//title="Last Name" id="personal_txtEmpLastName" disabled="disabled">
		   
		By afterSaveLastNameProperty=By.id("personal_txtEmpLastName");
		WebElement afterSaveLastName=driver.findElement(afterSaveLastNameProperty);
		String Actual_LastName=afterSaveLastName.getAttribute("value");
		 
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving EmployeeId
		 
		//<input value="0021" type="text" name="personal[txtEmployeeId]" maxlength="10" class="editable"
		//id="personal_txtEmployeeId" disabled="disabled">
		 
		   By afterSaveEmployeeIdPrperty=By.id("personal_txtEmployeeId");
		   WebElement afterSaveEmployeeId=driver.findElement(afterSaveEmployeeIdPrperty);
		String Actual_EmployeeId= afterSaveEmployeeId.getAttribute("value");
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  FristName  
		 
		if(Actual_FirstName.equals("Madhu"))
		{
		      System.out.println("After saving the FirstName are same :-  PASS");
		      Sheet.getRow(indexrow).createCell(21).setCellValue(Actual_FirstName);
		      Sheet.getRow(indexrow).createCell(22).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the FirstName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(21).setCellValue("NOT Match - "+Actual_FirstName);
		   Sheet.getRow(indexrow).createCell(22).setCellValue("FAIL");
		}
		 
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  MiddleName  

		if(Actual_MiddleName.equals("Sai"))
		{
		System.out.println("After saving the MiddleName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(23).setCellValue(Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the MiddleName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(23).setCellValue("NOT Match - "+Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  LastName  
		 
		if(Actual_LastName.equals("Chandu"))
		{
		System.out.println("After saving the LastName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(25).setCellValue(Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the LastName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(25).setCellValue("NOT Match - "+Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  EmployeeId
		 
		 
		if(Actual_EmployeeId.equals(Id))
		{
		System.out.println("After saving the EmployeeId are same :-  PASS");
		Sheet.getRow(indexrow).createCell(27).setCellValue(Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("PASS");
		   
		   
		}
		else
		{
		System.out.println("After saving the EmployeeId are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(27).setCellValue("NOT Match - "+Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("FAIL");

		}


		//...............................................................................................



		 
		//*************  Automation  Welcome Admin Button
		   
		//<a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>
		     

		welcomeAdminProperty=By.linkText("Welcome Admin");
		welcome=driver.findElement(welcomeAdminProperty);

		welcome.click();
		     
		Thread.sleep(5000);
		     
		//*************  Automation  Welcome Admin Button  
		     
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/auth/logout">Logout</a>
		     
		By logOutProperty= By.linkText("Logout");
		WebElement logOut=driver.findElement(logOutProperty);
		logOut.click();
		     


		//===================================================================================================================================================


		//Expected Text - LOGIN Panel (should be same)

		//<div id="logInPanelHeading">LOGIN Panel</div>

		expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		  // of the current webpage - identifying the LOGIN Panel



		OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(indexrow).createCell(30).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(indexrow).createCell(30).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("FAIL");
		}






./src/testDataResult/AddEmployee.xlsx
		FileOutputStream Madhu=new FileOutputStream("/src/main/java/testDataResult/AddEmployee.xlsx");
		                 
		       workbook.write(Madhu);

		System.out.println();


		driver.get(addEmployeeUrlAddress);





		// UserName - Test Data

		row=Sheet.getRow(1);

		userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		   userNameProperty=By.id("txtUsername");
		userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		passwordProperty=By.name("txtPassword");
		password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		logInProperty=By.className("button");
		logIn=driver.findElement(logInProperty);
		logIn.click();




		}

		



}













}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-16 20:06:23.269
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-16 20:06:23.270
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-16 20:06:23.284
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.OrangeHrmApplication;

import org.testng.annotations.Test;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;


public class OrangeHrmEmpolyleListadded extends BaseTest{

	@Test 
	public void Webpage() throws IOException, InterruptedException {
		FileInputStream file=new FileInputStream("./src/main/java/testDataFiles/AddEmployee.xlsx");

		XSSFWorkbook workbook=new XSSFWorkbook(file);

		XSSFSheet Sheet=workbook.getSheet("TestData");

		int row_count=Sheet.getLastRowNum();

		System.out.println("The number of row in the Sheet is :-  "+row_count);

		int rowOfCells_Count=Sheet.getLeftCol();

		System.out.println("The number of roeOfCells in the sheet is :-  "+rowOfCells_Count);

		//===================================================================================================================================================


		//<div id="logInPanelHeading">LOGIN Panel</div>

		String expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		// of the current webpage - identifying the LOGIN Panel



		By OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		WebElement OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		String actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(1).createCell(1).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(1).createCell(1).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("FAIL");
		}

		//===================================================================================================================================================

		//Expect Title is - OrangeHRM  (should be same)

		String Expected_orangeHrmLogInPage="OrangeHRM";
		System.out.println("The OrangeHRM logIn Page title is :-  "+Expected_orangeHrmLogInPage);


		String Actual_orangenHrmLogInPageText=driver.getTitle();
		System.out.println("The OrangenHrm LogIn Page Title is :-  "+Actual_orangenHrmLogInPageText);


		if(Actual_orangenHrmLogInPageText.equals(Expected_orangeHrmLogInPage))
		{
		System.out.println("The LogIn Page Title is Match :- PASS");
		Sheet.getRow(1).createCell(4).setCellValue(Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("PASS");
		}
		else {
		System.out.println("The LogIn Page Title is NOT Match :- FAIL");
		Sheet.getRow(1).createCell(4).setCellValue("NOT Match - "+Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("FAIL");
		}


		//===================================================================================================================================================


		// UserName - Test Data

		XSSFRow row=Sheet.getRow(1);

		String userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		By userNameProperty=By.id("txtUsername");
		WebElement userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		String password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		By passwordProperty=By.name("txtPassword");
		WebElement password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		By logInProperty=By.className("button");
		WebElement logIn=driver.findElement(logInProperty);
		logIn.click();


		//===================================================================================================================================================


		 //   *********** Expected Text - Welcome (should have)

		// ---->>>>>>>>>>>>>> Performing click on the Welcome WebElement
		         
		         
		// <a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>

		String Expect_WebpageText= "Admin";
		System.out.println("The Expected OrangeHrm Home page text is Welcome  :-  "+Expect_WebpageText);


		By welcomeAdminProperty=By.linkText("Welcome Admin");
		WebElement welcome=driver.findElement(welcomeAdminProperty);


		//String actual_welcomeHrefAttributeValue=welcome.getAttribute("id");

		            //OR

		String actual_welcomeHrefAttributeValue=welcome.getText();
		System.out.println("The href Attribute value of welcome webElement is :- "+actual_welcomeHrefAttributeValue);


		//if(actual_welcomeHrefAttributeValue.equals(Expect_WebpageText))

		                 //OR

		if(actual_welcomeHrefAttributeValue.contains(Expect_WebpageText))
		{
		System.out.println("The text is Match :- PASS");
		Sheet.getRow(1).createCell(9).setCellValue(actual_welcomeHrefAttributeValue);
		Sheet.getRow(1).createCell(10).setCellValue("PASS ");
		}
		else {
		System.out.println("The text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(9).setCellValue("Not Match the title Welcome");
		Sheet.getRow(1).createCell(10).setCellValue("Not Match the webpage FAIL");
		}



		//===================================================================================================================================================


		 
		//************Automation  Header link PIM  Button

		   //<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/viewPimModule"
		//id="menu_pim_viewPimModule" class="firstLevelMenu"><b>PIM</b></a>

		By PIMButtonProperty= By.linkText("PIM");
		WebElement PIMElement= driver.findElement(PIMButtonProperty);
		       
		Actions mouseHoverOperation=new Actions(driver);
		mouseHoverOperation.moveToElement(PIMElement).build().perform();

		//************Automation  Header link Add Employee  Button
		       
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee"
		   //id="menu_pim_addEmployee">Add Employee</a>

		By AddEmployeeProperty=By.linkText("Add Employee");
		WebElement AddEmployee=driver.findElement(AddEmployeeProperty);
		AddEmployee.click();



		//===================================================================================================================================================



		//   *********** Expected AddEmployeeText - Full Name (should be same)

		String Expect_AddAdminText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_AddAdminText);

		//<label class="hasTopFieldHelp">Full Name</label>
		By fullNameProperty=By.className("hasTopFieldHelp");
		WebElement fullName=driver.findElement(fullNameProperty);

		String Actual_AddEmployeeText=fullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_AddEmployeeText);

		if(Actual_AddEmployeeText.equals(Expect_AddAdminText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(1).createCell(12).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(12).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("FAIL");
		}



		//===================================================================================================================================================
		String addEmployeeUrlAddress="http://127.0.0.1/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee";

		for(int indexrow=1; indexrow<=Sheet.getLastRowNum(); indexrow++) {



		XSSFRow row_AddAdmin=Sheet.getRow(indexrow);

		// --->>>>> This Names is Expected TestData in the Excel Sheet

		            // FirstName - Test Data

		String firstName_TestData=row_AddAdmin.getCell(14).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="firstName" id="firstName">
		By firstNameProperty=By.id("firstName");
		WebElement firstName=driver.findElement(firstNameProperty);
		firstName.sendKeys(firstName_TestData);

		// MiddleName - Test Data
		String middleName_TestData=row_AddAdmin.getCell(15).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="middleName" id="middleName">
		By middleNameProperty=By.id("middleName");
		WebElement middleName=driver.findElement(middleNameProperty);
		middleName.sendKeys(middleName_TestData);

		// LastName - Test Data

		   String lastName_TestData=row_AddAdmin.getCell(16).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="lastName" id="lastName">
		By lastNameProperty=By.id("lastName");
		WebElement lastName=driver.findElement(lastNameProperty);
		lastName.sendKeys(lastName_TestData);

		 
		 
		  //********Enter AddName EmployeeId Automation      



		//<input class="formInputText valid" maxlength="10" type="text"
		//name="employeeId" value="0001" id="employeeId">
		     
		   By employeeIdProperty=By.id("employeeId");
		WebElement employeeId=driver.findElement(employeeIdProperty);
		String Id=employeeId.getAttribute("value");
		     
		System.out.println("the EmployId number is :-  "+Id);
		     
		Sheet.getRow(indexrow).createCell(17).setCellValue(Id);


		 //*************  Automation Save Button
		     
		    //<input type="button" class="" id="btnSave" value="Save">
		   
		    By saveProperty= By.id("btnSave");
		    WebElement  save= driver.findElement(saveProperty);
		    save.click();
		     

		//===================================================================================================================================================

		   

		//   *********** Expected Personal Details Text After Click on Save - Full Name (should be same)

		String Expect_PersonalDetailsPageText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_PersonalDetailsPageText);


		//<label for="Full_Name" class="hasTopFieldHelp">Full Name</label>
		By PersonalDetailsPage_FullNameProperty=By.className("hasTopFieldHelp");
		WebElement PersonalDetailsPage_FullName=driver.findElement(PersonalDetailsPage_FullNameProperty);

		String Actual_PersonalDetailsPageText=PersonalDetailsPage_FullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_PersonalDetailsPageText);

		if(Actual_PersonalDetailsPageText.equals(Expect_PersonalDetailsPageText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(indexrow).createCell(19).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(indexrow).createCell(19).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("FAIL");
		}


		System.out.println();
		//===================================================================================================================================================


		// --->>>>> This Names is Actual TestData in the Add Employee Page

		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving FirstName


		   
		//<input value="Madhu" type="text" name="personal[txtEmpFirstName]" class="block default editable" maxlength="30"
		//title="First Name" id="personal_txtEmpFirstName" disabled="disabled">
		 
		By afterSaveFirstNameProperty= By.id("personal_txtEmpFirstName");
		WebElement afterSaveFirstName = driver.findElement(afterSaveFirstNameProperty);
		String Actual_FirstName=afterSaveFirstName.getAttribute("value");
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving MiddleName
		 
		//<input value="Sai" type="text" name="personal[txtEmpMiddleName]" class="block default editable" maxlength="30"
		//title="Middle Name" id="personal_txtEmpMiddleName" disabled="disabled">
		     
		By afterSaveMiddleNameProperty= By.id("personal_txtEmpMiddleName");
		WebElement  afterSaveMiddleName= driver.findElement(afterSaveMiddleNameProperty);
		String Actual_MiddleName=afterSaveMiddleName.getAttribute("value");  
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving LastName
		 
		//<input value="Chandu" type="text" name="personal[txtEmpLastName]" class="block default editable" maxlength="30"
		//title="Last Name" id="personal_txtEmpLastName" disabled="disabled">
		   
		By afterSaveLastNameProperty=By.id("personal_txtEmpLastName");
		WebElement afterSaveLastName=driver.findElement(afterSaveLastNameProperty);
		String Actual_LastName=afterSaveLastName.getAttribute("value");
		 
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving EmployeeId
		 
		//<input value="0021" type="text" name="personal[txtEmployeeId]" maxlength="10" class="editable"
		//id="personal_txtEmployeeId" disabled="disabled">
		 
		   By afterSaveEmployeeIdPrperty=By.id("personal_txtEmployeeId");
		   WebElement afterSaveEmployeeId=driver.findElement(afterSaveEmployeeIdPrperty);
		String Actual_EmployeeId= afterSaveEmployeeId.getAttribute("value");
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  FristName  
		 
		if(Actual_FirstName.equals("Madhu"))
		{
		      System.out.println("After saving the FirstName are same :-  PASS");
		      Sheet.getRow(indexrow).createCell(21).setCellValue(Actual_FirstName);
		      Sheet.getRow(indexrow).createCell(22).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the FirstName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(21).setCellValue("NOT Match - "+Actual_FirstName);
		   Sheet.getRow(indexrow).createCell(22).setCellValue("FAIL");
		}
		 
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  MiddleName  

		if(Actual_MiddleName.equals("Sai"))
		{
		System.out.println("After saving the MiddleName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(23).setCellValue(Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the MiddleName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(23).setCellValue("NOT Match - "+Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  LastName  
		 
		if(Actual_LastName.equals("Chandu"))
		{
		System.out.println("After saving the LastName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(25).setCellValue(Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the LastName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(25).setCellValue("NOT Match - "+Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  EmployeeId
		 
		 
		if(Actual_EmployeeId.equals(Id))
		{
		System.out.println("After saving the EmployeeId are same :-  PASS");
		Sheet.getRow(indexrow).createCell(27).setCellValue(Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("PASS");
		   
		   
		}
		else
		{
		System.out.println("After saving the EmployeeId are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(27).setCellValue("NOT Match - "+Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("FAIL");

		}


		//...............................................................................................



		 
		//*************  Automation  Welcome Admin Button
		   
		//<a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>
		     

		welcomeAdminProperty=By.linkText("Welcome Admin");
		welcome=driver.findElement(welcomeAdminProperty);

		welcome.click();
		     
		Thread.sleep(5000);
		     
		//*************  Automation  Welcome Admin Button  
		     
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/auth/logout">Logout</a>
		     
		By logOutProperty= By.linkText("Logout");
		WebElement logOut=driver.findElement(logOutProperty);
		logOut.click();
		     


		//===================================================================================================================================================


		//Expected Text - LOGIN Panel (should be same)

		//<div id="logInPanelHeading">LOGIN Panel</div>

		expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		  // of the current webpage - identifying the LOGIN Panel



		OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(indexrow).createCell(30).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(indexrow).createCell(30).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("FAIL");
		}






./src/testDataResult/AddEmployee.xlsx
		FileOutputStream Madhu=new FileOutputStream("/src/main/java/testDataResult/AddEmployee.xlsx");
		                 
		       workbook.write(Madhu);

		System.out.println();


		driver.get(addEmployeeUrlAddress);





		// UserName - Test Data

		row=Sheet.getRow(1);

		userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		   userNameProperty=By.id("txtUsername");
		userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		passwordProperty=By.name("txtPassword");
		password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		logInProperty=By.className("button");
		logIn=driver.findElement(logInProperty);
		logIn.click();




		}

		



}













}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-16 20:06:23.286
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-16 20:06:23.288
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-16 20:06:24.223
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.OrangeHrmApplication;

import org.testng.annotations.Test;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;


public class OrangeHrmEmpolyleListadded extends BaseTest{

	@Test 
	public void Webpage() throws IOException, InterruptedException {
		FileInputStream file=new FileInputStream("./src/main/java/testDataFiles/AddEmployee.xlsx");

		XSSFWorkbook workbook=new XSSFWorkbook(file);

		XSSFSheet Sheet=workbook.getSheet("TestData");

		int row_count=Sheet.getLastRowNum();

		System.out.println("The number of row in the Sheet is :-  "+row_count);

		int rowOfCells_Count=Sheet.getLeftCol();

		System.out.println("The number of roeOfCells in the sheet is :-  "+rowOfCells_Count);

		//===================================================================================================================================================


		//<div id="logInPanelHeading">LOGIN Panel</div>

		String expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		// of the current webpage - identifying the LOGIN Panel



		By OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		WebElement OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		String actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(1).createCell(1).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(1).createCell(1).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("FAIL");
		}

		//===================================================================================================================================================

		//Expect Title is - OrangeHRM  (should be same)

		String Expected_orangeHrmLogInPage="OrangeHRM";
		System.out.println("The OrangeHRM logIn Page title is :-  "+Expected_orangeHrmLogInPage);


		String Actual_orangenHrmLogInPageText=driver.getTitle();
		System.out.println("The OrangenHrm LogIn Page Title is :-  "+Actual_orangenHrmLogInPageText);


		if(Actual_orangenHrmLogInPageText.equals(Expected_orangeHrmLogInPage))
		{
		System.out.println("The LogIn Page Title is Match :- PASS");
		Sheet.getRow(1).createCell(4).setCellValue(Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("PASS");
		}
		else {
		System.out.println("The LogIn Page Title is NOT Match :- FAIL");
		Sheet.getRow(1).createCell(4).setCellValue("NOT Match - "+Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("FAIL");
		}


		//===================================================================================================================================================


		// UserName - Test Data

		XSSFRow row=Sheet.getRow(1);

		String userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		By userNameProperty=By.id("txtUsername");
		WebElement userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		String password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		By passwordProperty=By.name("txtPassword");
		WebElement password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		By logInProperty=By.className("button");
		WebElement logIn=driver.findElement(logInProperty);
		logIn.click();


		//===================================================================================================================================================


		 //   *********** Expected Text - Welcome (should have)

		// ---->>>>>>>>>>>>>> Performing click on the Welcome WebElement
		         
		         
		// <a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>

		String Expect_WebpageText= "Admin";
		System.out.println("The Expected OrangeHrm Home page text is Welcome  :-  "+Expect_WebpageText);


		By welcomeAdminProperty=By.linkText("Welcome Admin");
		WebElement welcome=driver.findElement(welcomeAdminProperty);


		//String actual_welcomeHrefAttributeValue=welcome.getAttribute("id");

		            //OR

		String actual_welcomeHrefAttributeValue=welcome.getText();
		System.out.println("The href Attribute value of welcome webElement is :- "+actual_welcomeHrefAttributeValue);


		//if(actual_welcomeHrefAttributeValue.equals(Expect_WebpageText))

		                 //OR

		if(actual_welcomeHrefAttributeValue.contains(Expect_WebpageText))
		{
		System.out.println("The text is Match :- PASS");
		Sheet.getRow(1).createCell(9).setCellValue(actual_welcomeHrefAttributeValue);
		Sheet.getRow(1).createCell(10).setCellValue("PASS ");
		}
		else {
		System.out.println("The text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(9).setCellValue("Not Match the title Welcome");
		Sheet.getRow(1).createCell(10).setCellValue("Not Match the webpage FAIL");
		}



		//===================================================================================================================================================


		 
		//************Automation  Header link PIM  Button

		   //<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/viewPimModule"
		//id="menu_pim_viewPimModule" class="firstLevelMenu"><b>PIM</b></a>

		By PIMButtonProperty= By.linkText("PIM");
		WebElement PIMElement= driver.findElement(PIMButtonProperty);
		       
		Actions mouseHoverOperation=new Actions(driver);
		mouseHoverOperation.moveToElement(PIMElement).build().perform();

		//************Automation  Header link Add Employee  Button
		       
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee"
		   //id="menu_pim_addEmployee">Add Employee</a>

		By AddEmployeeProperty=By.linkText("Add Employee");
		WebElement AddEmployee=driver.findElement(AddEmployeeProperty);
		AddEmployee.click();



		//===================================================================================================================================================



		//   *********** Expected AddEmployeeText - Full Name (should be same)

		String Expect_AddAdminText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_AddAdminText);

		//<label class="hasTopFieldHelp">Full Name</label>
		By fullNameProperty=By.className("hasTopFieldHelp");
		WebElement fullName=driver.findElement(fullNameProperty);

		String Actual_AddEmployeeText=fullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_AddEmployeeText);

		if(Actual_AddEmployeeText.equals(Expect_AddAdminText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(1).createCell(12).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(12).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("FAIL");
		}



		//===================================================================================================================================================
		String addEmployeeUrlAddress="http://127.0.0.1/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee";

		for(int indexrow=1; indexrow<=Sheet.getLastRowNum(); indexrow++) {



		XSSFRow row_AddAdmin=Sheet.getRow(indexrow);

		// --->>>>> This Names is Expected TestData in the Excel Sheet

		            // FirstName - Test Data

		String firstName_TestData=row_AddAdmin.getCell(14).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="firstName" id="firstName">
		By firstNameProperty=By.id("firstName");
		WebElement firstName=driver.findElement(firstNameProperty);
		firstName.sendKeys(firstName_TestData);

		// MiddleName - Test Data
		String middleName_TestData=row_AddAdmin.getCell(15).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="middleName" id="middleName">
		By middleNameProperty=By.id("middleName");
		WebElement middleName=driver.findElement(middleNameProperty);
		middleName.sendKeys(middleName_TestData);

		// LastName - Test Data

		   String lastName_TestData=row_AddAdmin.getCell(16).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="lastName" id="lastName">
		By lastNameProperty=By.id("lastName");
		WebElement lastName=driver.findElement(lastNameProperty);
		lastName.sendKeys(lastName_TestData);

		 
		 
		  //********Enter AddName EmployeeId Automation      



		//<input class="formInputText valid" maxlength="10" type="text"
		//name="employeeId" value="0001" id="employeeId">
		     
		   By employeeIdProperty=By.id("employeeId");
		WebElement employeeId=driver.findElement(employeeIdProperty);
		String Id=employeeId.getAttribute("value");
		     
		System.out.println("the EmployId number is :-  "+Id);
		     
		Sheet.getRow(indexrow).createCell(17).setCellValue(Id);


		 //*************  Automation Save Button
		     
		    //<input type="button" class="" id="btnSave" value="Save">
		   
		    By saveProperty= By.id("btnSave");
		    WebElement  save= driver.findElement(saveProperty);
		    save.click();
		     

		//===================================================================================================================================================

		   

		//   *********** Expected Personal Details Text After Click on Save - Full Name (should be same)

		String Expect_PersonalDetailsPageText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_PersonalDetailsPageText);


		//<label for="Full_Name" class="hasTopFieldHelp">Full Name</label>
		By PersonalDetailsPage_FullNameProperty=By.className("hasTopFieldHelp");
		WebElement PersonalDetailsPage_FullName=driver.findElement(PersonalDetailsPage_FullNameProperty);

		String Actual_PersonalDetailsPageText=PersonalDetailsPage_FullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_PersonalDetailsPageText);

		if(Actual_PersonalDetailsPageText.equals(Expect_PersonalDetailsPageText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(indexrow).createCell(19).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(indexrow).createCell(19).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("FAIL");
		}


		System.out.println();
		//===================================================================================================================================================


		// --->>>>> This Names is Actual TestData in the Add Employee Page

		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving FirstName


		   
		//<input value="Madhu" type="text" name="personal[txtEmpFirstName]" class="block default editable" maxlength="30"
		//title="First Name" id="personal_txtEmpFirstName" disabled="disabled">
		 
		By afterSaveFirstNameProperty= By.id("personal_txtEmpFirstName");
		WebElement afterSaveFirstName = driver.findElement(afterSaveFirstNameProperty);
		String Actual_FirstName=afterSaveFirstName.getAttribute("value");
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving MiddleName
		 
		//<input value="Sai" type="text" name="personal[txtEmpMiddleName]" class="block default editable" maxlength="30"
		//title="Middle Name" id="personal_txtEmpMiddleName" disabled="disabled">
		     
		By afterSaveMiddleNameProperty= By.id("personal_txtEmpMiddleName");
		WebElement  afterSaveMiddleName= driver.findElement(afterSaveMiddleNameProperty);
		String Actual_MiddleName=afterSaveMiddleName.getAttribute("value");  
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving LastName
		 
		//<input value="Chandu" type="text" name="personal[txtEmpLastName]" class="block default editable" maxlength="30"
		//title="Last Name" id="personal_txtEmpLastName" disabled="disabled">
		   
		By afterSaveLastNameProperty=By.id("personal_txtEmpLastName");
		WebElement afterSaveLastName=driver.findElement(afterSaveLastNameProperty);
		String Actual_LastName=afterSaveLastName.getAttribute("value");
		 
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving EmployeeId
		 
		//<input value="0021" type="text" name="personal[txtEmployeeId]" maxlength="10" class="editable"
		//id="personal_txtEmployeeId" disabled="disabled">
		 
		   By afterSaveEmployeeIdPrperty=By.id("personal_txtEmployeeId");
		   WebElement afterSaveEmployeeId=driver.findElement(afterSaveEmployeeIdPrperty);
		String Actual_EmployeeId= afterSaveEmployeeId.getAttribute("value");
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  FristName  
		 
		if(Actual_FirstName.equals("Madhu"))
		{
		      System.out.println("After saving the FirstName are same :-  PASS");
		      Sheet.getRow(indexrow).createCell(21).setCellValue(Actual_FirstName);
		      Sheet.getRow(indexrow).createCell(22).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the FirstName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(21).setCellValue("NOT Match - "+Actual_FirstName);
		   Sheet.getRow(indexrow).createCell(22).setCellValue("FAIL");
		}
		 
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  MiddleName  

		if(Actual_MiddleName.equals("Sai"))
		{
		System.out.println("After saving the MiddleName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(23).setCellValue(Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the MiddleName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(23).setCellValue("NOT Match - "+Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  LastName  
		 
		if(Actual_LastName.equals("Chandu"))
		{
		System.out.println("After saving the LastName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(25).setCellValue(Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the LastName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(25).setCellValue("NOT Match - "+Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  EmployeeId
		 
		 
		if(Actual_EmployeeId.equals(Id))
		{
		System.out.println("After saving the EmployeeId are same :-  PASS");
		Sheet.getRow(indexrow).createCell(27).setCellValue(Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("PASS");
		   
		   
		}
		else
		{
		System.out.println("After saving the EmployeeId are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(27).setCellValue("NOT Match - "+Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("FAIL");

		}


		//...............................................................................................



		 
		//*************  Automation  Welcome Admin Button
		   
		//<a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>
		     

		welcomeAdminProperty=By.linkText("Welcome Admin");
		welcome=driver.findElement(welcomeAdminProperty);

		welcome.click();
		     
		Thread.sleep(5000);
		     
		//*************  Automation  Welcome Admin Button  
		     
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/auth/logout">Logout</a>
		     
		By logOutProperty= By.linkText("Logout");
		WebElement logOut=driver.findElement(logOutProperty);
		logOut.click();
		     


		//===================================================================================================================================================


		//Expected Text - LOGIN Panel (should be same)

		//<div id="logInPanelHeading">LOGIN Panel</div>

		expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		  // of the current webpage - identifying the LOGIN Panel



		OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(indexrow).createCell(30).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(indexrow).createCell(30).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("FAIL");
		}






./src/testDataResult/AddEmployee.xlsx
		FileOutputStream Madhu=new FileOutputStream("/src/main/java/testDataResult/AddEmployee.xlsx");
		                 
		       workbook.write(Madhu);

		System.out.println();


		driver.get(addEmployeeUrlAddress);





		// UserName - Test Data

		row=Sheet.getRow(1);

		userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		   userNameProperty=By.id("txtUsername");
		userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		passwordProperty=By.name("txtPassword");
		password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		logInProperty=By.className("button");
		logIn=driver.findElement(logInProperty);
		logIn.click();




		}

		



}













}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-16 20:06:24.224
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-16 20:06:24.226
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-16 20:06:25.286
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.OrangeHrmApplication;

import org.testng.annotations.Test;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;


public class OrangeHrmEmpolyleListadded extends BaseTest{

	@Test 
	public void Webpage() throws IOException, InterruptedException {
		FileInputStream file=new FileInputStream("./src/main/java/testDataFiles/AddEmployee.xlsx");

		XSSFWorkbook workbook=new XSSFWorkbook(file);

		XSSFSheet Sheet=workbook.getSheet("TestData");

		int row_count=Sheet.getLastRowNum();

		System.out.println("The number of row in the Sheet is :-  "+row_count);

		int rowOfCells_Count=Sheet.getLeftCol();

		System.out.println("The number of roeOfCells in the sheet is :-  "+rowOfCells_Count);

		//===================================================================================================================================================


		//<div id="logInPanelHeading">LOGIN Panel</div>

		String expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		// of the current webpage - identifying the LOGIN Panel



		By OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		WebElement OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		String actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(1).createCell(1).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(1).createCell(1).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("FAIL");
		}

		//===================================================================================================================================================

		//Expect Title is - OrangeHRM  (should be same)

		String Expected_orangeHrmLogInPage="OrangeHRM";
		System.out.println("The OrangeHRM logIn Page title is :-  "+Expected_orangeHrmLogInPage);


		String Actual_orangenHrmLogInPageText=driver.getTitle();
		System.out.println("The OrangenHrm LogIn Page Title is :-  "+Actual_orangenHrmLogInPageText);


		if(Actual_orangenHrmLogInPageText.equals(Expected_orangeHrmLogInPage))
		{
		System.out.println("The LogIn Page Title is Match :- PASS");
		Sheet.getRow(1).createCell(4).setCellValue(Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("PASS");
		}
		else {
		System.out.println("The LogIn Page Title is NOT Match :- FAIL");
		Sheet.getRow(1).createCell(4).setCellValue("NOT Match - "+Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("FAIL");
		}


		//===================================================================================================================================================


		// UserName - Test Data

		XSSFRow row=Sheet.getRow(1);

		String userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		By userNameProperty=By.id("txtUsername");
		WebElement userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		String password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		By passwordProperty=By.name("txtPassword");
		WebElement password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		By logInProperty=By.className("button");
		WebElement logIn=driver.findElement(logInProperty);
		logIn.click();


		//===================================================================================================================================================


		 //   *********** Expected Text - Welcome (should have)

		// ---->>>>>>>>>>>>>> Performing click on the Welcome WebElement
		         
		         
		// <a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>

		String Expect_WebpageText= "Admin";
		System.out.println("The Expected OrangeHrm Home page text is Welcome  :-  "+Expect_WebpageText);


		By welcomeAdminProperty=By.linkText("Welcome Admin");
		WebElement welcome=driver.findElement(welcomeAdminProperty);


		//String actual_welcomeHrefAttributeValue=welcome.getAttribute("id");

		            //OR

		String actual_welcomeHrefAttributeValue=welcome.getText();
		System.out.println("The href Attribute value of welcome webElement is :- "+actual_welcomeHrefAttributeValue);


		//if(actual_welcomeHrefAttributeValue.equals(Expect_WebpageText))

		                 //OR

		if(actual_welcomeHrefAttributeValue.contains(Expect_WebpageText))
		{
		System.out.println("The text is Match :- PASS");
		Sheet.getRow(1).createCell(9).setCellValue(actual_welcomeHrefAttributeValue);
		Sheet.getRow(1).createCell(10).setCellValue("PASS ");
		}
		else {
		System.out.println("The text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(9).setCellValue("Not Match the title Welcome");
		Sheet.getRow(1).createCell(10).setCellValue("Not Match the webpage FAIL");
		}



		//===================================================================================================================================================


		 
		//************Automation  Header link PIM  Button

		   //<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/viewPimModule"
		//id="menu_pim_viewPimModule" class="firstLevelMenu"><b>PIM</b></a>

		By PIMButtonProperty= By.linkText("PIM");
		WebElement PIMElement= driver.findElement(PIMButtonProperty);
		       
		Actions mouseHoverOperation=new Actions(driver);
		mouseHoverOperation.moveToElement(PIMElement).build().perform();

		//************Automation  Header link Add Employee  Button
		       
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee"
		   //id="menu_pim_addEmployee">Add Employee</a>

		By AddEmployeeProperty=By.linkText("Add Employee");
		WebElement AddEmployee=driver.findElement(AddEmployeeProperty);
		AddEmployee.click();



		//===================================================================================================================================================



		//   *********** Expected AddEmployeeText - Full Name (should be same)

		String Expect_AddAdminText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_AddAdminText);

		//<label class="hasTopFieldHelp">Full Name</label>
		By fullNameProperty=By.className("hasTopFieldHelp");
		WebElement fullName=driver.findElement(fullNameProperty);

		String Actual_AddEmployeeText=fullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_AddEmployeeText);

		if(Actual_AddEmployeeText.equals(Expect_AddAdminText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(1).createCell(12).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(12).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("FAIL");
		}



		//===================================================================================================================================================
		String addEmployeeUrlAddress="http://127.0.0.1/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee";

		for(int indexrow=1; indexrow<=Sheet.getLastRowNum(); indexrow++) {



		XSSFRow row_AddAdmin=Sheet.getRow(indexrow);

		// --->>>>> This Names is Expected TestData in the Excel Sheet

		            // FirstName - Test Data

		String firstName_TestData=row_AddAdmin.getCell(14).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="firstName" id="firstName">
		By firstNameProperty=By.id("firstName");
		WebElement firstName=driver.findElement(firstNameProperty);
		firstName.sendKeys(firstName_TestData);

		// MiddleName - Test Data
		String middleName_TestData=row_AddAdmin.getCell(15).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="middleName" id="middleName">
		By middleNameProperty=By.id("middleName");
		WebElement middleName=driver.findElement(middleNameProperty);
		middleName.sendKeys(middleName_TestData);

		// LastName - Test Data

		   String lastName_TestData=row_AddAdmin.getCell(16).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="lastName" id="lastName">
		By lastNameProperty=By.id("lastName");
		WebElement lastName=driver.findElement(lastNameProperty);
		lastName.sendKeys(lastName_TestData);

		 
		 
		  //********Enter AddName EmployeeId Automation      



		//<input class="formInputText valid" maxlength="10" type="text"
		//name="employeeId" value="0001" id="employeeId">
		     
		   By employeeIdProperty=By.id("employeeId");
		WebElement employeeId=driver.findElement(employeeIdProperty);
		String Id=employeeId.getAttribute("value");
		     
		System.out.println("the EmployId number is :-  "+Id);
		     
		Sheet.getRow(indexrow).createCell(17).setCellValue(Id);


		 //*************  Automation Save Button
		     
		    //<input type="button" class="" id="btnSave" value="Save">
		   
		    By saveProperty= By.id("btnSave");
		    WebElement  save= driver.findElement(saveProperty);
		    save.click();
		     

		//===================================================================================================================================================

		   

		//   *********** Expected Personal Details Text After Click on Save - Full Name (should be same)

		String Expect_PersonalDetailsPageText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_PersonalDetailsPageText);


		//<label for="Full_Name" class="hasTopFieldHelp">Full Name</label>
		By PersonalDetailsPage_FullNameProperty=By.className("hasTopFieldHelp");
		WebElement PersonalDetailsPage_FullName=driver.findElement(PersonalDetailsPage_FullNameProperty);

		String Actual_PersonalDetailsPageText=PersonalDetailsPage_FullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_PersonalDetailsPageText);

		if(Actual_PersonalDetailsPageText.equals(Expect_PersonalDetailsPageText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(indexrow).createCell(19).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(indexrow).createCell(19).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("FAIL");
		}


		System.out.println();
		//===================================================================================================================================================


		// --->>>>> This Names is Actual TestData in the Add Employee Page

		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving FirstName


		   
		//<input value="Madhu" type="text" name="personal[txtEmpFirstName]" class="block default editable" maxlength="30"
		//title="First Name" id="personal_txtEmpFirstName" disabled="disabled">
		 
		By afterSaveFirstNameProperty= By.id("personal_txtEmpFirstName");
		WebElement afterSaveFirstName = driver.findElement(afterSaveFirstNameProperty);
		String Actual_FirstName=afterSaveFirstName.getAttribute("value");
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving MiddleName
		 
		//<input value="Sai" type="text" name="personal[txtEmpMiddleName]" class="block default editable" maxlength="30"
		//title="Middle Name" id="personal_txtEmpMiddleName" disabled="disabled">
		     
		By afterSaveMiddleNameProperty= By.id("personal_txtEmpMiddleName");
		WebElement  afterSaveMiddleName= driver.findElement(afterSaveMiddleNameProperty);
		String Actual_MiddleName=afterSaveMiddleName.getAttribute("value");  
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving LastName
		 
		//<input value="Chandu" type="text" name="personal[txtEmpLastName]" class="block default editable" maxlength="30"
		//title="Last Name" id="personal_txtEmpLastName" disabled="disabled">
		   
		By afterSaveLastNameProperty=By.id("personal_txtEmpLastName");
		WebElement afterSaveLastName=driver.findElement(afterSaveLastNameProperty);
		String Actual_LastName=afterSaveLastName.getAttribute("value");
		 
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving EmployeeId
		 
		//<input value="0021" type="text" name="personal[txtEmployeeId]" maxlength="10" class="editable"
		//id="personal_txtEmployeeId" disabled="disabled">
		 
		   By afterSaveEmployeeIdPrperty=By.id("personal_txtEmployeeId");
		   WebElement afterSaveEmployeeId=driver.findElement(afterSaveEmployeeIdPrperty);
		String Actual_EmployeeId= afterSaveEmployeeId.getAttribute("value");
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  FristName  
		 
		if(Actual_FirstName.equals("Madhu"))
		{
		      System.out.println("After saving the FirstName are same :-  PASS");
		      Sheet.getRow(indexrow).createCell(21).setCellValue(Actual_FirstName);
		      Sheet.getRow(indexrow).createCell(22).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the FirstName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(21).setCellValue("NOT Match - "+Actual_FirstName);
		   Sheet.getRow(indexrow).createCell(22).setCellValue("FAIL");
		}
		 
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  MiddleName  

		if(Actual_MiddleName.equals("Sai"))
		{
		System.out.println("After saving the MiddleName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(23).setCellValue(Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the MiddleName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(23).setCellValue("NOT Match - "+Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  LastName  
		 
		if(Actual_LastName.equals("Chandu"))
		{
		System.out.println("After saving the LastName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(25).setCellValue(Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the LastName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(25).setCellValue("NOT Match - "+Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  EmployeeId
		 
		 
		if(Actual_EmployeeId.equals(Id))
		{
		System.out.println("After saving the EmployeeId are same :-  PASS");
		Sheet.getRow(indexrow).createCell(27).setCellValue(Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("PASS");
		   
		   
		}
		else
		{
		System.out.println("After saving the EmployeeId are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(27).setCellValue("NOT Match - "+Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("FAIL");

		}


		//...............................................................................................



		 
		//*************  Automation  Welcome Admin Button
		   
		//<a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>
		     

		welcomeAdminProperty=By.linkText("Welcome Admin");
		welcome=driver.findElement(welcomeAdminProperty);

		welcome.click();
		     
		Thread.sleep(5000);
		     
		//*************  Automation  Welcome Admin Button  
		     
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/auth/logout">Logout</a>
		     
		By logOutProperty= By.linkText("Logout");
		WebElement logOut=driver.findElement(logOutProperty);
		logOut.click();
		     


		//===================================================================================================================================================


		//Expected Text - LOGIN Panel (should be same)

		//<div id="logInPanelHeading">LOGIN Panel</div>

		expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		  // of the current webpage - identifying the LOGIN Panel



		OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(indexrow).createCell(30).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(indexrow).createCell(30).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("FAIL");
		}






./src/testDataResult/AddEmployee.xlsx
		FileOutputStream Madhu=new FileOutputStream("./src/main/java/testDataResult/AddEmployee.xlsx");
		                 
		       workbook.write(Madhu);

		System.out.println();


		driver.get(addEmployeeUrlAddress);





		// UserName - Test Data

		row=Sheet.getRow(1);

		userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		   userNameProperty=By.id("txtUsername");
		userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		passwordProperty=By.name("txtPassword");
		password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		logInProperty=By.className("button");
		logIn=driver.findElement(logInProperty);
		logIn.click();




		}

		



}













}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-16 20:06:25.288
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-16 20:06:25.289
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-16 20:06:25.303
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.OrangeHrmApplication;

import org.testng.annotations.Test;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;


public class OrangeHrmEmpolyleListadded extends BaseTest{

	@Test 
	public void Webpage() throws IOException, InterruptedException {
		FileInputStream file=new FileInputStream("./src/main/java/testDataFiles/AddEmployee.xlsx");

		XSSFWorkbook workbook=new XSSFWorkbook(file);

		XSSFSheet Sheet=workbook.getSheet("TestData");

		int row_count=Sheet.getLastRowNum();

		System.out.println("The number of row in the Sheet is :-  "+row_count);

		int rowOfCells_Count=Sheet.getLeftCol();

		System.out.println("The number of roeOfCells in the sheet is :-  "+rowOfCells_Count);

		//===================================================================================================================================================


		//<div id="logInPanelHeading">LOGIN Panel</div>

		String expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		// of the current webpage - identifying the LOGIN Panel



		By OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		WebElement OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		String actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(1).createCell(1).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(1).createCell(1).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("FAIL");
		}

		//===================================================================================================================================================

		//Expect Title is - OrangeHRM  (should be same)

		String Expected_orangeHrmLogInPage="OrangeHRM";
		System.out.println("The OrangeHRM logIn Page title is :-  "+Expected_orangeHrmLogInPage);


		String Actual_orangenHrmLogInPageText=driver.getTitle();
		System.out.println("The OrangenHrm LogIn Page Title is :-  "+Actual_orangenHrmLogInPageText);


		if(Actual_orangenHrmLogInPageText.equals(Expected_orangeHrmLogInPage))
		{
		System.out.println("The LogIn Page Title is Match :- PASS");
		Sheet.getRow(1).createCell(4).setCellValue(Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("PASS");
		}
		else {
		System.out.println("The LogIn Page Title is NOT Match :- FAIL");
		Sheet.getRow(1).createCell(4).setCellValue("NOT Match - "+Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("FAIL");
		}


		//===================================================================================================================================================


		// UserName - Test Data

		XSSFRow row=Sheet.getRow(1);

		String userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		By userNameProperty=By.id("txtUsername");
		WebElement userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		String password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		By passwordProperty=By.name("txtPassword");
		WebElement password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		By logInProperty=By.className("button");
		WebElement logIn=driver.findElement(logInProperty);
		logIn.click();


		//===================================================================================================================================================


		 //   *********** Expected Text - Welcome (should have)

		// ---->>>>>>>>>>>>>> Performing click on the Welcome WebElement
		         
		         
		// <a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>

		String Expect_WebpageText= "Admin";
		System.out.println("The Expected OrangeHrm Home page text is Welcome  :-  "+Expect_WebpageText);


		By welcomeAdminProperty=By.linkText("Welcome Admin");
		WebElement welcome=driver.findElement(welcomeAdminProperty);


		//String actual_welcomeHrefAttributeValue=welcome.getAttribute("id");

		            //OR

		String actual_welcomeHrefAttributeValue=welcome.getText();
		System.out.println("The href Attribute value of welcome webElement is :- "+actual_welcomeHrefAttributeValue);


		//if(actual_welcomeHrefAttributeValue.equals(Expect_WebpageText))

		                 //OR

		if(actual_welcomeHrefAttributeValue.contains(Expect_WebpageText))
		{
		System.out.println("The text is Match :- PASS");
		Sheet.getRow(1).createCell(9).setCellValue(actual_welcomeHrefAttributeValue);
		Sheet.getRow(1).createCell(10).setCellValue("PASS ");
		}
		else {
		System.out.println("The text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(9).setCellValue("Not Match the title Welcome");
		Sheet.getRow(1).createCell(10).setCellValue("Not Match the webpage FAIL");
		}



		//===================================================================================================================================================


		 
		//************Automation  Header link PIM  Button

		   //<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/viewPimModule"
		//id="menu_pim_viewPimModule" class="firstLevelMenu"><b>PIM</b></a>

		By PIMButtonProperty= By.linkText("PIM");
		WebElement PIMElement= driver.findElement(PIMButtonProperty);
		       
		Actions mouseHoverOperation=new Actions(driver);
		mouseHoverOperation.moveToElement(PIMElement).build().perform();

		//************Automation  Header link Add Employee  Button
		       
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee"
		   //id="menu_pim_addEmployee">Add Employee</a>

		By AddEmployeeProperty=By.linkText("Add Employee");
		WebElement AddEmployee=driver.findElement(AddEmployeeProperty);
		AddEmployee.click();



		//===================================================================================================================================================



		//   *********** Expected AddEmployeeText - Full Name (should be same)

		String Expect_AddAdminText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_AddAdminText);

		//<label class="hasTopFieldHelp">Full Name</label>
		By fullNameProperty=By.className("hasTopFieldHelp");
		WebElement fullName=driver.findElement(fullNameProperty);

		String Actual_AddEmployeeText=fullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_AddEmployeeText);

		if(Actual_AddEmployeeText.equals(Expect_AddAdminText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(1).createCell(12).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(12).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("FAIL");
		}



		//===================================================================================================================================================
		String addEmployeeUrlAddress="http://127.0.0.1/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee";

		for(int indexrow=1; indexrow<=Sheet.getLastRowNum(); indexrow++) {



		XSSFRow row_AddAdmin=Sheet.getRow(indexrow);

		// --->>>>> This Names is Expected TestData in the Excel Sheet

		            // FirstName - Test Data

		String firstName_TestData=row_AddAdmin.getCell(14).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="firstName" id="firstName">
		By firstNameProperty=By.id("firstName");
		WebElement firstName=driver.findElement(firstNameProperty);
		firstName.sendKeys(firstName_TestData);

		// MiddleName - Test Data
		String middleName_TestData=row_AddAdmin.getCell(15).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="middleName" id="middleName">
		By middleNameProperty=By.id("middleName");
		WebElement middleName=driver.findElement(middleNameProperty);
		middleName.sendKeys(middleName_TestData);

		// LastName - Test Data

		   String lastName_TestData=row_AddAdmin.getCell(16).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="lastName" id="lastName">
		By lastNameProperty=By.id("lastName");
		WebElement lastName=driver.findElement(lastNameProperty);
		lastName.sendKeys(lastName_TestData);

		 
		 
		  //********Enter AddName EmployeeId Automation      



		//<input class="formInputText valid" maxlength="10" type="text"
		//name="employeeId" value="0001" id="employeeId">
		     
		   By employeeIdProperty=By.id("employeeId");
		WebElement employeeId=driver.findElement(employeeIdProperty);
		String Id=employeeId.getAttribute("value");
		     
		System.out.println("the EmployId number is :-  "+Id);
		     
		Sheet.getRow(indexrow).createCell(17).setCellValue(Id);


		 //*************  Automation Save Button
		     
		    //<input type="button" class="" id="btnSave" value="Save">
		   
		    By saveProperty= By.id("btnSave");
		    WebElement  save= driver.findElement(saveProperty);
		    save.click();
		     

		//===================================================================================================================================================

		   

		//   *********** Expected Personal Details Text After Click on Save - Full Name (should be same)

		String Expect_PersonalDetailsPageText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_PersonalDetailsPageText);


		//<label for="Full_Name" class="hasTopFieldHelp">Full Name</label>
		By PersonalDetailsPage_FullNameProperty=By.className("hasTopFieldHelp");
		WebElement PersonalDetailsPage_FullName=driver.findElement(PersonalDetailsPage_FullNameProperty);

		String Actual_PersonalDetailsPageText=PersonalDetailsPage_FullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_PersonalDetailsPageText);

		if(Actual_PersonalDetailsPageText.equals(Expect_PersonalDetailsPageText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(indexrow).createCell(19).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(indexrow).createCell(19).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("FAIL");
		}


		System.out.println();
		//===================================================================================================================================================


		// --->>>>> This Names is Actual TestData in the Add Employee Page

		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving FirstName


		   
		//<input value="Madhu" type="text" name="personal[txtEmpFirstName]" class="block default editable" maxlength="30"
		//title="First Name" id="personal_txtEmpFirstName" disabled="disabled">
		 
		By afterSaveFirstNameProperty= By.id("personal_txtEmpFirstName");
		WebElement afterSaveFirstName = driver.findElement(afterSaveFirstNameProperty);
		String Actual_FirstName=afterSaveFirstName.getAttribute("value");
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving MiddleName
		 
		//<input value="Sai" type="text" name="personal[txtEmpMiddleName]" class="block default editable" maxlength="30"
		//title="Middle Name" id="personal_txtEmpMiddleName" disabled="disabled">
		     
		By afterSaveMiddleNameProperty= By.id("personal_txtEmpMiddleName");
		WebElement  afterSaveMiddleName= driver.findElement(afterSaveMiddleNameProperty);
		String Actual_MiddleName=afterSaveMiddleName.getAttribute("value");  
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving LastName
		 
		//<input value="Chandu" type="text" name="personal[txtEmpLastName]" class="block default editable" maxlength="30"
		//title="Last Name" id="personal_txtEmpLastName" disabled="disabled">
		   
		By afterSaveLastNameProperty=By.id("personal_txtEmpLastName");
		WebElement afterSaveLastName=driver.findElement(afterSaveLastNameProperty);
		String Actual_LastName=afterSaveLastName.getAttribute("value");
		 
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving EmployeeId
		 
		//<input value="0021" type="text" name="personal[txtEmployeeId]" maxlength="10" class="editable"
		//id="personal_txtEmployeeId" disabled="disabled">
		 
		   By afterSaveEmployeeIdPrperty=By.id("personal_txtEmployeeId");
		   WebElement afterSaveEmployeeId=driver.findElement(afterSaveEmployeeIdPrperty);
		String Actual_EmployeeId= afterSaveEmployeeId.getAttribute("value");
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  FristName  
		 
		if(Actual_FirstName.equals("Madhu"))
		{
		      System.out.println("After saving the FirstName are same :-  PASS");
		      Sheet.getRow(indexrow).createCell(21).setCellValue(Actual_FirstName);
		      Sheet.getRow(indexrow).createCell(22).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the FirstName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(21).setCellValue("NOT Match - "+Actual_FirstName);
		   Sheet.getRow(indexrow).createCell(22).setCellValue("FAIL");
		}
		 
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  MiddleName  

		if(Actual_MiddleName.equals("Sai"))
		{
		System.out.println("After saving the MiddleName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(23).setCellValue(Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the MiddleName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(23).setCellValue("NOT Match - "+Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  LastName  
		 
		if(Actual_LastName.equals("Chandu"))
		{
		System.out.println("After saving the LastName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(25).setCellValue(Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the LastName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(25).setCellValue("NOT Match - "+Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  EmployeeId
		 
		 
		if(Actual_EmployeeId.equals(Id))
		{
		System.out.println("After saving the EmployeeId are same :-  PASS");
		Sheet.getRow(indexrow).createCell(27).setCellValue(Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("PASS");
		   
		   
		}
		else
		{
		System.out.println("After saving the EmployeeId are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(27).setCellValue("NOT Match - "+Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("FAIL");

		}


		//...............................................................................................



		 
		//*************  Automation  Welcome Admin Button
		   
		//<a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>
		     

		welcomeAdminProperty=By.linkText("Welcome Admin");
		welcome=driver.findElement(welcomeAdminProperty);

		welcome.click();
		     
		Thread.sleep(5000);
		     
		//*************  Automation  Welcome Admin Button  
		     
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/auth/logout">Logout</a>
		     
		By logOutProperty= By.linkText("Logout");
		WebElement logOut=driver.findElement(logOutProperty);
		logOut.click();
		     


		//===================================================================================================================================================


		//Expected Text - LOGIN Panel (should be same)

		//<div id="logInPanelHeading">LOGIN Panel</div>

		expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		  // of the current webpage - identifying the LOGIN Panel



		OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(indexrow).createCell(30).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(indexrow).createCell(30).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("FAIL");
		}






./src/testDataResult/AddEmployee.xlsx
		FileOutputStream Madhu=new FileOutputStream("./src/main/java/testDataResult/AddEmployee.xlsx");
		                 
		       workbook.write(Madhu);

		System.out.println();


		driver.get(addEmployeeUrlAddress);





		// UserName - Test Data

		row=Sheet.getRow(1);

		userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		   userNameProperty=By.id("txtUsername");
		userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		passwordProperty=By.name("txtPassword");
		password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		logInProperty=By.className("button");
		logIn=driver.findElement(logInProperty);
		logIn.click();




		}

		



}













}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-16 20:06:25.305
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-16 20:06:25.306
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-16 20:06:29.424
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.OrangeHrmApplication;

import org.testng.annotations.Test;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;


public class OrangeHrmEmpolyleListadded extends BaseTest{

	@Test 
	public void Webpage() throws IOException, InterruptedException {
		FileInputStream file=new FileInputStream("./src/main/java/testDataFiles/AddEmployee.xlsx");

		XSSFWorkbook workbook=new XSSFWorkbook(file);

		XSSFSheet Sheet=workbook.getSheet("TestData");

		int row_count=Sheet.getLastRowNum();

		System.out.println("The number of row in the Sheet is :-  "+row_count);

		int rowOfCells_Count=Sheet.getLeftCol();

		System.out.println("The number of roeOfCells in the sheet is :-  "+rowOfCells_Count);

		//===================================================================================================================================================


		//<div id="logInPanelHeading">LOGIN Panel</div>

		String expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		// of the current webpage - identifying the LOGIN Panel



		By OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		WebElement OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		String actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(1).createCell(1).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(1).createCell(1).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("FAIL");
		}

		//===================================================================================================================================================

		//Expect Title is - OrangeHRM  (should be same)

		String Expected_orangeHrmLogInPage="OrangeHRM";
		System.out.println("The OrangeHRM logIn Page title is :-  "+Expected_orangeHrmLogInPage);


		String Actual_orangenHrmLogInPageText=driver.getTitle();
		System.out.println("The OrangenHrm LogIn Page Title is :-  "+Actual_orangenHrmLogInPageText);


		if(Actual_orangenHrmLogInPageText.equals(Expected_orangeHrmLogInPage))
		{
		System.out.println("The LogIn Page Title is Match :- PASS");
		Sheet.getRow(1).createCell(4).setCellValue(Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("PASS");
		}
		else {
		System.out.println("The LogIn Page Title is NOT Match :- FAIL");
		Sheet.getRow(1).createCell(4).setCellValue("NOT Match - "+Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("FAIL");
		}


		//===================================================================================================================================================


		// UserName - Test Data

		XSSFRow row=Sheet.getRow(1);

		String userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		By userNameProperty=By.id("txtUsername");
		WebElement userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		String password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		By passwordProperty=By.name("txtPassword");
		WebElement password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		By logInProperty=By.className("button");
		WebElement logIn=driver.findElement(logInProperty);
		logIn.click();


		//===================================================================================================================================================


		 //   *********** Expected Text - Welcome (should have)

		// ---->>>>>>>>>>>>>> Performing click on the Welcome WebElement
		         
		         
		// <a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>

		String Expect_WebpageText= "Admin";
		System.out.println("The Expected OrangeHrm Home page text is Welcome  :-  "+Expect_WebpageText);


		By welcomeAdminProperty=By.linkText("Welcome Admin");
		WebElement welcome=driver.findElement(welcomeAdminProperty);


		//String actual_welcomeHrefAttributeValue=welcome.getAttribute("id");

		            //OR

		String actual_welcomeHrefAttributeValue=welcome.getText();
		System.out.println("The href Attribute value of welcome webElement is :- "+actual_welcomeHrefAttributeValue);


		//if(actual_welcomeHrefAttributeValue.equals(Expect_WebpageText))

		                 //OR

		if(actual_welcomeHrefAttributeValue.contains(Expect_WebpageText))
		{
		System.out.println("The text is Match :- PASS");
		Sheet.getRow(1).createCell(9).setCellValue(actual_welcomeHrefAttributeValue);
		Sheet.getRow(1).createCell(10).setCellValue("PASS ");
		}
		else {
		System.out.println("The text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(9).setCellValue("Not Match the title Welcome");
		Sheet.getRow(1).createCell(10).setCellValue("Not Match the webpage FAIL");
		}



		//===================================================================================================================================================


		 
		//************Automation  Header link PIM  Button

		   //<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/viewPimModule"
		//id="menu_pim_viewPimModule" class="firstLevelMenu"><b>PIM</b></a>

		By PIMButtonProperty= By.linkText("PIM");
		WebElement PIMElement= driver.findElement(PIMButtonProperty);
		       
		Actions mouseHoverOperation=new Actions(driver);
		mouseHoverOperation.moveToElement(PIMElement).build().perform();

		//************Automation  Header link Add Employee  Button
		       
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee"
		   //id="menu_pim_addEmployee">Add Employee</a>

		By AddEmployeeProperty=By.linkText("Add Employee");
		WebElement AddEmployee=driver.findElement(AddEmployeeProperty);
		AddEmployee.click();



		//===================================================================================================================================================



		//   *********** Expected AddEmployeeText - Full Name (should be same)

		String Expect_AddAdminText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_AddAdminText);

		//<label class="hasTopFieldHelp">Full Name</label>
		By fullNameProperty=By.className("hasTopFieldHelp");
		WebElement fullName=driver.findElement(fullNameProperty);

		String Actual_AddEmployeeText=fullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_AddEmployeeText);

		if(Actual_AddEmployeeText.equals(Expect_AddAdminText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(1).createCell(12).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(12).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("FAIL");
		}



		//===================================================================================================================================================
		String addEmployeeUrlAddress="http://127.0.0.1/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee";

		for(int indexrow=1; indexrow<=Sheet.getLastRowNum(); indexrow++) {



		XSSFRow row_AddAdmin=Sheet.getRow(indexrow);

		// --->>>>> This Names is Expected TestData in the Excel Sheet

		            // FirstName - Test Data

		String firstName_TestData=row_AddAdmin.getCell(14).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="firstName" id="firstName">
		By firstNameProperty=By.id("firstName");
		WebElement firstName=driver.findElement(firstNameProperty);
		firstName.sendKeys(firstName_TestData);

		// MiddleName - Test Data
		String middleName_TestData=row_AddAdmin.getCell(15).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="middleName" id="middleName">
		By middleNameProperty=By.id("middleName");
		WebElement middleName=driver.findElement(middleNameProperty);
		middleName.sendKeys(middleName_TestData);

		// LastName - Test Data

		   String lastName_TestData=row_AddAdmin.getCell(16).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="lastName" id="lastName">
		By lastNameProperty=By.id("lastName");
		WebElement lastName=driver.findElement(lastNameProperty);
		lastName.sendKeys(lastName_TestData);

		 
		 
		  //********Enter AddName EmployeeId Automation      



		//<input class="formInputText valid" maxlength="10" type="text"
		//name="employeeId" value="0001" id="employeeId">
		     
		   By employeeIdProperty=By.id("employeeId");
		WebElement employeeId=driver.findElement(employeeIdProperty);
		String Id=employeeId.getAttribute("value");
		     
		System.out.println("the EmployId number is :-  "+Id);
		     
		Sheet.getRow(indexrow).createCell(17).setCellValue(Id);


		 //*************  Automation Save Button
		     
		    //<input type="button" class="" id="btnSave" value="Save">
		   
		    By saveProperty= By.id("btnSave");
		    WebElement  save= driver.findElement(saveProperty);
		    save.click();
		     

		//===================================================================================================================================================

		   

		//   *********** Expected Personal Details Text After Click on Save - Full Name (should be same)

		String Expect_PersonalDetailsPageText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_PersonalDetailsPageText);


		//<label for="Full_Name" class="hasTopFieldHelp">Full Name</label>
		By PersonalDetailsPage_FullNameProperty=By.className("hasTopFieldHelp");
		WebElement PersonalDetailsPage_FullName=driver.findElement(PersonalDetailsPage_FullNameProperty);

		String Actual_PersonalDetailsPageText=PersonalDetailsPage_FullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_PersonalDetailsPageText);

		if(Actual_PersonalDetailsPageText.equals(Expect_PersonalDetailsPageText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(indexrow).createCell(19).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(indexrow).createCell(19).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("FAIL");
		}


		System.out.println();
		//===================================================================================================================================================


		// --->>>>> This Names is Actual TestData in the Add Employee Page

		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving FirstName


		   
		//<input value="Madhu" type="text" name="personal[txtEmpFirstName]" class="block default editable" maxlength="30"
		//title="First Name" id="personal_txtEmpFirstName" disabled="disabled">
		 
		By afterSaveFirstNameProperty= By.id("personal_txtEmpFirstName");
		WebElement afterSaveFirstName = driver.findElement(afterSaveFirstNameProperty);
		String Actual_FirstName=afterSaveFirstName.getAttribute("value");
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving MiddleName
		 
		//<input value="Sai" type="text" name="personal[txtEmpMiddleName]" class="block default editable" maxlength="30"
		//title="Middle Name" id="personal_txtEmpMiddleName" disabled="disabled">
		     
		By afterSaveMiddleNameProperty= By.id("personal_txtEmpMiddleName");
		WebElement  afterSaveMiddleName= driver.findElement(afterSaveMiddleNameProperty);
		String Actual_MiddleName=afterSaveMiddleName.getAttribute("value");  
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving LastName
		 
		//<input value="Chandu" type="text" name="personal[txtEmpLastName]" class="block default editable" maxlength="30"
		//title="Last Name" id="personal_txtEmpLastName" disabled="disabled">
		   
		By afterSaveLastNameProperty=By.id("personal_txtEmpLastName");
		WebElement afterSaveLastName=driver.findElement(afterSaveLastNameProperty);
		String Actual_LastName=afterSaveLastName.getAttribute("value");
		 
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving EmployeeId
		 
		//<input value="0021" type="text" name="personal[txtEmployeeId]" maxlength="10" class="editable"
		//id="personal_txtEmployeeId" disabled="disabled">
		 
		   By afterSaveEmployeeIdPrperty=By.id("personal_txtEmployeeId");
		   WebElement afterSaveEmployeeId=driver.findElement(afterSaveEmployeeIdPrperty);
		String Actual_EmployeeId= afterSaveEmployeeId.getAttribute("value");
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  FristName  
		 
		if(Actual_FirstName.equals("Madhu"))
		{
		      System.out.println("After saving the FirstName are same :-  PASS");
		      Sheet.getRow(indexrow).createCell(21).setCellValue(Actual_FirstName);
		      Sheet.getRow(indexrow).createCell(22).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the FirstName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(21).setCellValue("NOT Match - "+Actual_FirstName);
		   Sheet.getRow(indexrow).createCell(22).setCellValue("FAIL");
		}
		 
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  MiddleName  

		if(Actual_MiddleName.equals("Sai"))
		{
		System.out.println("After saving the MiddleName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(23).setCellValue(Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the MiddleName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(23).setCellValue("NOT Match - "+Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  LastName  
		 
		if(Actual_LastName.equals("Chandu"))
		{
		System.out.println("After saving the LastName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(25).setCellValue(Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the LastName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(25).setCellValue("NOT Match - "+Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  EmployeeId
		 
		 
		if(Actual_EmployeeId.equals(Id))
		{
		System.out.println("After saving the EmployeeId are same :-  PASS");
		Sheet.getRow(indexrow).createCell(27).setCellValue(Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("PASS");
		   
		   
		}
		else
		{
		System.out.println("After saving the EmployeeId are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(27).setCellValue("NOT Match - "+Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("FAIL");

		}


		//...............................................................................................



		 
		//*************  Automation  Welcome Admin Button
		   
		//<a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>
		     

		welcomeAdminProperty=By.linkText("Welcome Admin");
		welcome=driver.findElement(welcomeAdminProperty);

		welcome.click();
		     
		Thread.sleep(5000);
		     
		//*************  Automation  Welcome Admin Button  
		     
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/auth/logout">Logout</a>
		     
		By logOutProperty= By.linkText("Logout");
		WebElement logOut=driver.findElement(logOutProperty);
		logOut.click();
		     


		//===================================================================================================================================================


		//Expected Text - LOGIN Panel (should be same)

		//<div id="logInPanelHeading">LOGIN Panel</div>

		expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		  // of the current webpage - identifying the LOGIN Panel



		OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(indexrow).createCell(30).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(indexrow).createCell(30).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("FAIL");
		}






./src/testDataResult/AddEmployee.xlsx
		FileOutputStream Madhu=new FileOutputStream("./src/main/java/testDataResult/AddEmployee.xlsx");
		                 
		       workbook.write(Madhu);

		System.out.println();


		driver.get(addEmployeeUrlAddress);





		// UserName - Test Data

		row=Sheet.getRow(1);

		userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		   userNameProperty=By.id("txtUsername");
		userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		passwordProperty=By.name("txtPassword");
		password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		logInProperty=By.className("button");
		logIn=driver.findElement(logInProperty);
		logIn.click();




		}

		



}













}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-16 20:06:29.425
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-16 20:06:29.426
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-16 20:07:01.856
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.OrangeHrmApplication;

import org.testng.annotations.Test;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;


public class OrangeHrmEmpolyleListadded extends BaseTest{

	@Test 
	public void Webpage() throws IOException, InterruptedException {
		FileInputStream file=new FileInputStream("./src/main/java/testDataFiles/AddEmployee.xlsx");

		XSSFWorkbook workbook=new XSSFWorkbook(file);

		XSSFSheet Sheet=workbook.getSheet("TestData");

		int row_count=Sheet.getLastRowNum();

		System.out.println("The number of row in the Sheet is :-  "+row_count);

		int rowOfCells_Count=Sheet.getLeftCol();

		System.out.println("The number of roeOfCells in the sheet is :-  "+rowOfCells_Count);

		//===================================================================================================================================================


		//<div id="logInPanelHeading">LOGIN Panel</div>

		String expected_OrangeHrmLogInPanel="LOGIN Panel";
		(tl"The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		// of the current webpage - identifying the LOGIN Panel



		By OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		WebElement OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		String actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(1).createCell(1).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(1).createCell(1).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("FAIL");
		}

		//===================================================================================================================================================

		//Expect Title is - OrangeHRM  (should be same)

		String Expected_orangeHrmLogInPage="OrangeHRM";
		System.out.println("The OrangeHRM logIn Page title is :-  "+Expected_orangeHrmLogInPage);


		String Actual_orangenHrmLogInPageText=driver.getTitle();
		System.out.println("The OrangenHrm LogIn Page Title is :-  "+Actual_orangenHrmLogInPageText);


		if(Actual_orangenHrmLogInPageText.equals(Expected_orangeHrmLogInPage))
		{
		System.out.println("The LogIn Page Title is Match :- PASS");
		Sheet.getRow(1).createCell(4).setCellValue(Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("PASS");
		}
		else {
		System.out.println("The LogIn Page Title is NOT Match :- FAIL");
		Sheet.getRow(1).createCell(4).setCellValue("NOT Match - "+Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("FAIL");
		}


		//===================================================================================================================================================


		// UserName - Test Data

		XSSFRow row=Sheet.getRow(1);

		String userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		By userNameProperty=By.id("txtUsername");
		WebElement userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		String password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		By passwordProperty=By.name("txtPassword");
		WebElement password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		By logInProperty=By.className("button");
		WebElement logIn=driver.findElement(logInProperty);
		logIn.click();


		//===================================================================================================================================================


		 //   *********** Expected Text - Welcome (should have)

		// ---->>>>>>>>>>>>>> Performing click on the Welcome WebElement
		         
		         
		// <a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>

		String Expect_WebpageText= "Admin";
		System.out.println("The Expected OrangeHrm Home page text is Welcome  :-  "+Expect_WebpageText);


		By welcomeAdminProperty=By.linkText("Welcome Admin");
		WebElement welcome=driver.findElement(welcomeAdminProperty);


		//String actual_welcomeHrefAttributeValue=welcome.getAttribute("id");

		            //OR

		String actual_welcomeHrefAttributeValue=welcome.getText();
		System.out.println("The href Attribute value of welcome webElement is :- "+actual_welcomeHrefAttributeValue);


		//if(actual_welcomeHrefAttributeValue.equals(Expect_WebpageText))

		                 //OR

		if(actual_welcomeHrefAttributeValue.contains(Expect_WebpageText))
		{
		System.out.println("The text is Match :- PASS");
		Sheet.getRow(1).createCell(9).setCellValue(actual_welcomeHrefAttributeValue);
		Sheet.getRow(1).createCell(10).setCellValue("PASS ");
		}
		else {
		System.out.println("The text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(9).setCellValue("Not Match the title Welcome");
		Sheet.getRow(1).createCell(10).setCellValue("Not Match the webpage FAIL");
		}



		//===================================================================================================================================================


		 
		//************Automation  Header link PIM  Button

		   //<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/viewPimModule"
		//id="menu_pim_viewPimModule" class="firstLevelMenu"><b>PIM</b></a>

		By PIMButtonProperty= By.linkText("PIM");
		WebElement PIMElement= driver.findElement(PIMButtonProperty);
		       
		Actions mouseHoverOperation=new Actions(driver);
		mouseHoverOperation.moveToElement(PIMElement).build().perform();

		//************Automation  Header link Add Employee  Button
		       
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee"
		   //id="menu_pim_addEmployee">Add Employee</a>

		By AddEmployeeProperty=By.linkText("Add Employee");
		WebElement AddEmployee=driver.findElement(AddEmployeeProperty);
		AddEmployee.click();



		//===================================================================================================================================================



		//   *********** Expected AddEmployeeText - Full Name (should be same)

		String Expect_AddAdminText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_AddAdminText);

		//<label class="hasTopFieldHelp">Full Name</label>
		By fullNameProperty=By.className("hasTopFieldHelp");
		WebElement fullName=driver.findElement(fullNameProperty);

		String Actual_AddEmployeeText=fullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_AddEmployeeText);

		if(Actual_AddEmployeeText.equals(Expect_AddAdminText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(1).createCell(12).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(12).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("FAIL");
		}



		//===================================================================================================================================================
		String addEmployeeUrlAddress="http://127.0.0.1/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee";

		for(int indexrow=1; indexrow<=Sheet.getLastRowNum(); indexrow++) {



		XSSFRow row_AddAdmin=Sheet.getRow(indexrow);

		// --->>>>> This Names is Expected TestData in the Excel Sheet

		            // FirstName - Test Data

		String firstName_TestData=row_AddAdmin.getCell(14).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="firstName" id="firstName">
		By firstNameProperty=By.id("firstName");
		WebElement firstName=driver.findElement(firstNameProperty);
		firstName.sendKeys(firstName_TestData);

		// MiddleName - Test Data
		String middleName_TestData=row_AddAdmin.getCell(15).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="middleName" id="middleName">
		By middleNameProperty=By.id("middleName");
		WebElement middleName=driver.findElement(middleNameProperty);
		middleName.sendKeys(middleName_TestData);

		// LastName - Test Data

		   String lastName_TestData=row_AddAdmin.getCell(16).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="lastName" id="lastName">
		By lastNameProperty=By.id("lastName");
		WebElement lastName=driver.findElement(lastNameProperty);
		lastName.sendKeys(lastName_TestData);

		 
		 
		  //********Enter AddName EmployeeId Automation      



		//<input class="formInputText valid" maxlength="10" type="text"
		//name="employeeId" value="0001" id="employeeId">
		     
		   By employeeIdProperty=By.id("employeeId");
		WebElement employeeId=driver.findElement(employeeIdProperty);
		String Id=employeeId.getAttribute("value");
		     
		System.out.println("the EmployId number is :-  "+Id);
		     
		Sheet.getRow(indexrow).createCell(17).setCellValue(Id);


		 //*************  Automation Save Button
		     
		    //<input type="button" class="" id="btnSave" value="Save">
		   
		    By saveProperty= By.id("btnSave");
		    WebElement  save= driver.findElement(saveProperty);
		    save.click();
		     

		//===================================================================================================================================================

		   

		//   *********** Expected Personal Details Text After Click on Save - Full Name (should be same)

		String Expect_PersonalDetailsPageText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_PersonalDetailsPageText);


		//<label for="Full_Name" class="hasTopFieldHelp">Full Name</label>
		By PersonalDetailsPage_FullNameProperty=By.className("hasTopFieldHelp");
		WebElement PersonalDetailsPage_FullName=driver.findElement(PersonalDetailsPage_FullNameProperty);

		String Actual_PersonalDetailsPageText=PersonalDetailsPage_FullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_PersonalDetailsPageText);

		if(Actual_PersonalDetailsPageText.equals(Expect_PersonalDetailsPageText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(indexrow).createCell(19).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(indexrow).createCell(19).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("FAIL");
		}


		System.out.println();
		//===================================================================================================================================================


		// --->>>>> This Names is Actual TestData in the Add Employee Page

		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving FirstName


		   
		//<input value="Madhu" type="text" name="personal[txtEmpFirstName]" class="block default editable" maxlength="30"
		//title="First Name" id="personal_txtEmpFirstName" disabled="disabled">
		 
		By afterSaveFirstNameProperty= By.id("personal_txtEmpFirstName");
		WebElement afterSaveFirstName = driver.findElement(afterSaveFirstNameProperty);
		String Actual_FirstName=afterSaveFirstName.getAttribute("value");
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving MiddleName
		 
		//<input value="Sai" type="text" name="personal[txtEmpMiddleName]" class="block default editable" maxlength="30"
		//title="Middle Name" id="personal_txtEmpMiddleName" disabled="disabled">
		     
		By afterSaveMiddleNameProperty= By.id("personal_txtEmpMiddleName");
		WebElement  afterSaveMiddleName= driver.findElement(afterSaveMiddleNameProperty);
		String Actual_MiddleName=afterSaveMiddleName.getAttribute("value");  
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving LastName
		 
		//<input value="Chandu" type="text" name="personal[txtEmpLastName]" class="block default editable" maxlength="30"
		//title="Last Name" id="personal_txtEmpLastName" disabled="disabled">
		   
		By afterSaveLastNameProperty=By.id("personal_txtEmpLastName");
		WebElement afterSaveLastName=driver.findElement(afterSaveLastNameProperty);
		String Actual_LastName=afterSaveLastName.getAttribute("value");
		 
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving EmployeeId
		 
		//<input value="0021" type="text" name="personal[txtEmployeeId]" maxlength="10" class="editable"
		//id="personal_txtEmployeeId" disabled="disabled">
		 
		   By afterSaveEmployeeIdPrperty=By.id("personal_txtEmployeeId");
		   WebElement afterSaveEmployeeId=driver.findElement(afterSaveEmployeeIdPrperty);
		String Actual_EmployeeId= afterSaveEmployeeId.getAttribute("value");
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  FristName  
		 
		if(Actual_FirstName.equals("Madhu"))
		{
		      System.out.println("After saving the FirstName are same :-  PASS");
		      Sheet.getRow(indexrow).createCell(21).setCellValue(Actual_FirstName);
		      Sheet.getRow(indexrow).createCell(22).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the FirstName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(21).setCellValue("NOT Match - "+Actual_FirstName);
		   Sheet.getRow(indexrow).createCell(22).setCellValue("FAIL");
		}
		 
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  MiddleName  

		if(Actual_MiddleName.equals("Sai"))
		{
		System.out.println("After saving the MiddleName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(23).setCellValue(Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the MiddleName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(23).setCellValue("NOT Match - "+Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  LastName  
		 
		if(Actual_LastName.equals("Chandu"))
		{
		System.out.println("After saving the LastName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(25).setCellValue(Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the LastName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(25).setCellValue("NOT Match - "+Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  EmployeeId
		 
		 
		if(Actual_EmployeeId.equals(Id))
		{
		System.out.println("After saving the EmployeeId are same :-  PASS");
		Sheet.getRow(indexrow).createCell(27).setCellValue(Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("PASS");
		   
		   
		}
		else
		{
		System.out.println("After saving the EmployeeId are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(27).setCellValue("NOT Match - "+Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("FAIL");

		}


		//...............................................................................................



		 
		//*************  Automation  Welcome Admin Button
		   
		//<a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>
		     

		welcomeAdminProperty=By.linkText("Welcome Admin");
		welcome=driver.findElement(welcomeAdminProperty);

		welcome.click();
		     
		Thread.sleep(5000);
		     
		//*************  Automation  Welcome Admin Button  
		     
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/auth/logout">Logout</a>
		     
		By logOutProperty= By.linkText("Logout");
		WebElement logOut=driver.findElement(logOutProperty);
		logOut.click();
		     


		//===================================================================================================================================================


		//Expected Text - LOGIN Panel (should be same)

		//<div id="logInPanelHeading">LOGIN Panel</div>

		expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		  // of the current webpage - identifying the LOGIN Panel



		OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(indexrow).createCell(30).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(indexrow).createCell(30).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("FAIL");
		}






		FileOutputStream Madhu=new FileOutputStream("./src/main/java/testDataResult/AddEmployee.xlsx");
		                 
		       workbook.write(Madhu);

		System.out.println();


		driver.get(addEmployeeUrlAddress);





		// UserName - Test Data

		row=Sheet.getRow(1);

		userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		   userNameProperty=By.id("txtUsername");
		userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		passwordProperty=By.name("txtPassword");
		password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		logInProperty=By.className("button");
		logIn=driver.findElement(logInProperty);
		logIn.click();




		}

		



}













}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-16 20:07:01.857
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-16 20:07:01.858
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-16 20:07:01.872
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.OrangeHrmApplication;

import org.testng.annotations.Test;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;


public class OrangeHrmEmpolyleListadded extends BaseTest{

	@Test 
	public void Webpage() throws IOException, InterruptedException {
		FileInputStream file=new FileInputStream("./src/main/java/testDataFiles/AddEmployee.xlsx");

		XSSFWorkbook workbook=new XSSFWorkbook(file);

		XSSFSheet Sheet=workbook.getSheet("TestData");

		int row_count=Sheet.getLastRowNum();

		System.out.println("The number of row in the Sheet is :-  "+row_count);

		int rowOfCells_Count=Sheet.getLeftCol();

		System.out.println("The number of roeOfCells in the sheet is :-  "+rowOfCells_Count);

		//===================================================================================================================================================


		//<div id="logInPanelHeading">LOGIN Panel</div>

		String expected_OrangeHrmLogInPanel="LOGIN Panel";
		(tl"The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		// of the current webpage - identifying the LOGIN Panel



		By OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		WebElement OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		String actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(1).createCell(1).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(1).createCell(1).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("FAIL");
		}

		//===================================================================================================================================================

		//Expect Title is - OrangeHRM  (should be same)

		String Expected_orangeHrmLogInPage="OrangeHRM";
		System.out.println("The OrangeHRM logIn Page title is :-  "+Expected_orangeHrmLogInPage);


		String Actual_orangenHrmLogInPageText=driver.getTitle();
		System.out.println("The OrangenHrm LogIn Page Title is :-  "+Actual_orangenHrmLogInPageText);


		if(Actual_orangenHrmLogInPageText.equals(Expected_orangeHrmLogInPage))
		{
		System.out.println("The LogIn Page Title is Match :- PASS");
		Sheet.getRow(1).createCell(4).setCellValue(Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("PASS");
		}
		else {
		System.out.println("The LogIn Page Title is NOT Match :- FAIL");
		Sheet.getRow(1).createCell(4).setCellValue("NOT Match - "+Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("FAIL");
		}


		//===================================================================================================================================================


		// UserName - Test Data

		XSSFRow row=Sheet.getRow(1);

		String userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		By userNameProperty=By.id("txtUsername");
		WebElement userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		String password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		By passwordProperty=By.name("txtPassword");
		WebElement password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		By logInProperty=By.className("button");
		WebElement logIn=driver.findElement(logInProperty);
		logIn.click();


		//===================================================================================================================================================


		 //   *********** Expected Text - Welcome (should have)

		// ---->>>>>>>>>>>>>> Performing click on the Welcome WebElement
		         
		         
		// <a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>

		String Expect_WebpageText= "Admin";
		System.out.println("The Expected OrangeHrm Home page text is Welcome  :-  "+Expect_WebpageText);


		By welcomeAdminProperty=By.linkText("Welcome Admin");
		WebElement welcome=driver.findElement(welcomeAdminProperty);


		//String actual_welcomeHrefAttributeValue=welcome.getAttribute("id");

		            //OR

		String actual_welcomeHrefAttributeValue=welcome.getText();
		System.out.println("The href Attribute value of welcome webElement is :- "+actual_welcomeHrefAttributeValue);


		//if(actual_welcomeHrefAttributeValue.equals(Expect_WebpageText))

		                 //OR

		if(actual_welcomeHrefAttributeValue.contains(Expect_WebpageText))
		{
		System.out.println("The text is Match :- PASS");
		Sheet.getRow(1).createCell(9).setCellValue(actual_welcomeHrefAttributeValue);
		Sheet.getRow(1).createCell(10).setCellValue("PASS ");
		}
		else {
		System.out.println("The text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(9).setCellValue("Not Match the title Welcome");
		Sheet.getRow(1).createCell(10).setCellValue("Not Match the webpage FAIL");
		}



		//===================================================================================================================================================


		 
		//************Automation  Header link PIM  Button

		   //<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/viewPimModule"
		//id="menu_pim_viewPimModule" class="firstLevelMenu"><b>PIM</b></a>

		By PIMButtonProperty= By.linkText("PIM");
		WebElement PIMElement= driver.findElement(PIMButtonProperty);
		       
		Actions mouseHoverOperation=new Actions(driver);
		mouseHoverOperation.moveToElement(PIMElement).build().perform();

		//************Automation  Header link Add Employee  Button
		       
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee"
		   //id="menu_pim_addEmployee">Add Employee</a>

		By AddEmployeeProperty=By.linkText("Add Employee");
		WebElement AddEmployee=driver.findElement(AddEmployeeProperty);
		AddEmployee.click();



		//===================================================================================================================================================



		//   *********** Expected AddEmployeeText - Full Name (should be same)

		String Expect_AddAdminText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_AddAdminText);

		//<label class="hasTopFieldHelp">Full Name</label>
		By fullNameProperty=By.className("hasTopFieldHelp");
		WebElement fullName=driver.findElement(fullNameProperty);

		String Actual_AddEmployeeText=fullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_AddEmployeeText);

		if(Actual_AddEmployeeText.equals(Expect_AddAdminText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(1).createCell(12).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(12).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("FAIL");
		}



		//===================================================================================================================================================
		String addEmployeeUrlAddress="http://127.0.0.1/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee";

		for(int indexrow=1; indexrow<=Sheet.getLastRowNum(); indexrow++) {



		XSSFRow row_AddAdmin=Sheet.getRow(indexrow);

		// --->>>>> This Names is Expected TestData in the Excel Sheet

		            // FirstName - Test Data

		String firstName_TestData=row_AddAdmin.getCell(14).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="firstName" id="firstName">
		By firstNameProperty=By.id("firstName");
		WebElement firstName=driver.findElement(firstNameProperty);
		firstName.sendKeys(firstName_TestData);

		// MiddleName - Test Data
		String middleName_TestData=row_AddAdmin.getCell(15).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="middleName" id="middleName">
		By middleNameProperty=By.id("middleName");
		WebElement middleName=driver.findElement(middleNameProperty);
		middleName.sendKeys(middleName_TestData);

		// LastName - Test Data

		   String lastName_TestData=row_AddAdmin.getCell(16).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="lastName" id="lastName">
		By lastNameProperty=By.id("lastName");
		WebElement lastName=driver.findElement(lastNameProperty);
		lastName.sendKeys(lastName_TestData);

		 
		 
		  //********Enter AddName EmployeeId Automation      



		//<input class="formInputText valid" maxlength="10" type="text"
		//name="employeeId" value="0001" id="employeeId">
		     
		   By employeeIdProperty=By.id("employeeId");
		WebElement employeeId=driver.findElement(employeeIdProperty);
		String Id=employeeId.getAttribute("value");
		     
		System.out.println("the EmployId number is :-  "+Id);
		     
		Sheet.getRow(indexrow).createCell(17).setCellValue(Id);


		 //*************  Automation Save Button
		     
		    //<input type="button" class="" id="btnSave" value="Save">
		   
		    By saveProperty= By.id("btnSave");
		    WebElement  save= driver.findElement(saveProperty);
		    save.click();
		     

		//===================================================================================================================================================

		   

		//   *********** Expected Personal Details Text After Click on Save - Full Name (should be same)

		String Expect_PersonalDetailsPageText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_PersonalDetailsPageText);


		//<label for="Full_Name" class="hasTopFieldHelp">Full Name</label>
		By PersonalDetailsPage_FullNameProperty=By.className("hasTopFieldHelp");
		WebElement PersonalDetailsPage_FullName=driver.findElement(PersonalDetailsPage_FullNameProperty);

		String Actual_PersonalDetailsPageText=PersonalDetailsPage_FullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_PersonalDetailsPageText);

		if(Actual_PersonalDetailsPageText.equals(Expect_PersonalDetailsPageText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(indexrow).createCell(19).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(indexrow).createCell(19).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("FAIL");
		}


		System.out.println();
		//===================================================================================================================================================


		// --->>>>> This Names is Actual TestData in the Add Employee Page

		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving FirstName


		   
		//<input value="Madhu" type="text" name="personal[txtEmpFirstName]" class="block default editable" maxlength="30"
		//title="First Name" id="personal_txtEmpFirstName" disabled="disabled">
		 
		By afterSaveFirstNameProperty= By.id("personal_txtEmpFirstName");
		WebElement afterSaveFirstName = driver.findElement(afterSaveFirstNameProperty);
		String Actual_FirstName=afterSaveFirstName.getAttribute("value");
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving MiddleName
		 
		//<input value="Sai" type="text" name="personal[txtEmpMiddleName]" class="block default editable" maxlength="30"
		//title="Middle Name" id="personal_txtEmpMiddleName" disabled="disabled">
		     
		By afterSaveMiddleNameProperty= By.id("personal_txtEmpMiddleName");
		WebElement  afterSaveMiddleName= driver.findElement(afterSaveMiddleNameProperty);
		String Actual_MiddleName=afterSaveMiddleName.getAttribute("value");  
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving LastName
		 
		//<input value="Chandu" type="text" name="personal[txtEmpLastName]" class="block default editable" maxlength="30"
		//title="Last Name" id="personal_txtEmpLastName" disabled="disabled">
		   
		By afterSaveLastNameProperty=By.id("personal_txtEmpLastName");
		WebElement afterSaveLastName=driver.findElement(afterSaveLastNameProperty);
		String Actual_LastName=afterSaveLastName.getAttribute("value");
		 
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving EmployeeId
		 
		//<input value="0021" type="text" name="personal[txtEmployeeId]" maxlength="10" class="editable"
		//id="personal_txtEmployeeId" disabled="disabled">
		 
		   By afterSaveEmployeeIdPrperty=By.id("personal_txtEmployeeId");
		   WebElement afterSaveEmployeeId=driver.findElement(afterSaveEmployeeIdPrperty);
		String Actual_EmployeeId= afterSaveEmployeeId.getAttribute("value");
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  FristName  
		 
		if(Actual_FirstName.equals("Madhu"))
		{
		      System.out.println("After saving the FirstName are same :-  PASS");
		      Sheet.getRow(indexrow).createCell(21).setCellValue(Actual_FirstName);
		      Sheet.getRow(indexrow).createCell(22).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the FirstName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(21).setCellValue("NOT Match - "+Actual_FirstName);
		   Sheet.getRow(indexrow).createCell(22).setCellValue("FAIL");
		}
		 
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  MiddleName  

		if(Actual_MiddleName.equals("Sai"))
		{
		System.out.println("After saving the MiddleName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(23).setCellValue(Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the MiddleName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(23).setCellValue("NOT Match - "+Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  LastName  
		 
		if(Actual_LastName.equals("Chandu"))
		{
		System.out.println("After saving the LastName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(25).setCellValue(Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the LastName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(25).setCellValue("NOT Match - "+Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  EmployeeId
		 
		 
		if(Actual_EmployeeId.equals(Id))
		{
		System.out.println("After saving the EmployeeId are same :-  PASS");
		Sheet.getRow(indexrow).createCell(27).setCellValue(Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("PASS");
		   
		   
		}
		else
		{
		System.out.println("After saving the EmployeeId are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(27).setCellValue("NOT Match - "+Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("FAIL");

		}


		//...............................................................................................



		 
		//*************  Automation  Welcome Admin Button
		   
		//<a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>
		     

		welcomeAdminProperty=By.linkText("Welcome Admin");
		welcome=driver.findElement(welcomeAdminProperty);

		welcome.click();
		     
		Thread.sleep(5000);
		     
		//*************  Automation  Welcome Admin Button  
		     
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/auth/logout">Logout</a>
		     
		By logOutProperty= By.linkText("Logout");
		WebElement logOut=driver.findElement(logOutProperty);
		logOut.click();
		     


		//===================================================================================================================================================


		//Expected Text - LOGIN Panel (should be same)

		//<div id="logInPanelHeading">LOGIN Panel</div>

		expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		  // of the current webpage - identifying the LOGIN Panel



		OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(indexrow).createCell(30).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(indexrow).createCell(30).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("FAIL");
		}






		FileOutputStream Madhu=new FileOutputStream("./src/main/java/testDataResult/AddEmployee.xlsx");
		                 
		       workbook.write(Madhu);

		System.out.println();


		driver.get(addEmployeeUrlAddress);





		// UserName - Test Data

		row=Sheet.getRow(1);

		userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		   userNameProperty=By.id("txtUsername");
		userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		passwordProperty=By.name("txtPassword");
		password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		logInProperty=By.className("button");
		logIn=driver.findElement(logInProperty);
		logIn.click();




		}

		



}













}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-16 20:07:01.874
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-16 20:07:01.875
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-16 20:07:03.885
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.OrangeHrmApplication;

import org.testng.annotations.Test;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;


public class OrangeHrmEmpolyleListadded extends BaseTest{

	@Test 
	public void Webpage() throws IOException, InterruptedException {
		FileInputStream file=new FileInputStream("./src/main/java/testDataFiles/AddEmployee.xlsx");

		XSSFWorkbook workbook=new XSSFWorkbook(file);

		XSSFSheet Sheet=workbook.getSheet("TestData");

		int row_count=Sheet.getLastRowNum();

		System.out.println("The number of row in the Sheet is :-  "+row_count);

		int rowOfCells_Count=Sheet.getLeftCol();

		System.out.println("The number of roeOfCells in the sheet is :-  "+rowOfCells_Count);

		//===================================================================================================================================================


		//<div id="logInPanelHeading">LOGIN Panel</div>

		String expected_OrangeHrmLogInPanel="LOGIN Panel";
		(tl"The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		// of the current webpage - identifying the LOGIN Panel



		By OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		WebElement OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		String actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(1).createCell(1).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(1).createCell(1).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("FAIL");
		}

		//===================================================================================================================================================

		//Expect Title is - OrangeHRM  (should be same)

		String Expected_orangeHrmLogInPage="OrangeHRM";
		System.out.println("The OrangeHRM logIn Page title is :-  "+Expected_orangeHrmLogInPage);


		String Actual_orangenHrmLogInPageText=driver.getTitle();
		System.out.println("The OrangenHrm LogIn Page Title is :-  "+Actual_orangenHrmLogInPageText);


		if(Actual_orangenHrmLogInPageText.equals(Expected_orangeHrmLogInPage))
		{
		System.out.println("The LogIn Page Title is Match :- PASS");
		Sheet.getRow(1).createCell(4).setCellValue(Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("PASS");
		}
		else {
		System.out.println("The LogIn Page Title is NOT Match :- FAIL");
		Sheet.getRow(1).createCell(4).setCellValue("NOT Match - "+Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("FAIL");
		}


		//===================================================================================================================================================


		// UserName - Test Data

		XSSFRow row=Sheet.getRow(1);

		String userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		By userNameProperty=By.id("txtUsername");
		WebElement userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		String password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		By passwordProperty=By.name("txtPassword");
		WebElement password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		By logInProperty=By.className("button");
		WebElement logIn=driver.findElement(logInProperty);
		logIn.click();


		//===================================================================================================================================================


		 //   *********** Expected Text - Welcome (should have)

		// ---->>>>>>>>>>>>>> Performing click on the Welcome WebElement
		         
		         
		// <a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>

		String Expect_WebpageText= "Admin";
		System.out.println("The Expected OrangeHrm Home page text is Welcome  :-  "+Expect_WebpageText);


		By welcomeAdminProperty=By.linkText("Welcome Admin");
		WebElement welcome=driver.findElement(welcomeAdminProperty);


		//String actual_welcomeHrefAttributeValue=welcome.getAttribute("id");

		            //OR

		String actual_welcomeHrefAttributeValue=welcome.getText();
		System.out.println("The href Attribute value of welcome webElement is :- "+actual_welcomeHrefAttributeValue);


		//if(actual_welcomeHrefAttributeValue.equals(Expect_WebpageText))

		                 //OR

		if(actual_welcomeHrefAttributeValue.contains(Expect_WebpageText))
		{
		System.out.println("The text is Match :- PASS");
		Sheet.getRow(1).createCell(9).setCellValue(actual_welcomeHrefAttributeValue);
		Sheet.getRow(1).createCell(10).setCellValue("PASS ");
		}
		else {
		System.out.println("The text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(9).setCellValue("Not Match the title Welcome");
		Sheet.getRow(1).createCell(10).setCellValue("Not Match the webpage FAIL");
		}



		//===================================================================================================================================================


		 
		//************Automation  Header link PIM  Button

		   //<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/viewPimModule"
		//id="menu_pim_viewPimModule" class="firstLevelMenu"><b>PIM</b></a>

		By PIMButtonProperty= By.linkText("PIM");
		WebElement PIMElement= driver.findElement(PIMButtonProperty);
		       
		Actions mouseHoverOperation=new Actions(driver);
		mouseHoverOperation.moveToElement(PIMElement).build().perform();

		//************Automation  Header link Add Employee  Button
		       
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee"
		   //id="menu_pim_addEmployee">Add Employee</a>

		By AddEmployeeProperty=By.linkText("Add Employee");
		WebElement AddEmployee=driver.findElement(AddEmployeeProperty);
		AddEmployee.click();



		//===================================================================================================================================================



		//   *********** Expected AddEmployeeText - Full Name (should be same)

		String Expect_AddAdminText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_AddAdminText);

		//<label class="hasTopFieldHelp">Full Name</label>
		By fullNameProperty=By.className("hasTopFieldHelp");
		WebElement fullName=driver.findElement(fullNameProperty);

		String Actual_AddEmployeeText=fullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_AddEmployeeText);

		if(Actual_AddEmployeeText.equals(Expect_AddAdminText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(1).createCell(12).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(12).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("FAIL");
		}



		//===================================================================================================================================================
		String addEmployeeUrlAddress="http://127.0.0.1/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee";

		for(int indexrow=1; indexrow<=Sheet.getLastRowNum(); indexrow++) {



		XSSFRow row_AddAdmin=Sheet.getRow(indexrow);

		// --->>>>> This Names is Expected TestData in the Excel Sheet

		            // FirstName - Test Data

		String firstName_TestData=row_AddAdmin.getCell(14).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="firstName" id="firstName">
		By firstNameProperty=By.id("firstName");
		WebElement firstName=driver.findElement(firstNameProperty);
		firstName.sendKeys(firstName_TestData);

		// MiddleName - Test Data
		String middleName_TestData=row_AddAdmin.getCell(15).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="middleName" id="middleName">
		By middleNameProperty=By.id("middleName");
		WebElement middleName=driver.findElement(middleNameProperty);
		middleName.sendKeys(middleName_TestData);

		// LastName - Test Data

		   String lastName_TestData=row_AddAdmin.getCell(16).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="lastName" id="lastName">
		By lastNameProperty=By.id("lastName");
		WebElement lastName=driver.findElement(lastNameProperty);
		lastName.sendKeys(lastName_TestData);

		 
		 
		  //********Enter AddName EmployeeId Automation      



		//<input class="formInputText valid" maxlength="10" type="text"
		//name="employeeId" value="0001" id="employeeId">
		     
		   By employeeIdProperty=By.id("employeeId");
		WebElement employeeId=driver.findElement(employeeIdProperty);
		String Id=employeeId.getAttribute("value");
		     
		System.out.println("the EmployId number is :-  "+Id);
		     
		Sheet.getRow(indexrow).createCell(17).setCellValue(Id);


		 //*************  Automation Save Button
		     
		    //<input type="button" class="" id="btnSave" value="Save">
		   
		    By saveProperty= By.id("btnSave");
		    WebElement  save= driver.findElement(saveProperty);
		    save.click();
		     

		//===================================================================================================================================================

		   

		//   *********** Expected Personal Details Text After Click on Save - Full Name (should be same)

		String Expect_PersonalDetailsPageText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_PersonalDetailsPageText);


		//<label for="Full_Name" class="hasTopFieldHelp">Full Name</label>
		By PersonalDetailsPage_FullNameProperty=By.className("hasTopFieldHelp");
		WebElement PersonalDetailsPage_FullName=driver.findElement(PersonalDetailsPage_FullNameProperty);

		String Actual_PersonalDetailsPageText=PersonalDetailsPage_FullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_PersonalDetailsPageText);

		if(Actual_PersonalDetailsPageText.equals(Expect_PersonalDetailsPageText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(indexrow).createCell(19).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(indexrow).createCell(19).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("FAIL");
		}


		System.out.println();
		//===================================================================================================================================================


		// --->>>>> This Names is Actual TestData in the Add Employee Page

		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving FirstName


		   
		//<input value="Madhu" type="text" name="personal[txtEmpFirstName]" class="block default editable" maxlength="30"
		//title="First Name" id="personal_txtEmpFirstName" disabled="disabled">
		 
		By afterSaveFirstNameProperty= By.id("personal_txtEmpFirstName");
		WebElement afterSaveFirstName = driver.findElement(afterSaveFirstNameProperty);
		String Actual_FirstName=afterSaveFirstName.getAttribute("value");
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving MiddleName
		 
		//<input value="Sai" type="text" name="personal[txtEmpMiddleName]" class="block default editable" maxlength="30"
		//title="Middle Name" id="personal_txtEmpMiddleName" disabled="disabled">
		     
		By afterSaveMiddleNameProperty= By.id("personal_txtEmpMiddleName");
		WebElement  afterSaveMiddleName= driver.findElement(afterSaveMiddleNameProperty);
		String Actual_MiddleName=afterSaveMiddleName.getAttribute("value");  
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving LastName
		 
		//<input value="Chandu" type="text" name="personal[txtEmpLastName]" class="block default editable" maxlength="30"
		//title="Last Name" id="personal_txtEmpLastName" disabled="disabled">
		   
		By afterSaveLastNameProperty=By.id("personal_txtEmpLastName");
		WebElement afterSaveLastName=driver.findElement(afterSaveLastNameProperty);
		String Actual_LastName=afterSaveLastName.getAttribute("value");
		 
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving EmployeeId
		 
		//<input value="0021" type="text" name="personal[txtEmployeeId]" maxlength="10" class="editable"
		//id="personal_txtEmployeeId" disabled="disabled">
		 
		   By afterSaveEmployeeIdPrperty=By.id("personal_txtEmployeeId");
		   WebElement afterSaveEmployeeId=driver.findElement(afterSaveEmployeeIdPrperty);
		String Actual_EmployeeId= afterSaveEmployeeId.getAttribute("value");
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  FristName  
		 
		if(Actual_FirstName.equals("Madhu"))
		{
		      System.out.println("After saving the FirstName are same :-  PASS");
		      Sheet.getRow(indexrow).createCell(21).setCellValue(Actual_FirstName);
		      Sheet.getRow(indexrow).createCell(22).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the FirstName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(21).setCellValue("NOT Match - "+Actual_FirstName);
		   Sheet.getRow(indexrow).createCell(22).setCellValue("FAIL");
		}
		 
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  MiddleName  

		if(Actual_MiddleName.equals("Sai"))
		{
		System.out.println("After saving the MiddleName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(23).setCellValue(Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the MiddleName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(23).setCellValue("NOT Match - "+Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  LastName  
		 
		if(Actual_LastName.equals("Chandu"))
		{
		System.out.println("After saving the LastName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(25).setCellValue(Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the LastName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(25).setCellValue("NOT Match - "+Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  EmployeeId
		 
		 
		if(Actual_EmployeeId.equals(Id))
		{
		System.out.println("After saving the EmployeeId are same :-  PASS");
		Sheet.getRow(indexrow).createCell(27).setCellValue(Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("PASS");
		   
		   
		}
		else
		{
		System.out.println("After saving the EmployeeId are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(27).setCellValue("NOT Match - "+Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("FAIL");

		}


		//...............................................................................................



		 
		//*************  Automation  Welcome Admin Button
		   
		//<a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>
		     

		welcomeAdminProperty=By.linkText("Welcome Admin");
		welcome=driver.findElement(welcomeAdminProperty);

		welcome.click();
		     
		Thread.sleep(5000);
		     
		//*************  Automation  Welcome Admin Button  
		     
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/auth/logout">Logout</a>
		     
		By logOutProperty= By.linkText("Logout");
		WebElement logOut=driver.findElement(logOutProperty);
		logOut.click();
		     


		//===================================================================================================================================================


		//Expected Text - LOGIN Panel (should be same)

		//<div id="logInPanelHeading">LOGIN Panel</div>

		expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		  // of the current webpage - identifying the LOGIN Panel



		OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(indexrow).createCell(30).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(indexrow).createCell(30).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("FAIL");
		}






		FileOutputStream Madhu=new FileOutputStream("./src/main/java/testDataResult/AddEmployee.xlsx");
		                 
		       workbook.write(Madhu);

		System.out.println();


		driver.get(addEmployeeUrlAddress);





		// UserName - Test Data

		row=Sheet.getRow(1);

		userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		   userNameProperty=By.id("txtUsername");
		userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		passwordProperty=By.name("txtPassword");
		password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		logInProperty=By.className("button");
		logIn=driver.findElement(logInProperty);
		logIn.click();




		}

		



}













}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-16 20:07:03.887
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-16 20:07:03.887
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-16 20:07:03.902
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.OrangeHrmApplication;

import org.testng.annotations.Test;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;


public class OrangeHrmEmpolyleListadded extends BaseTest{

	@Test 
	public void Webpage() throws IOException, InterruptedException {
		FileInputStream file=new FileInputStream("./src/main/java/testDataFiles/AddEmployee.xlsx");

		XSSFWorkbook workbook=new XSSFWorkbook(file);

		XSSFSheet Sheet=workbook.getSheet("TestData");

		int row_count=Sheet.getLastRowNum();

		System.out.println("The number of row in the Sheet is :-  "+row_count);

		int rowOfCells_Count=Sheet.getLeftCol();

		System.out.println("The number of roeOfCells in the sheet is :-  "+rowOfCells_Count);

		//===================================================================================================================================================


		//<div id="logInPanelHeading">LOGIN Panel</div>

		String expected_OrangeHrmLogInPanel="LOGIN Panel";
		(tl"The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		// of the current webpage - identifying the LOGIN Panel



		By OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		WebElement OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		String actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(1).createCell(1).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(1).createCell(1).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("FAIL");
		}

		//===================================================================================================================================================

		//Expect Title is - OrangeHRM  (should be same)

		String Expected_orangeHrmLogInPage="OrangeHRM";
		System.out.println("The OrangeHRM logIn Page title is :-  "+Expected_orangeHrmLogInPage);


		String Actual_orangenHrmLogInPageText=driver.getTitle();
		System.out.println("The OrangenHrm LogIn Page Title is :-  "+Actual_orangenHrmLogInPageText);


		if(Actual_orangenHrmLogInPageText.equals(Expected_orangeHrmLogInPage))
		{
		System.out.println("The LogIn Page Title is Match :- PASS");
		Sheet.getRow(1).createCell(4).setCellValue(Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("PASS");
		}
		else {
		System.out.println("The LogIn Page Title is NOT Match :- FAIL");
		Sheet.getRow(1).createCell(4).setCellValue("NOT Match - "+Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("FAIL");
		}


		//===================================================================================================================================================


		// UserName - Test Data

		XSSFRow row=Sheet.getRow(1);

		String userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		By userNameProperty=By.id("txtUsername");
		WebElement userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		String password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		By passwordProperty=By.name("txtPassword");
		WebElement password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		By logInProperty=By.className("button");
		WebElement logIn=driver.findElement(logInProperty);
		logIn.click();


		//===================================================================================================================================================


		 //   *********** Expected Text - Welcome (should have)

		// ---->>>>>>>>>>>>>> Performing click on the Welcome WebElement
		         
		         
		// <a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>

		String Expect_WebpageText= "Admin";
		System.out.println("The Expected OrangeHrm Home page text is Welcome  :-  "+Expect_WebpageText);


		By welcomeAdminProperty=By.linkText("Welcome Admin");
		WebElement welcome=driver.findElement(welcomeAdminProperty);


		//String actual_welcomeHrefAttributeValue=welcome.getAttribute("id");

		            //OR

		String actual_welcomeHrefAttributeValue=welcome.getText();
		System.out.println("The href Attribute value of welcome webElement is :- "+actual_welcomeHrefAttributeValue);


		//if(actual_welcomeHrefAttributeValue.equals(Expect_WebpageText))

		                 //OR

		if(actual_welcomeHrefAttributeValue.contains(Expect_WebpageText))
		{
		System.out.println("The text is Match :- PASS");
		Sheet.getRow(1).createCell(9).setCellValue(actual_welcomeHrefAttributeValue);
		Sheet.getRow(1).createCell(10).setCellValue("PASS ");
		}
		else {
		System.out.println("The text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(9).setCellValue("Not Match the title Welcome");
		Sheet.getRow(1).createCell(10).setCellValue("Not Match the webpage FAIL");
		}



		//===================================================================================================================================================


		 
		//************Automation  Header link PIM  Button

		   //<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/viewPimModule"
		//id="menu_pim_viewPimModule" class="firstLevelMenu"><b>PIM</b></a>

		By PIMButtonProperty= By.linkText("PIM");
		WebElement PIMElement= driver.findElement(PIMButtonProperty);
		       
		Actions mouseHoverOperation=new Actions(driver);
		mouseHoverOperation.moveToElement(PIMElement).build().perform();

		//************Automation  Header link Add Employee  Button
		       
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee"
		   //id="menu_pim_addEmployee">Add Employee</a>

		By AddEmployeeProperty=By.linkText("Add Employee");
		WebElement AddEmployee=driver.findElement(AddEmployeeProperty);
		AddEmployee.click();



		//===================================================================================================================================================



		//   *********** Expected AddEmployeeText - Full Name (should be same)

		String Expect_AddAdminText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_AddAdminText);

		//<label class="hasTopFieldHelp">Full Name</label>
		By fullNameProperty=By.className("hasTopFieldHelp");
		WebElement fullName=driver.findElement(fullNameProperty);

		String Actual_AddEmployeeText=fullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_AddEmployeeText);

		if(Actual_AddEmployeeText.equals(Expect_AddAdminText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(1).createCell(12).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(12).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("FAIL");
		}



		//===================================================================================================================================================
		String addEmployeeUrlAddress="http://127.0.0.1/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee";

		for(int indexrow=1; indexrow<=Sheet.getLastRowNum(); indexrow++) {



		XSSFRow row_AddAdmin=Sheet.getRow(indexrow);

		// --->>>>> This Names is Expected TestData in the Excel Sheet

		            // FirstName - Test Data

		String firstName_TestData=row_AddAdmin.getCell(14).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="firstName" id="firstName">
		By firstNameProperty=By.id("firstName");
		WebElement firstName=driver.findElement(firstNameProperty);
		firstName.sendKeys(firstName_TestData);

		// MiddleName - Test Data
		String middleName_TestData=row_AddAdmin.getCell(15).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="middleName" id="middleName">
		By middleNameProperty=By.id("middleName");
		WebElement middleName=driver.findElement(middleNameProperty);
		middleName.sendKeys(middleName_TestData);

		// LastName - Test Data

		   String lastName_TestData=row_AddAdmin.getCell(16).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="lastName" id="lastName">
		By lastNameProperty=By.id("lastName");
		WebElement lastName=driver.findElement(lastNameProperty);
		lastName.sendKeys(lastName_TestData);

		 
		 
		  //********Enter AddName EmployeeId Automation      



		//<input class="formInputText valid" maxlength="10" type="text"
		//name="employeeId" value="0001" id="employeeId">
		     
		   By employeeIdProperty=By.id("employeeId");
		WebElement employeeId=driver.findElement(employeeIdProperty);
		String Id=employeeId.getAttribute("value");
		     
		System.out.println("the EmployId number is :-  "+Id);
		     
		Sheet.getRow(indexrow).createCell(17).setCellValue(Id);


		 //*************  Automation Save Button
		     
		    //<input type="button" class="" id="btnSave" value="Save">
		   
		    By saveProperty= By.id("btnSave");
		    WebElement  save= driver.findElement(saveProperty);
		    save.click();
		     

		//===================================================================================================================================================

		   

		//   *********** Expected Personal Details Text After Click on Save - Full Name (should be same)

		String Expect_PersonalDetailsPageText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_PersonalDetailsPageText);


		//<label for="Full_Name" class="hasTopFieldHelp">Full Name</label>
		By PersonalDetailsPage_FullNameProperty=By.className("hasTopFieldHelp");
		WebElement PersonalDetailsPage_FullName=driver.findElement(PersonalDetailsPage_FullNameProperty);

		String Actual_PersonalDetailsPageText=PersonalDetailsPage_FullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_PersonalDetailsPageText);

		if(Actual_PersonalDetailsPageText.equals(Expect_PersonalDetailsPageText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(indexrow).createCell(19).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(indexrow).createCell(19).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("FAIL");
		}


		System.out.println();
		//===================================================================================================================================================


		// --->>>>> This Names is Actual TestData in the Add Employee Page

		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving FirstName


		   
		//<input value="Madhu" type="text" name="personal[txtEmpFirstName]" class="block default editable" maxlength="30"
		//title="First Name" id="personal_txtEmpFirstName" disabled="disabled">
		 
		By afterSaveFirstNameProperty= By.id("personal_txtEmpFirstName");
		WebElement afterSaveFirstName = driver.findElement(afterSaveFirstNameProperty);
		String Actual_FirstName=afterSaveFirstName.getAttribute("value");
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving MiddleName
		 
		//<input value="Sai" type="text" name="personal[txtEmpMiddleName]" class="block default editable" maxlength="30"
		//title="Middle Name" id="personal_txtEmpMiddleName" disabled="disabled">
		     
		By afterSaveMiddleNameProperty= By.id("personal_txtEmpMiddleName");
		WebElement  afterSaveMiddleName= driver.findElement(afterSaveMiddleNameProperty);
		String Actual_MiddleName=afterSaveMiddleName.getAttribute("value");  
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving LastName
		 
		//<input value="Chandu" type="text" name="personal[txtEmpLastName]" class="block default editable" maxlength="30"
		//title="Last Name" id="personal_txtEmpLastName" disabled="disabled">
		   
		By afterSaveLastNameProperty=By.id("personal_txtEmpLastName");
		WebElement afterSaveLastName=driver.findElement(afterSaveLastNameProperty);
		String Actual_LastName=afterSaveLastName.getAttribute("value");
		 
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving EmployeeId
		 
		//<input value="0021" type="text" name="personal[txtEmployeeId]" maxlength="10" class="editable"
		//id="personal_txtEmployeeId" disabled="disabled">
		 
		   By afterSaveEmployeeIdPrperty=By.id("personal_txtEmployeeId");
		   WebElement afterSaveEmployeeId=driver.findElement(afterSaveEmployeeIdPrperty);
		String Actual_EmployeeId= afterSaveEmployeeId.getAttribute("value");
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  FristName  
		 
		if(Actual_FirstName.equals("Madhu"))
		{
		      System.out.println("After saving the FirstName are same :-  PASS");
		      Sheet.getRow(indexrow).createCell(21).setCellValue(Actual_FirstName);
		      Sheet.getRow(indexrow).createCell(22).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the FirstName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(21).setCellValue("NOT Match - "+Actual_FirstName);
		   Sheet.getRow(indexrow).createCell(22).setCellValue("FAIL");
		}
		 
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  MiddleName  

		if(Actual_MiddleName.equals("Sai"))
		{
		System.out.println("After saving the MiddleName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(23).setCellValue(Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the MiddleName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(23).setCellValue("NOT Match - "+Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  LastName  
		 
		if(Actual_LastName.equals("Chandu"))
		{
		System.out.println("After saving the LastName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(25).setCellValue(Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the LastName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(25).setCellValue("NOT Match - "+Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  EmployeeId
		 
		 
		if(Actual_EmployeeId.equals(Id))
		{
		System.out.println("After saving the EmployeeId are same :-  PASS");
		Sheet.getRow(indexrow).createCell(27).setCellValue(Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("PASS");
		   
		   
		}
		else
		{
		System.out.println("After saving the EmployeeId are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(27).setCellValue("NOT Match - "+Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("FAIL");

		}


		//...............................................................................................



		 
		//*************  Automation  Welcome Admin Button
		   
		//<a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>
		     

		welcomeAdminProperty=By.linkText("Welcome Admin");
		welcome=driver.findElement(welcomeAdminProperty);

		welcome.click();
		     
		Thread.sleep(5000);
		     
		//*************  Automation  Welcome Admin Button  
		     
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/auth/logout">Logout</a>
		     
		By logOutProperty= By.linkText("Logout");
		WebElement logOut=driver.findElement(logOutProperty);
		logOut.click();
		     


		//===================================================================================================================================================


		//Expected Text - LOGIN Panel (should be same)

		//<div id="logInPanelHeading">LOGIN Panel</div>

		expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		  // of the current webpage - identifying the LOGIN Panel



		OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(indexrow).createCell(30).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(indexrow).createCell(30).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("FAIL");
		}






		FileOutputStream Madhu=new FileOutputStream("./src/main/java/testDataResult/AddEmployee.xlsx");
		                 
		       workbook.write(Madhu);

		System.out.println();


		driver.get(addEmployeeUrlAddress);





		// UserName - Test Data

		row=Sheet.getRow(1);

		userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		   userNameProperty=By.id("txtUsername");
		userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		passwordProperty=By.name("txtPassword");
		password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		logInProperty=By.className("button");
		logIn=driver.findElement(logInProperty);
		logIn.click();




		}

		



}













}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-16 20:07:03.904
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-16 20:07:03.906
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-16 20:07:31.003
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.OrangeHrmApplication;

import org.testng.annotations.Test;

import com.utility.Log;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;


public class OrangeHrmEmpolyleListadded extends BaseTest{

	@Test 
	public void Webpage() throws IOException, InterruptedException {
		FileInputStream file=new FileInputStream("./src/main/java/testDataFiles/AddEmployee.xlsx");

		XSSFWorkbook workbook=new XSSFWorkbook(file);

		XSSFSheet Sheet=workbook.getSheet("TestData");

		int row_count=Sheet.getLastRowNum();

		System.out.println("The number of row in the Sheet is :-  "+row_count);

		int rowOfCells_Count=Sheet.getLeftCol();

		System.out.println("The number of roeOfCells in the sheet is :-  "+rowOfCells_Count);

		//===================================================================================================================================================


		//<div id="logInPanelHeading">LOGIN Panel</div>

		String expected_OrangeHrmLogInPanel="LOGIN Panel";
		Log.info("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		// of the current webpage - identifying the LOGIN Panel



		By OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		WebElement OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(1).createCell(1).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(1).createCell(1).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("FAIL");
		}

		//===================================================================================================================================================

		//Expect Title is - OrangeHRM  (should be same)

		String Expected_orangeHrmLogInPage="OrangeHRM";
		System.out.println("The OrangeHRM logIn Page title is :-  "+Expected_orangeHrmLogInPage);


		String Actual_orangenHrmLogInPageText=driver.getTitle();
		System.out.println("The OrangenHrm LogIn Page Title is :-  "+Actual_orangenHrmLogInPageText);


		if(Actual_orangenHrmLogInPageText.equals(Expected_orangeHrmLogInPage))
		{
		System.out.println("The LogIn Page Title is Match :- PASS");
		Sheet.getRow(1).createCell(4).setCellValue(Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("PASS");
		}
		else {
		System.out.println("The LogIn Page Title is NOT Match :- FAIL");
		Sheet.getRow(1).createCell(4).setCellValue("NOT Match - "+Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("FAIL");
		}


		//===================================================================================================================================================


		// UserName - Test Data

		XSSFRow row=Sheet.getRow(1);

		String userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		By userNameProperty=By.id("txtUsername");
		WebElement userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		String password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		By passwordProperty=By.name("txtPassword");
		WebElement password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		By logInProperty=By.className("button");
		WebElement logIn=driver.findElement(logInProperty);
		logIn.click();


		//===================================================================================================================================================


		 //   *********** Expected Text - Welcome (should have)

		// ---->>>>>>>>>>>>>> Performing click on the Welcome WebElement
		         
		         
		// <a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>

		String Expect_WebpageText= "Admin";
		System.out.println("The Expected OrangeHrm Home page text is Welcome  :-  "+Expect_WebpageText);


		By welcomeAdminProperty=By.linkText("Welcome Admin");
		WebElement welcome=driver.findElement(welcomeAdminProperty);


		//String actual_welcomeHrefAttributeValue=welcome.getAttribute("id");

		            //OR

		String actual_welcomeHrefAttributeValue=welcome.getText();
		System.out.println("The href Attribute value of welcome webElement is :- "+actual_welcomeHrefAttributeValue);


		//if(actual_welcomeHrefAttributeValue.equals(Expect_WebpageText))

		                 //OR

		if(actual_welcomeHrefAttributeValue.contains(Expect_WebpageText))
		{
		System.out.println("The text is Match :- PASS");
		Sheet.getRow(1).createCell(9).setCellValue(actual_welcomeHrefAttributeValue);
		Sheet.getRow(1).createCell(10).setCellValue("PASS ");
		}
		else {
		System.out.println("The text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(9).setCellValue("Not Match the title Welcome");
		Sheet.getRow(1).createCell(10).setCellValue("Not Match the webpage FAIL");
		}



		//===================================================================================================================================================


		 
		//************Automation  Header link PIM  Button

		   //<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/viewPimModule"
		//id="menu_pim_viewPimModule" class="firstLevelMenu"><b>PIM</b></a>

		By PIMButtonProperty= By.linkText("PIM");
		WebElement PIMElement= driver.findElement(PIMButtonProperty);
		       
		Actions mouseHoverOperation=new Actions(driver);
		mouseHoverOperation.moveToElement(PIMElement).build().perform();

		//************Automation  Header link Add Employee  Button
		       
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee"
		   //id="menu_pim_addEmployee">Add Employee</a>

		By AddEmployeeProperty=By.linkText("Add Employee");
		WebElement AddEmployee=driver.findElement(AddEmployeeProperty);
		AddEmployee.click();



		//===================================================================================================================================================



		//   *********** Expected AddEmployeeText - Full Name (should be same)

		String Expect_AddAdminText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_AddAdminText);

		//<label class="hasTopFieldHelp">Full Name</label>
		By fullNameProperty=By.className("hasTopFieldHelp");
		WebElement fullName=driver.findElement(fullNameProperty);

		String Actual_AddEmployeeText=fullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_AddEmployeeText);

		if(Actual_AddEmployeeText.equals(Expect_AddAdminText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(1).createCell(12).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(12).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("FAIL");
		}



		//===================================================================================================================================================
		String addEmployeeUrlAddress="http://127.0.0.1/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee";

		for(int indexrow=1; indexrow<=Sheet.getLastRowNum(); indexrow++) {



		XSSFRow row_AddAdmin=Sheet.getRow(indexrow);

		// --->>>>> This Names is Expected TestData in the Excel Sheet

		            // FirstName - Test Data

		String firstName_TestData=row_AddAdmin.getCell(14).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="firstName" id="firstName">
		By firstNameProperty=By.id("firstName");
		WebElement firstName=driver.findElement(firstNameProperty);
		firstName.sendKeys(firstName_TestData);

		// MiddleName - Test Data
		String middleName_TestData=row_AddAdmin.getCell(15).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="middleName" id="middleName">
		By middleNameProperty=By.id("middleName");
		WebElement middleName=driver.findElement(middleNameProperty);
		middleName.sendKeys(middleName_TestData);

		// LastName - Test Data

		   String lastName_TestData=row_AddAdmin.getCell(16).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="lastName" id="lastName">
		By lastNameProperty=By.id("lastName");
		WebElement lastName=driver.findElement(lastNameProperty);
		lastName.sendKeys(lastName_TestData);

		 
		 
		  //********Enter AddName EmployeeId Automation      



		//<input class="formInputText valid" maxlength="10" type="text"
		//name="employeeId" value="0001" id="employeeId">
		     
		   By employeeIdProperty=By.id("employeeId");
		WebElement employeeId=driver.findElement(employeeIdProperty);
		String Id=employeeId.getAttribute("value");
		     
		System.out.println("the EmployId number is :-  "+Id);
		     
		Sheet.getRow(indexrow).createCell(17).setCellValue(Id);


		 //*************  Automation Save Button
		     
		    //<input type="button" class="" id="btnSave" value="Save">
		   
		    By saveProperty= By.id("btnSave");
		    WebElement  save= driver.findElement(saveProperty);
		    save.click();
		     

		//===================================================================================================================================================

		   

		//   *********** Expected Personal Details Text After Click on Save - Full Name (should be same)

		String Expect_PersonalDetailsPageText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_PersonalDetailsPageText);


		//<label for="Full_Name" class="hasTopFieldHelp">Full Name</label>
		By PersonalDetailsPage_FullNameProperty=By.className("hasTopFieldHelp");
		WebElement PersonalDetailsPage_FullName=driver.findElement(PersonalDetailsPage_FullNameProperty);

		String Actual_PersonalDetailsPageText=PersonalDetailsPage_FullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_PersonalDetailsPageText);

		if(Actual_PersonalDetailsPageText.equals(Expect_PersonalDetailsPageText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(indexrow).createCell(19).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(indexrow).createCell(19).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("FAIL");
		}


		System.out.println();
		//===================================================================================================================================================


		// --->>>>> This Names is Actual TestData in the Add Employee Page

		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving FirstName


		   
		//<input value="Madhu" type="text" name="personal[txtEmpFirstName]" class="block default editable" maxlength="30"
		//title="First Name" id="personal_txtEmpFirstName" disabled="disabled">
		 
		By afterSaveFirstNameProperty= By.id("personal_txtEmpFirstName");
		WebElement afterSaveFirstName = driver.findElement(afterSaveFirstNameProperty);
		String Actual_FirstName=afterSaveFirstName.getAttribute("value");
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving MiddleName
		 
		//<input value="Sai" type="text" name="personal[txtEmpMiddleName]" class="block default editable" maxlength="30"
		//title="Middle Name" id="personal_txtEmpMiddleName" disabled="disabled">
		     
		By afterSaveMiddleNameProperty= By.id("personal_txtEmpMiddleName");
		WebElement  afterSaveMiddleName= driver.findElement(afterSaveMiddleNameProperty);
		String Actual_MiddleName=afterSaveMiddleName.getAttribute("value");  
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving LastName
		 
		//<input value="Chandu" type="text" name="personal[txtEmpLastName]" class="block default editable" maxlength="30"
		//title="Last Name" id="personal_txtEmpLastName" disabled="disabled">
		   
		By afterSaveLastNameProperty=By.id("personal_txtEmpLastName");
		WebElement afterSaveLastName=driver.findElement(afterSaveLastNameProperty);
		String Actual_LastName=afterSaveLastName.getAttribute("value");
		 
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving EmployeeId
		 
		//<input value="0021" type="text" name="personal[txtEmployeeId]" maxlength="10" class="editable"
		//id="personal_txtEmployeeId" disabled="disabled">
		 
		   By afterSaveEmployeeIdPrperty=By.id("personal_txtEmployeeId");
		   WebElement afterSaveEmployeeId=driver.findElement(afterSaveEmployeeIdPrperty);
		String Actual_EmployeeId= afterSaveEmployeeId.getAttribute("value");
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  FristName  
		 
		if(Actual_FirstName.equals("Madhu"))
		{
		      System.out.println("After saving the FirstName are same :-  PASS");
		      Sheet.getRow(indexrow).createCell(21).setCellValue(Actual_FirstName);
		      Sheet.getRow(indexrow).createCell(22).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the FirstName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(21).setCellValue("NOT Match - "+Actual_FirstName);
		   Sheet.getRow(indexrow).createCell(22).setCellValue("FAIL");
		}
		 
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  MiddleName  

		if(Actual_MiddleName.equals("Sai"))
		{
		System.out.println("After saving the MiddleName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(23).setCellValue(Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the MiddleName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(23).setCellValue("NOT Match - "+Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  LastName  
		 
		if(Actual_LastName.equals("Chandu"))
		{
		System.out.println("After saving the LastName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(25).setCellValue(Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the LastName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(25).setCellValue("NOT Match - "+Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  EmployeeId
		 
		 
		if(Actual_EmployeeId.equals(Id))
		{
		System.out.println("After saving the EmployeeId are same :-  PASS");
		Sheet.getRow(indexrow).createCell(27).setCellValue(Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("PASS");
		   
		   
		}
		else
		{
		System.out.println("After saving the EmployeeId are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(27).setCellValue("NOT Match - "+Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("FAIL");

		}


		//...............................................................................................



		 
		//*************  Automation  Welcome Admin Button
		   
		//<a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>
		     

		welcomeAdminProperty=By.linkText("Welcome Admin");
		welcome=driver.findElement(welcomeAdminProperty);

		welcome.click();
		     
		Thread.sleep(5000);
		     
		//*************  Automation  Welcome Admin Button  
		     
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/auth/logout">Logout</a>
		     
		By logOutProperty= By.linkText("Logout");
		WebElement logOut=driver.findElement(logOutProperty);
		logOut.click();
		     


		//===================================================================================================================================================


		//Expected Text - LOGIN Panel (should be same)

		//<div id="logInPanelHeading">LOGIN Panel</div>

		expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		  // of the current webpage - identifying the LOGIN Panel



		OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(indexrow).createCell(30).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(indexrow).createCell(30).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("FAIL");
		}






		FileOutputStream Madhu=new FileOutputStream("./src/main/java/testDataResult/AddEmployee.xlsx");
		                 
		       workbook.write(Madhu);

		System.out.println();


		driver.get(addEmployeeUrlAddress);





		// UserName - Test Data

		row=Sheet.getRow(1);

		userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		   userNameProperty=By.id("txtUsername");
		userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		passwordProperty=By.name("txtPassword");
		password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		logInProperty=By.className("button");
		logIn=driver.findElement(logInProperty);
		logIn.click();




		}

		



}













}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-16 20:07:31.004
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-16 20:07:31.006
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-16 20:07:31.061
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.OrangeHrmApplication;

import org.testng.annotations.Test;

import com.utility.Log;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;


public class OrangeHrmEmpolyleListadded extends BaseTest{

	@Test 
	public void Webpage() throws IOException, InterruptedException {
		FileInputStream file=new FileInputStream("./src/main/java/testDataFiles/AddEmployee.xlsx");

		XSSFWorkbook workbook=new XSSFWorkbook(file);

		XSSFSheet Sheet=workbook.getSheet("TestData");

		int row_count=Sheet.getLastRowNum();

		System.out.println("The number of row in the Sheet is :-  "+row_count);

		int rowOfCells_Count=Sheet.getLeftCol();

		System.out.println("The number of roeOfCells in the sheet is :-  "+rowOfCells_Count);

		//===================================================================================================================================================


		//<div id="logInPanelHeading">LOGIN Panel</div>

		String expected_OrangeHrmLogInPanel="LOGIN Panel";
		Log.info("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		// of the current webpage - identifying the LOGIN Panel



		By OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		WebElement OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(1).createCell(1).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(1).createCell(1).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("FAIL");
		}

		//===================================================================================================================================================

		//Expect Title is - OrangeHRM  (should be same)

		String Expected_orangeHrmLogInPage="OrangeHRM";
		System.out.println("The OrangeHRM logIn Page title is :-  "+Expected_orangeHrmLogInPage);


		String Actual_orangenHrmLogInPageText=driver.getTitle();
		System.out.println("The OrangenHrm LogIn Page Title is :-  "+Actual_orangenHrmLogInPageText);


		if(Actual_orangenHrmLogInPageText.equals(Expected_orangeHrmLogInPage))
		{
		System.out.println("The LogIn Page Title is Match :- PASS");
		Sheet.getRow(1).createCell(4).setCellValue(Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("PASS");
		}
		else {
		System.out.println("The LogIn Page Title is NOT Match :- FAIL");
		Sheet.getRow(1).createCell(4).setCellValue("NOT Match - "+Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("FAIL");
		}


		//===================================================================================================================================================


		// UserName - Test Data

		XSSFRow row=Sheet.getRow(1);

		String userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		By userNameProperty=By.id("txtUsername");
		WebElement userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		String password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		By passwordProperty=By.name("txtPassword");
		WebElement password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		By logInProperty=By.className("button");
		WebElement logIn=driver.findElement(logInProperty);
		logIn.click();


		//===================================================================================================================================================


		 //   *********** Expected Text - Welcome (should have)

		// ---->>>>>>>>>>>>>> Performing click on the Welcome WebElement
		         
		         
		// <a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>

		String Expect_WebpageText= "Admin";
		System.out.println("The Expected OrangeHrm Home page text is Welcome  :-  "+Expect_WebpageText);


		By welcomeAdminProperty=By.linkText("Welcome Admin");
		WebElement welcome=driver.findElement(welcomeAdminProperty);


		//String actual_welcomeHrefAttributeValue=welcome.getAttribute("id");

		            //OR

		String actual_welcomeHrefAttributeValue=welcome.getText();
		System.out.println("The href Attribute value of welcome webElement is :- "+actual_welcomeHrefAttributeValue);


		//if(actual_welcomeHrefAttributeValue.equals(Expect_WebpageText))

		                 //OR

		if(actual_welcomeHrefAttributeValue.contains(Expect_WebpageText))
		{
		System.out.println("The text is Match :- PASS");
		Sheet.getRow(1).createCell(9).setCellValue(actual_welcomeHrefAttributeValue);
		Sheet.getRow(1).createCell(10).setCellValue("PASS ");
		}
		else {
		System.out.println("The text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(9).setCellValue("Not Match the title Welcome");
		Sheet.getRow(1).createCell(10).setCellValue("Not Match the webpage FAIL");
		}



		//===================================================================================================================================================


		 
		//************Automation  Header link PIM  Button

		   //<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/viewPimModule"
		//id="menu_pim_viewPimModule" class="firstLevelMenu"><b>PIM</b></a>

		By PIMButtonProperty= By.linkText("PIM");
		WebElement PIMElement= driver.findElement(PIMButtonProperty);
		       
		Actions mouseHoverOperation=new Actions(driver);
		mouseHoverOperation.moveToElement(PIMElement).build().perform();

		//************Automation  Header link Add Employee  Button
		       
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee"
		   //id="menu_pim_addEmployee">Add Employee</a>

		By AddEmployeeProperty=By.linkText("Add Employee");
		WebElement AddEmployee=driver.findElement(AddEmployeeProperty);
		AddEmployee.click();



		//===================================================================================================================================================



		//   *********** Expected AddEmployeeText - Full Name (should be same)

		String Expect_AddAdminText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_AddAdminText);

		//<label class="hasTopFieldHelp">Full Name</label>
		By fullNameProperty=By.className("hasTopFieldHelp");
		WebElement fullName=driver.findElement(fullNameProperty);

		String Actual_AddEmployeeText=fullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_AddEmployeeText);

		if(Actual_AddEmployeeText.equals(Expect_AddAdminText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(1).createCell(12).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(12).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("FAIL");
		}



		//===================================================================================================================================================
		String addEmployeeUrlAddress="http://127.0.0.1/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee";

		for(int indexrow=1; indexrow<=Sheet.getLastRowNum(); indexrow++) {



		XSSFRow row_AddAdmin=Sheet.getRow(indexrow);

		// --->>>>> This Names is Expected TestData in the Excel Sheet

		            // FirstName - Test Data

		String firstName_TestData=row_AddAdmin.getCell(14).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="firstName" id="firstName">
		By firstNameProperty=By.id("firstName");
		WebElement firstName=driver.findElement(firstNameProperty);
		firstName.sendKeys(firstName_TestData);

		// MiddleName - Test Data
		String middleName_TestData=row_AddAdmin.getCell(15).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="middleName" id="middleName">
		By middleNameProperty=By.id("middleName");
		WebElement middleName=driver.findElement(middleNameProperty);
		middleName.sendKeys(middleName_TestData);

		// LastName - Test Data

		   String lastName_TestData=row_AddAdmin.getCell(16).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="lastName" id="lastName">
		By lastNameProperty=By.id("lastName");
		WebElement lastName=driver.findElement(lastNameProperty);
		lastName.sendKeys(lastName_TestData);

		 
		 
		  //********Enter AddName EmployeeId Automation      



		//<input class="formInputText valid" maxlength="10" type="text"
		//name="employeeId" value="0001" id="employeeId">
		     
		   By employeeIdProperty=By.id("employeeId");
		WebElement employeeId=driver.findElement(employeeIdProperty);
		String Id=employeeId.getAttribute("value");
		     
		System.out.println("the EmployId number is :-  "+Id);
		     
		Sheet.getRow(indexrow).createCell(17).setCellValue(Id);


		 //*************  Automation Save Button
		     
		    //<input type="button" class="" id="btnSave" value="Save">
		   
		    By saveProperty= By.id("btnSave");
		    WebElement  save= driver.findElement(saveProperty);
		    save.click();
		     

		//===================================================================================================================================================

		   

		//   *********** Expected Personal Details Text After Click on Save - Full Name (should be same)

		String Expect_PersonalDetailsPageText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_PersonalDetailsPageText);


		//<label for="Full_Name" class="hasTopFieldHelp">Full Name</label>
		By PersonalDetailsPage_FullNameProperty=By.className("hasTopFieldHelp");
		WebElement PersonalDetailsPage_FullName=driver.findElement(PersonalDetailsPage_FullNameProperty);

		String Actual_PersonalDetailsPageText=PersonalDetailsPage_FullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_PersonalDetailsPageText);

		if(Actual_PersonalDetailsPageText.equals(Expect_PersonalDetailsPageText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(indexrow).createCell(19).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(indexrow).createCell(19).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("FAIL");
		}


		System.out.println();
		//===================================================================================================================================================


		// --->>>>> This Names is Actual TestData in the Add Employee Page

		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving FirstName


		   
		//<input value="Madhu" type="text" name="personal[txtEmpFirstName]" class="block default editable" maxlength="30"
		//title="First Name" id="personal_txtEmpFirstName" disabled="disabled">
		 
		By afterSaveFirstNameProperty= By.id("personal_txtEmpFirstName");
		WebElement afterSaveFirstName = driver.findElement(afterSaveFirstNameProperty);
		String Actual_FirstName=afterSaveFirstName.getAttribute("value");
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving MiddleName
		 
		//<input value="Sai" type="text" name="personal[txtEmpMiddleName]" class="block default editable" maxlength="30"
		//title="Middle Name" id="personal_txtEmpMiddleName" disabled="disabled">
		     
		By afterSaveMiddleNameProperty= By.id("personal_txtEmpMiddleName");
		WebElement  afterSaveMiddleName= driver.findElement(afterSaveMiddleNameProperty);
		String Actual_MiddleName=afterSaveMiddleName.getAttribute("value");  
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving LastName
		 
		//<input value="Chandu" type="text" name="personal[txtEmpLastName]" class="block default editable" maxlength="30"
		//title="Last Name" id="personal_txtEmpLastName" disabled="disabled">
		   
		By afterSaveLastNameProperty=By.id("personal_txtEmpLastName");
		WebElement afterSaveLastName=driver.findElement(afterSaveLastNameProperty);
		String Actual_LastName=afterSaveLastName.getAttribute("value");
		 
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving EmployeeId
		 
		//<input value="0021" type="text" name="personal[txtEmployeeId]" maxlength="10" class="editable"
		//id="personal_txtEmployeeId" disabled="disabled">
		 
		   By afterSaveEmployeeIdPrperty=By.id("personal_txtEmployeeId");
		   WebElement afterSaveEmployeeId=driver.findElement(afterSaveEmployeeIdPrperty);
		String Actual_EmployeeId= afterSaveEmployeeId.getAttribute("value");
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  FristName  
		 
		if(Actual_FirstName.equals("Madhu"))
		{
		      System.out.println("After saving the FirstName are same :-  PASS");
		      Sheet.getRow(indexrow).createCell(21).setCellValue(Actual_FirstName);
		      Sheet.getRow(indexrow).createCell(22).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the FirstName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(21).setCellValue("NOT Match - "+Actual_FirstName);
		   Sheet.getRow(indexrow).createCell(22).setCellValue("FAIL");
		}
		 
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  MiddleName  

		if(Actual_MiddleName.equals("Sai"))
		{
		System.out.println("After saving the MiddleName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(23).setCellValue(Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the MiddleName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(23).setCellValue("NOT Match - "+Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  LastName  
		 
		if(Actual_LastName.equals("Chandu"))
		{
		System.out.println("After saving the LastName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(25).setCellValue(Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the LastName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(25).setCellValue("NOT Match - "+Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  EmployeeId
		 
		 
		if(Actual_EmployeeId.equals(Id))
		{
		System.out.println("After saving the EmployeeId are same :-  PASS");
		Sheet.getRow(indexrow).createCell(27).setCellValue(Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("PASS");
		   
		   
		}
		else
		{
		System.out.println("After saving the EmployeeId are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(27).setCellValue("NOT Match - "+Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("FAIL");

		}


		//...............................................................................................



		 
		//*************  Automation  Welcome Admin Button
		   
		//<a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>
		     

		welcomeAdminProperty=By.linkText("Welcome Admin");
		welcome=driver.findElement(welcomeAdminProperty);

		welcome.click();
		     
		Thread.sleep(5000);
		     
		//*************  Automation  Welcome Admin Button  
		     
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/auth/logout">Logout</a>
		     
		By logOutProperty= By.linkText("Logout");
		WebElement logOut=driver.findElement(logOutProperty);
		logOut.click();
		     


		//===================================================================================================================================================


		//Expected Text - LOGIN Panel (should be same)

		//<div id="logInPanelHeading">LOGIN Panel</div>

		expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		  // of the current webpage - identifying the LOGIN Panel



		OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(indexrow).createCell(30).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(indexrow).createCell(30).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("FAIL");
		}






		FileOutputStream Madhu=new FileOutputStream("./src/main/java/testDataResult/AddEmployee.xlsx");
		                 
		       workbook.write(Madhu);

		System.out.println();


		driver.get(addEmployeeUrlAddress);





		// UserName - Test Data

		row=Sheet.getRow(1);

		userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		   userNameProperty=By.id("txtUsername");
		userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		passwordProperty=By.name("txtPassword");
		password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		logInProperty=By.className("button");
		logIn=driver.findElement(logInProperty);
		logIn.click();




		}

		



}













}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-16 20:07:31.062
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-16 20:07:31.063
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-16 20:09:17.295
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.OrangeHrmApplication;

import org.testng.annotations.Test;

import com.utility.Log;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;


public class OrangeHrmEmpolyleListadded extends BaseTest{

	@Test 
	public void Webpage() throws IOException, InterruptedException {
		FileInputStream file=new FileInputStream("./src/main/java/testDataFiles/AddEmployee.xlsx");

		XSSFWorkbook workbook=new XSSFWorkbook(file);

		XSSFSheet Sheet=workbook.getSheet("TestData");

		int row_count=Sheet.getLastRowNum();

		System.out.println("The number of row in the Sheet is :-  "+row_count);

		int rowOfCells_Count=Sheet.getLeftCol();

		System.out.println("The number of roeOfCells in the sheet is :-  "+rowOfCells_Count);

		//===================================================================================================================================================


		//<div id="logInPanelHeading">LOGIN Panel</div>

		String expected_OrangeHrmLogInPanel="LOGIN Panel";
		Log.info("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		// of the current webpage - identifying the LOGIN Panel



		By OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		WebElement OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);
		String actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		Log.info("The Actual OrangeHrm LogIn Page Title is :- "+ actual_OrangeHrmLogInPanel);


		
		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
			Log.info("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(1).createCell(1).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(1).createCell(1).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("FAIL");
		}

		//===================================================================================================================================================

		//Expect Title is - OrangeHRM  (should be same)

		String Expected_orangeHrmLogInPage="OrangeHRM";
		("The OrangeHRM logIn Page title is :-  "+Expected_orangeHrmLogInPage);


		String Actual_orangenHrmLogInPageText=driver.getTitle();
		System.out.println("The OrangenHrm LogIn Page Title is :-  "+Actual_orangenHrmLogInPageText);


		if(Actual_orangenHrmLogInPageText.equals(Expected_orangeHrmLogInPage))
		{
		System.out.println("The LogIn Page Title is Match :- PASS");
		Sheet.getRow(1).createCell(4).setCellValue(Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("PASS");
		}
		else {
		System.out.println("The LogIn Page Title is NOT Match :- FAIL");
		Sheet.getRow(1).createCell(4).setCellValue("NOT Match - "+Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("FAIL");
		}


		//===================================================================================================================================================


		// UserName - Test Data

		XSSFRow row=Sheet.getRow(1);

		String userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		By userNameProperty=By.id("txtUsername");
		WebElement userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		String password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		By passwordProperty=By.name("txtPassword");
		WebElement password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		By logInProperty=By.className("button");
		WebElement logIn=driver.findElement(logInProperty);
		logIn.click();


		//===================================================================================================================================================


		 //   *********** Expected Text - Welcome (should have)

		// ---->>>>>>>>>>>>>> Performing click on the Welcome WebElement
		         
		         
		// <a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>

		String Expect_WebpageText= "Admin";
		System.out.println("The Expected OrangeHrm Home page text is Welcome  :-  "+Expect_WebpageText);


		By welcomeAdminProperty=By.linkText("Welcome Admin");
		WebElement welcome=driver.findElement(welcomeAdminProperty);


		//String actual_welcomeHrefAttributeValue=welcome.getAttribute("id");

		            //OR

		String actual_welcomeHrefAttributeValue=welcome.getText();
		System.out.println("The href Attribute value of welcome webElement is :- "+actual_welcomeHrefAttributeValue);


		//if(actual_welcomeHrefAttributeValue.equals(Expect_WebpageText))

		                 //OR

		if(actual_welcomeHrefAttributeValue.contains(Expect_WebpageText))
		{
		System.out.println("The text is Match :- PASS");
		Sheet.getRow(1).createCell(9).setCellValue(actual_welcomeHrefAttributeValue);
		Sheet.getRow(1).createCell(10).setCellValue("PASS ");
		}
		else {
		System.out.println("The text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(9).setCellValue("Not Match the title Welcome");
		Sheet.getRow(1).createCell(10).setCellValue("Not Match the webpage FAIL");
		}



		//===================================================================================================================================================


		 
		//************Automation  Header link PIM  Button

		   //<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/viewPimModule"
		//id="menu_pim_viewPimModule" class="firstLevelMenu"><b>PIM</b></a>

		By PIMButtonProperty= By.linkText("PIM");
		WebElement PIMElement= driver.findElement(PIMButtonProperty);
		       
		Actions mouseHoverOperation=new Actions(driver);
		mouseHoverOperation.moveToElement(PIMElement).build().perform();

		//************Automation  Header link Add Employee  Button
		       
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee"
		   //id="menu_pim_addEmployee">Add Employee</a>

		By AddEmployeeProperty=By.linkText("Add Employee");
		WebElement AddEmployee=driver.findElement(AddEmployeeProperty);
		AddEmployee.click();



		//===================================================================================================================================================



		//   *********** Expected AddEmployeeText - Full Name (should be same)

		String Expect_AddAdminText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_AddAdminText);

		//<label class="hasTopFieldHelp">Full Name</label>
		By fullNameProperty=By.className("hasTopFieldHelp");
		WebElement fullName=driver.findElement(fullNameProperty);

		String Actual_AddEmployeeText=fullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_AddEmployeeText);

		if(Actual_AddEmployeeText.equals(Expect_AddAdminText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(1).createCell(12).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(12).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("FAIL");
		}



		//===================================================================================================================================================
		String addEmployeeUrlAddress="http://127.0.0.1/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee";

		for(int indexrow=1; indexrow<=Sheet.getLastRowNum(); indexrow++) {



		XSSFRow row_AddAdmin=Sheet.getRow(indexrow);

		// --->>>>> This Names is Expected TestData in the Excel Sheet

		            // FirstName - Test Data

		String firstName_TestData=row_AddAdmin.getCell(14).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="firstName" id="firstName">
		By firstNameProperty=By.id("firstName");
		WebElement firstName=driver.findElement(firstNameProperty);
		firstName.sendKeys(firstName_TestData);

		// MiddleName - Test Data
		String middleName_TestData=row_AddAdmin.getCell(15).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="middleName" id="middleName">
		By middleNameProperty=By.id("middleName");
		WebElement middleName=driver.findElement(middleNameProperty);
		middleName.sendKeys(middleName_TestData);

		// LastName - Test Data

		   String lastName_TestData=row_AddAdmin.getCell(16).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="lastName" id="lastName">
		By lastNameProperty=By.id("lastName");
		WebElement lastName=driver.findElement(lastNameProperty);
		lastName.sendKeys(lastName_TestData);

		 
		 
		  //********Enter AddName EmployeeId Automation      



		//<input class="formInputText valid" maxlength="10" type="text"
		//name="employeeId" value="0001" id="employeeId">
		     
		   By employeeIdProperty=By.id("employeeId");
		WebElement employeeId=driver.findElement(employeeIdProperty);
		String Id=employeeId.getAttribute("value");
		     
		System.out.println("the EmployId number is :-  "+Id);
		     
		Sheet.getRow(indexrow).createCell(17).setCellValue(Id);


		 //*************  Automation Save Button
		     
		    //<input type="button" class="" id="btnSave" value="Save">
		   
		    By saveProperty= By.id("btnSave");
		    WebElement  save= driver.findElement(saveProperty);
		    save.click();
		     

		//===================================================================================================================================================

		   

		//   *********** Expected Personal Details Text After Click on Save - Full Name (should be same)

		String Expect_PersonalDetailsPageText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_PersonalDetailsPageText);


		//<label for="Full_Name" class="hasTopFieldHelp">Full Name</label>
		By PersonalDetailsPage_FullNameProperty=By.className("hasTopFieldHelp");
		WebElement PersonalDetailsPage_FullName=driver.findElement(PersonalDetailsPage_FullNameProperty);

		String Actual_PersonalDetailsPageText=PersonalDetailsPage_FullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_PersonalDetailsPageText);

		if(Actual_PersonalDetailsPageText.equals(Expect_PersonalDetailsPageText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(indexrow).createCell(19).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(indexrow).createCell(19).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("FAIL");
		}


		System.out.println();
		//===================================================================================================================================================


		// --->>>>> This Names is Actual TestData in the Add Employee Page

		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving FirstName


		   
		//<input value="Madhu" type="text" name="personal[txtEmpFirstName]" class="block default editable" maxlength="30"
		//title="First Name" id="personal_txtEmpFirstName" disabled="disabled">
		 
		By afterSaveFirstNameProperty= By.id("personal_txtEmpFirstName");
		WebElement afterSaveFirstName = driver.findElement(afterSaveFirstNameProperty);
		String Actual_FirstName=afterSaveFirstName.getAttribute("value");
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving MiddleName
		 
		//<input value="Sai" type="text" name="personal[txtEmpMiddleName]" class="block default editable" maxlength="30"
		//title="Middle Name" id="personal_txtEmpMiddleName" disabled="disabled">
		     
		By afterSaveMiddleNameProperty= By.id("personal_txtEmpMiddleName");
		WebElement  afterSaveMiddleName= driver.findElement(afterSaveMiddleNameProperty);
		String Actual_MiddleName=afterSaveMiddleName.getAttribute("value");  
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving LastName
		 
		//<input value="Chandu" type="text" name="personal[txtEmpLastName]" class="block default editable" maxlength="30"
		//title="Last Name" id="personal_txtEmpLastName" disabled="disabled">
		   
		By afterSaveLastNameProperty=By.id("personal_txtEmpLastName");
		WebElement afterSaveLastName=driver.findElement(afterSaveLastNameProperty);
		String Actual_LastName=afterSaveLastName.getAttribute("value");
		 
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving EmployeeId
		 
		//<input value="0021" type="text" name="personal[txtEmployeeId]" maxlength="10" class="editable"
		//id="personal_txtEmployeeId" disabled="disabled">
		 
		   By afterSaveEmployeeIdPrperty=By.id("personal_txtEmployeeId");
		   WebElement afterSaveEmployeeId=driver.findElement(afterSaveEmployeeIdPrperty);
		String Actual_EmployeeId= afterSaveEmployeeId.getAttribute("value");
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  FristName  
		 
		if(Actual_FirstName.equals("Madhu"))
		{
		      System.out.println("After saving the FirstName are same :-  PASS");
		      Sheet.getRow(indexrow).createCell(21).setCellValue(Actual_FirstName);
		      Sheet.getRow(indexrow).createCell(22).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the FirstName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(21).setCellValue("NOT Match - "+Actual_FirstName);
		   Sheet.getRow(indexrow).createCell(22).setCellValue("FAIL");
		}
		 
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  MiddleName  

		if(Actual_MiddleName.equals("Sai"))
		{
		System.out.println("After saving the MiddleName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(23).setCellValue(Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the MiddleName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(23).setCellValue("NOT Match - "+Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  LastName  
		 
		if(Actual_LastName.equals("Chandu"))
		{
		System.out.println("After saving the LastName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(25).setCellValue(Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the LastName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(25).setCellValue("NOT Match - "+Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  EmployeeId
		 
		 
		if(Actual_EmployeeId.equals(Id))
		{
		System.out.println("After saving the EmployeeId are same :-  PASS");
		Sheet.getRow(indexrow).createCell(27).setCellValue(Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("PASS");
		   
		   
		}
		else
		{
		System.out.println("After saving the EmployeeId are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(27).setCellValue("NOT Match - "+Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("FAIL");

		}


		//...............................................................................................



		 
		//*************  Automation  Welcome Admin Button
		   
		//<a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>
		     

		welcomeAdminProperty=By.linkText("Welcome Admin");
		welcome=driver.findElement(welcomeAdminProperty);

		welcome.click();
		     
		Thread.sleep(5000);
		     
		//*************  Automation  Welcome Admin Button  
		     
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/auth/logout">Logout</a>
		     
		By logOutProperty= By.linkText("Logout");
		WebElement logOut=driver.findElement(logOutProperty);
		logOut.click();
		     


		//===================================================================================================================================================


		//Expected Text - LOGIN Panel (should be same)

		//<div id="logInPanelHeading">LOGIN Panel</div>

		expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		  // of the current webpage - identifying the LOGIN Panel



		OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(indexrow).createCell(30).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(indexrow).createCell(30).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("FAIL");
		}






		FileOutputStream Madhu=new FileOutputStream("./src/main/java/testDataResult/AddEmployee.xlsx");
		                 
		       workbook.write(Madhu);

		System.out.println();


		driver.get(addEmployeeUrlAddress);





		// UserName - Test Data

		row=Sheet.getRow(1);

		userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		   userNameProperty=By.id("txtUsername");
		userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		passwordProperty=By.name("txtPassword");
		password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		logInProperty=By.className("button");
		logIn=driver.findElement(logInProperty);
		logIn.click();




		}

		



}













}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-16 20:09:17.296
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-16 20:09:17.297
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-16 20:09:17.311
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.OrangeHrmApplication;

import org.testng.annotations.Test;

import com.utility.Log;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;


public class OrangeHrmEmpolyleListadded extends BaseTest{

	@Test 
	public void Webpage() throws IOException, InterruptedException {
		FileInputStream file=new FileInputStream("./src/main/java/testDataFiles/AddEmployee.xlsx");

		XSSFWorkbook workbook=new XSSFWorkbook(file);

		XSSFSheet Sheet=workbook.getSheet("TestData");

		int row_count=Sheet.getLastRowNum();

		System.out.println("The number of row in the Sheet is :-  "+row_count);

		int rowOfCells_Count=Sheet.getLeftCol();

		System.out.println("The number of roeOfCells in the sheet is :-  "+rowOfCells_Count);

		//===================================================================================================================================================


		//<div id="logInPanelHeading">LOGIN Panel</div>

		String expected_OrangeHrmLogInPanel="LOGIN Panel";
		Log.info("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		// of the current webpage - identifying the LOGIN Panel



		By OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		WebElement OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);
		String actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		Log.info("The Actual OrangeHrm LogIn Page Title is :- "+ actual_OrangeHrmLogInPanel);


		
		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
			Log.info("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(1).createCell(1).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(1).createCell(1).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("FAIL");
		}

		//===================================================================================================================================================

		//Expect Title is - OrangeHRM  (should be same)

		String Expected_orangeHrmLogInPage="OrangeHRM";
		("The OrangeHRM logIn Page title is :-  "+Expected_orangeHrmLogInPage);


		String Actual_orangenHrmLogInPageText=driver.getTitle();
		System.out.println("The OrangenHrm LogIn Page Title is :-  "+Actual_orangenHrmLogInPageText);


		if(Actual_orangenHrmLogInPageText.equals(Expected_orangeHrmLogInPage))
		{
		System.out.println("The LogIn Page Title is Match :- PASS");
		Sheet.getRow(1).createCell(4).setCellValue(Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("PASS");
		}
		else {
		System.out.println("The LogIn Page Title is NOT Match :- FAIL");
		Sheet.getRow(1).createCell(4).setCellValue("NOT Match - "+Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("FAIL");
		}


		//===================================================================================================================================================


		// UserName - Test Data

		XSSFRow row=Sheet.getRow(1);

		String userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		By userNameProperty=By.id("txtUsername");
		WebElement userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		String password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		By passwordProperty=By.name("txtPassword");
		WebElement password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		By logInProperty=By.className("button");
		WebElement logIn=driver.findElement(logInProperty);
		logIn.click();


		//===================================================================================================================================================


		 //   *********** Expected Text - Welcome (should have)

		// ---->>>>>>>>>>>>>> Performing click on the Welcome WebElement
		         
		         
		// <a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>

		String Expect_WebpageText= "Admin";
		System.out.println("The Expected OrangeHrm Home page text is Welcome  :-  "+Expect_WebpageText);


		By welcomeAdminProperty=By.linkText("Welcome Admin");
		WebElement welcome=driver.findElement(welcomeAdminProperty);


		//String actual_welcomeHrefAttributeValue=welcome.getAttribute("id");

		            //OR

		String actual_welcomeHrefAttributeValue=welcome.getText();
		System.out.println("The href Attribute value of welcome webElement is :- "+actual_welcomeHrefAttributeValue);


		//if(actual_welcomeHrefAttributeValue.equals(Expect_WebpageText))

		                 //OR

		if(actual_welcomeHrefAttributeValue.contains(Expect_WebpageText))
		{
		System.out.println("The text is Match :- PASS");
		Sheet.getRow(1).createCell(9).setCellValue(actual_welcomeHrefAttributeValue);
		Sheet.getRow(1).createCell(10).setCellValue("PASS ");
		}
		else {
		System.out.println("The text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(9).setCellValue("Not Match the title Welcome");
		Sheet.getRow(1).createCell(10).setCellValue("Not Match the webpage FAIL");
		}



		//===================================================================================================================================================


		 
		//************Automation  Header link PIM  Button

		   //<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/viewPimModule"
		//id="menu_pim_viewPimModule" class="firstLevelMenu"><b>PIM</b></a>

		By PIMButtonProperty= By.linkText("PIM");
		WebElement PIMElement= driver.findElement(PIMButtonProperty);
		       
		Actions mouseHoverOperation=new Actions(driver);
		mouseHoverOperation.moveToElement(PIMElement).build().perform();

		//************Automation  Header link Add Employee  Button
		       
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee"
		   //id="menu_pim_addEmployee">Add Employee</a>

		By AddEmployeeProperty=By.linkText("Add Employee");
		WebElement AddEmployee=driver.findElement(AddEmployeeProperty);
		AddEmployee.click();



		//===================================================================================================================================================



		//   *********** Expected AddEmployeeText - Full Name (should be same)

		String Expect_AddAdminText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_AddAdminText);

		//<label class="hasTopFieldHelp">Full Name</label>
		By fullNameProperty=By.className("hasTopFieldHelp");
		WebElement fullName=driver.findElement(fullNameProperty);

		String Actual_AddEmployeeText=fullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_AddEmployeeText);

		if(Actual_AddEmployeeText.equals(Expect_AddAdminText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(1).createCell(12).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(12).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("FAIL");
		}



		//===================================================================================================================================================
		String addEmployeeUrlAddress="http://127.0.0.1/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee";

		for(int indexrow=1; indexrow<=Sheet.getLastRowNum(); indexrow++) {



		XSSFRow row_AddAdmin=Sheet.getRow(indexrow);

		// --->>>>> This Names is Expected TestData in the Excel Sheet

		            // FirstName - Test Data

		String firstName_TestData=row_AddAdmin.getCell(14).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="firstName" id="firstName">
		By firstNameProperty=By.id("firstName");
		WebElement firstName=driver.findElement(firstNameProperty);
		firstName.sendKeys(firstName_TestData);

		// MiddleName - Test Data
		String middleName_TestData=row_AddAdmin.getCell(15).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="middleName" id="middleName">
		By middleNameProperty=By.id("middleName");
		WebElement middleName=driver.findElement(middleNameProperty);
		middleName.sendKeys(middleName_TestData);

		// LastName - Test Data

		   String lastName_TestData=row_AddAdmin.getCell(16).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="lastName" id="lastName">
		By lastNameProperty=By.id("lastName");
		WebElement lastName=driver.findElement(lastNameProperty);
		lastName.sendKeys(lastName_TestData);

		 
		 
		  //********Enter AddName EmployeeId Automation      



		//<input class="formInputText valid" maxlength="10" type="text"
		//name="employeeId" value="0001" id="employeeId">
		     
		   By employeeIdProperty=By.id("employeeId");
		WebElement employeeId=driver.findElement(employeeIdProperty);
		String Id=employeeId.getAttribute("value");
		     
		System.out.println("the EmployId number is :-  "+Id);
		     
		Sheet.getRow(indexrow).createCell(17).setCellValue(Id);


		 //*************  Automation Save Button
		     
		    //<input type="button" class="" id="btnSave" value="Save">
		   
		    By saveProperty= By.id("btnSave");
		    WebElement  save= driver.findElement(saveProperty);
		    save.click();
		     

		//===================================================================================================================================================

		   

		//   *********** Expected Personal Details Text After Click on Save - Full Name (should be same)

		String Expect_PersonalDetailsPageText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_PersonalDetailsPageText);


		//<label for="Full_Name" class="hasTopFieldHelp">Full Name</label>
		By PersonalDetailsPage_FullNameProperty=By.className("hasTopFieldHelp");
		WebElement PersonalDetailsPage_FullName=driver.findElement(PersonalDetailsPage_FullNameProperty);

		String Actual_PersonalDetailsPageText=PersonalDetailsPage_FullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_PersonalDetailsPageText);

		if(Actual_PersonalDetailsPageText.equals(Expect_PersonalDetailsPageText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(indexrow).createCell(19).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(indexrow).createCell(19).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("FAIL");
		}


		System.out.println();
		//===================================================================================================================================================


		// --->>>>> This Names is Actual TestData in the Add Employee Page

		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving FirstName


		   
		//<input value="Madhu" type="text" name="personal[txtEmpFirstName]" class="block default editable" maxlength="30"
		//title="First Name" id="personal_txtEmpFirstName" disabled="disabled">
		 
		By afterSaveFirstNameProperty= By.id("personal_txtEmpFirstName");
		WebElement afterSaveFirstName = driver.findElement(afterSaveFirstNameProperty);
		String Actual_FirstName=afterSaveFirstName.getAttribute("value");
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving MiddleName
		 
		//<input value="Sai" type="text" name="personal[txtEmpMiddleName]" class="block default editable" maxlength="30"
		//title="Middle Name" id="personal_txtEmpMiddleName" disabled="disabled">
		     
		By afterSaveMiddleNameProperty= By.id("personal_txtEmpMiddleName");
		WebElement  afterSaveMiddleName= driver.findElement(afterSaveMiddleNameProperty);
		String Actual_MiddleName=afterSaveMiddleName.getAttribute("value");  
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving LastName
		 
		//<input value="Chandu" type="text" name="personal[txtEmpLastName]" class="block default editable" maxlength="30"
		//title="Last Name" id="personal_txtEmpLastName" disabled="disabled">
		   
		By afterSaveLastNameProperty=By.id("personal_txtEmpLastName");
		WebElement afterSaveLastName=driver.findElement(afterSaveLastNameProperty);
		String Actual_LastName=afterSaveLastName.getAttribute("value");
		 
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving EmployeeId
		 
		//<input value="0021" type="text" name="personal[txtEmployeeId]" maxlength="10" class="editable"
		//id="personal_txtEmployeeId" disabled="disabled">
		 
		   By afterSaveEmployeeIdPrperty=By.id("personal_txtEmployeeId");
		   WebElement afterSaveEmployeeId=driver.findElement(afterSaveEmployeeIdPrperty);
		String Actual_EmployeeId= afterSaveEmployeeId.getAttribute("value");
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  FristName  
		 
		if(Actual_FirstName.equals("Madhu"))
		{
		      System.out.println("After saving the FirstName are same :-  PASS");
		      Sheet.getRow(indexrow).createCell(21).setCellValue(Actual_FirstName);
		      Sheet.getRow(indexrow).createCell(22).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the FirstName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(21).setCellValue("NOT Match - "+Actual_FirstName);
		   Sheet.getRow(indexrow).createCell(22).setCellValue("FAIL");
		}
		 
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  MiddleName  

		if(Actual_MiddleName.equals("Sai"))
		{
		System.out.println("After saving the MiddleName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(23).setCellValue(Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the MiddleName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(23).setCellValue("NOT Match - "+Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  LastName  
		 
		if(Actual_LastName.equals("Chandu"))
		{
		System.out.println("After saving the LastName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(25).setCellValue(Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the LastName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(25).setCellValue("NOT Match - "+Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  EmployeeId
		 
		 
		if(Actual_EmployeeId.equals(Id))
		{
		System.out.println("After saving the EmployeeId are same :-  PASS");
		Sheet.getRow(indexrow).createCell(27).setCellValue(Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("PASS");
		   
		   
		}
		else
		{
		System.out.println("After saving the EmployeeId are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(27).setCellValue("NOT Match - "+Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("FAIL");

		}


		//...............................................................................................



		 
		//*************  Automation  Welcome Admin Button
		   
		//<a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>
		     

		welcomeAdminProperty=By.linkText("Welcome Admin");
		welcome=driver.findElement(welcomeAdminProperty);

		welcome.click();
		     
		Thread.sleep(5000);
		     
		//*************  Automation  Welcome Admin Button  
		     
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/auth/logout">Logout</a>
		     
		By logOutProperty= By.linkText("Logout");
		WebElement logOut=driver.findElement(logOutProperty);
		logOut.click();
		     


		//===================================================================================================================================================


		//Expected Text - LOGIN Panel (should be same)

		//<div id="logInPanelHeading">LOGIN Panel</div>

		expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		  // of the current webpage - identifying the LOGIN Panel



		OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(indexrow).createCell(30).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(indexrow).createCell(30).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("FAIL");
		}






		FileOutputStream Madhu=new FileOutputStream("./src/main/java/testDataResult/AddEmployee.xlsx");
		                 
		       workbook.write(Madhu);

		System.out.println();


		driver.get(addEmployeeUrlAddress);





		// UserName - Test Data

		row=Sheet.getRow(1);

		userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		   userNameProperty=By.id("txtUsername");
		userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		passwordProperty=By.name("txtPassword");
		password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		logInProperty=By.className("button");
		logIn=driver.findElement(logInProperty);
		logIn.click();




		}

		



}













}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-16 20:09:17.312
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-16 20:09:17.314
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-16 20:09:27.344
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.OrangeHrmApplication;

import org.testng.annotations.Test;

import com.utility.Log;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;


public class OrangeHrmEmpolyleListadded extends BaseTest{

	@Test 
	public void Webpage() throws IOException, InterruptedException {
		FileInputStream file=new FileInputStream("./src/main/java/testDataFiles/AddEmployee.xlsx");

		XSSFWorkbook workbook=new XSSFWorkbook(file);

		XSSFSheet Sheet=workbook.getSheet("TestData");

		int row_count=Sheet.getLastRowNum();

		System.out.println("The number of row in the Sheet is :-  "+row_count);

		int rowOfCells_Count=Sheet.getLeftCol();

		System.out.println("The number of roeOfCells in the sheet is :-  "+rowOfCells_Count);

		//===================================================================================================================================================


		//<div id="logInPanelHeading">LOGIN Panel</div>

		String expected_OrangeHrmLogInPanel="LOGIN Panel";
		Log.info("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		// of the current webpage - identifying the LOGIN Panel



		By OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		WebElement OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);
		String actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		Log.info("The Actual OrangeHrm LogIn Page Title is :- "+ actual_OrangeHrmLogInPanel);


		
		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
			Log.info("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(1).createCell(1).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(1).createCell(1).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("FAIL");
		}

		//===================================================================================================================================================

		//Expect Title is - OrangeHRM  (should be same)

		String Expected_orangeHrmLogInPage="OrangeHRM";
		Log.info("The OrangeHRM logIn Page title is :-  "+Expected_orangeHrmLogInPage);


		String Actual_orangenHrmLogInPageText=driver.getTitle();
		("The OrangenHrm LogIn Page Title is :-  "+Actual_orangenHrmLogInPageText);


		if(Actual_orangenHrmLogInPageText.equals(Expected_orangeHrmLogInPage))
		{
		System.out.println("The LogIn Page Title is Match :- PASS");
		Sheet.getRow(1).createCell(4).setCellValue(Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("PASS");
		}
		else {
		System.out.println("The LogIn Page Title is NOT Match :- FAIL");
		Sheet.getRow(1).createCell(4).setCellValue("NOT Match - "+Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("FAIL");
		}


		//===================================================================================================================================================


		// UserName - Test Data

		XSSFRow row=Sheet.getRow(1);

		String userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		By userNameProperty=By.id("txtUsername");
		WebElement userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		String password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		By passwordProperty=By.name("txtPassword");
		WebElement password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		By logInProperty=By.className("button");
		WebElement logIn=driver.findElement(logInProperty);
		logIn.click();


		//===================================================================================================================================================


		 //   *********** Expected Text - Welcome (should have)

		// ---->>>>>>>>>>>>>> Performing click on the Welcome WebElement
		         
		         
		// <a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>

		String Expect_WebpageText= "Admin";
		System.out.println("The Expected OrangeHrm Home page text is Welcome  :-  "+Expect_WebpageText);


		By welcomeAdminProperty=By.linkText("Welcome Admin");
		WebElement welcome=driver.findElement(welcomeAdminProperty);


		//String actual_welcomeHrefAttributeValue=welcome.getAttribute("id");

		            //OR

		String actual_welcomeHrefAttributeValue=welcome.getText();
		System.out.println("The href Attribute value of welcome webElement is :- "+actual_welcomeHrefAttributeValue);


		//if(actual_welcomeHrefAttributeValue.equals(Expect_WebpageText))

		                 //OR

		if(actual_welcomeHrefAttributeValue.contains(Expect_WebpageText))
		{
		System.out.println("The text is Match :- PASS");
		Sheet.getRow(1).createCell(9).setCellValue(actual_welcomeHrefAttributeValue);
		Sheet.getRow(1).createCell(10).setCellValue("PASS ");
		}
		else {
		System.out.println("The text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(9).setCellValue("Not Match the title Welcome");
		Sheet.getRow(1).createCell(10).setCellValue("Not Match the webpage FAIL");
		}



		//===================================================================================================================================================


		 
		//************Automation  Header link PIM  Button

		   //<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/viewPimModule"
		//id="menu_pim_viewPimModule" class="firstLevelMenu"><b>PIM</b></a>

		By PIMButtonProperty= By.linkText("PIM");
		WebElement PIMElement= driver.findElement(PIMButtonProperty);
		       
		Actions mouseHoverOperation=new Actions(driver);
		mouseHoverOperation.moveToElement(PIMElement).build().perform();

		//************Automation  Header link Add Employee  Button
		       
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee"
		   //id="menu_pim_addEmployee">Add Employee</a>

		By AddEmployeeProperty=By.linkText("Add Employee");
		WebElement AddEmployee=driver.findElement(AddEmployeeProperty);
		AddEmployee.click();



		//===================================================================================================================================================



		//   *********** Expected AddEmployeeText - Full Name (should be same)

		String Expect_AddAdminText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_AddAdminText);

		//<label class="hasTopFieldHelp">Full Name</label>
		By fullNameProperty=By.className("hasTopFieldHelp");
		WebElement fullName=driver.findElement(fullNameProperty);

		String Actual_AddEmployeeText=fullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_AddEmployeeText);

		if(Actual_AddEmployeeText.equals(Expect_AddAdminText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(1).createCell(12).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(12).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("FAIL");
		}



		//===================================================================================================================================================
		String addEmployeeUrlAddress="http://127.0.0.1/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee";

		for(int indexrow=1; indexrow<=Sheet.getLastRowNum(); indexrow++) {



		XSSFRow row_AddAdmin=Sheet.getRow(indexrow);

		// --->>>>> This Names is Expected TestData in the Excel Sheet

		            // FirstName - Test Data

		String firstName_TestData=row_AddAdmin.getCell(14).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="firstName" id="firstName">
		By firstNameProperty=By.id("firstName");
		WebElement firstName=driver.findElement(firstNameProperty);
		firstName.sendKeys(firstName_TestData);

		// MiddleName - Test Data
		String middleName_TestData=row_AddAdmin.getCell(15).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="middleName" id="middleName">
		By middleNameProperty=By.id("middleName");
		WebElement middleName=driver.findElement(middleNameProperty);
		middleName.sendKeys(middleName_TestData);

		// LastName - Test Data

		   String lastName_TestData=row_AddAdmin.getCell(16).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="lastName" id="lastName">
		By lastNameProperty=By.id("lastName");
		WebElement lastName=driver.findElement(lastNameProperty);
		lastName.sendKeys(lastName_TestData);

		 
		 
		  //********Enter AddName EmployeeId Automation      



		//<input class="formInputText valid" maxlength="10" type="text"
		//name="employeeId" value="0001" id="employeeId">
		     
		   By employeeIdProperty=By.id("employeeId");
		WebElement employeeId=driver.findElement(employeeIdProperty);
		String Id=employeeId.getAttribute("value");
		     
		System.out.println("the EmployId number is :-  "+Id);
		     
		Sheet.getRow(indexrow).createCell(17).setCellValue(Id);


		 //*************  Automation Save Button
		     
		    //<input type="button" class="" id="btnSave" value="Save">
		   
		    By saveProperty= By.id("btnSave");
		    WebElement  save= driver.findElement(saveProperty);
		    save.click();
		     

		//===================================================================================================================================================

		   

		//   *********** Expected Personal Details Text After Click on Save - Full Name (should be same)

		String Expect_PersonalDetailsPageText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_PersonalDetailsPageText);


		//<label for="Full_Name" class="hasTopFieldHelp">Full Name</label>
		By PersonalDetailsPage_FullNameProperty=By.className("hasTopFieldHelp");
		WebElement PersonalDetailsPage_FullName=driver.findElement(PersonalDetailsPage_FullNameProperty);

		String Actual_PersonalDetailsPageText=PersonalDetailsPage_FullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_PersonalDetailsPageText);

		if(Actual_PersonalDetailsPageText.equals(Expect_PersonalDetailsPageText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(indexrow).createCell(19).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(indexrow).createCell(19).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("FAIL");
		}


		System.out.println();
		//===================================================================================================================================================


		// --->>>>> This Names is Actual TestData in the Add Employee Page

		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving FirstName


		   
		//<input value="Madhu" type="text" name="personal[txtEmpFirstName]" class="block default editable" maxlength="30"
		//title="First Name" id="personal_txtEmpFirstName" disabled="disabled">
		 
		By afterSaveFirstNameProperty= By.id("personal_txtEmpFirstName");
		WebElement afterSaveFirstName = driver.findElement(afterSaveFirstNameProperty);
		String Actual_FirstName=afterSaveFirstName.getAttribute("value");
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving MiddleName
		 
		//<input value="Sai" type="text" name="personal[txtEmpMiddleName]" class="block default editable" maxlength="30"
		//title="Middle Name" id="personal_txtEmpMiddleName" disabled="disabled">
		     
		By afterSaveMiddleNameProperty= By.id("personal_txtEmpMiddleName");
		WebElement  afterSaveMiddleName= driver.findElement(afterSaveMiddleNameProperty);
		String Actual_MiddleName=afterSaveMiddleName.getAttribute("value");  
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving LastName
		 
		//<input value="Chandu" type="text" name="personal[txtEmpLastName]" class="block default editable" maxlength="30"
		//title="Last Name" id="personal_txtEmpLastName" disabled="disabled">
		   
		By afterSaveLastNameProperty=By.id("personal_txtEmpLastName");
		WebElement afterSaveLastName=driver.findElement(afterSaveLastNameProperty);
		String Actual_LastName=afterSaveLastName.getAttribute("value");
		 
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving EmployeeId
		 
		//<input value="0021" type="text" name="personal[txtEmployeeId]" maxlength="10" class="editable"
		//id="personal_txtEmployeeId" disabled="disabled">
		 
		   By afterSaveEmployeeIdPrperty=By.id("personal_txtEmployeeId");
		   WebElement afterSaveEmployeeId=driver.findElement(afterSaveEmployeeIdPrperty);
		String Actual_EmployeeId= afterSaveEmployeeId.getAttribute("value");
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  FristName  
		 
		if(Actual_FirstName.equals("Madhu"))
		{
		      System.out.println("After saving the FirstName are same :-  PASS");
		      Sheet.getRow(indexrow).createCell(21).setCellValue(Actual_FirstName);
		      Sheet.getRow(indexrow).createCell(22).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the FirstName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(21).setCellValue("NOT Match - "+Actual_FirstName);
		   Sheet.getRow(indexrow).createCell(22).setCellValue("FAIL");
		}
		 
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  MiddleName  

		if(Actual_MiddleName.equals("Sai"))
		{
		System.out.println("After saving the MiddleName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(23).setCellValue(Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the MiddleName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(23).setCellValue("NOT Match - "+Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  LastName  
		 
		if(Actual_LastName.equals("Chandu"))
		{
		System.out.println("After saving the LastName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(25).setCellValue(Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the LastName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(25).setCellValue("NOT Match - "+Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  EmployeeId
		 
		 
		if(Actual_EmployeeId.equals(Id))
		{
		System.out.println("After saving the EmployeeId are same :-  PASS");
		Sheet.getRow(indexrow).createCell(27).setCellValue(Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("PASS");
		   
		   
		}
		else
		{
		System.out.println("After saving the EmployeeId are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(27).setCellValue("NOT Match - "+Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("FAIL");

		}


		//...............................................................................................



		 
		//*************  Automation  Welcome Admin Button
		   
		//<a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>
		     

		welcomeAdminProperty=By.linkText("Welcome Admin");
		welcome=driver.findElement(welcomeAdminProperty);

		welcome.click();
		     
		Thread.sleep(5000);
		     
		//*************  Automation  Welcome Admin Button  
		     
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/auth/logout">Logout</a>
		     
		By logOutProperty= By.linkText("Logout");
		WebElement logOut=driver.findElement(logOutProperty);
		logOut.click();
		     


		//===================================================================================================================================================


		//Expected Text - LOGIN Panel (should be same)

		//<div id="logInPanelHeading">LOGIN Panel</div>

		expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		  // of the current webpage - identifying the LOGIN Panel



		OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(indexrow).createCell(30).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(indexrow).createCell(30).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("FAIL");
		}






		FileOutputStream Madhu=new FileOutputStream("./src/main/java/testDataResult/AddEmployee.xlsx");
		                 
		       workbook.write(Madhu);

		System.out.println();


		driver.get(addEmployeeUrlAddress);





		// UserName - Test Data

		row=Sheet.getRow(1);

		userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		   userNameProperty=By.id("txtUsername");
		userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		passwordProperty=By.name("txtPassword");
		password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		logInProperty=By.className("button");
		logIn=driver.findElement(logInProperty);
		logIn.click();




		}

		



}













}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-16 20:09:27.345
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-16 20:09:27.346
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-16 20:09:27.399
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.OrangeHrmApplication;

import org.testng.annotations.Test;

import com.utility.Log;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;


public class OrangeHrmEmpolyleListadded extends BaseTest{

	@Test 
	public void Webpage() throws IOException, InterruptedException {
		FileInputStream file=new FileInputStream("./src/main/java/testDataFiles/AddEmployee.xlsx");

		XSSFWorkbook workbook=new XSSFWorkbook(file);

		XSSFSheet Sheet=workbook.getSheet("TestData");

		int row_count=Sheet.getLastRowNum();

		System.out.println("The number of row in the Sheet is :-  "+row_count);

		int rowOfCells_Count=Sheet.getLeftCol();

		System.out.println("The number of roeOfCells in the sheet is :-  "+rowOfCells_Count);

		//===================================================================================================================================================


		//<div id="logInPanelHeading">LOGIN Panel</div>

		String expected_OrangeHrmLogInPanel="LOGIN Panel";
		Log.info("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		// of the current webpage - identifying the LOGIN Panel



		By OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		WebElement OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);
		String actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		Log.info("The Actual OrangeHrm LogIn Page Title is :- "+ actual_OrangeHrmLogInPanel);


		
		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
			Log.info("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(1).createCell(1).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(1).createCell(1).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("FAIL");
		}

		//===================================================================================================================================================

		//Expect Title is - OrangeHRM  (should be same)

		String Expected_orangeHrmLogInPage="OrangeHRM";
		Log.info("The OrangeHRM logIn Page title is :-  "+Expected_orangeHrmLogInPage);


		String Actual_orangenHrmLogInPageText=driver.getTitle();
		("The OrangenHrm LogIn Page Title is :-  "+Actual_orangenHrmLogInPageText);


		if(Actual_orangenHrmLogInPageText.equals(Expected_orangeHrmLogInPage))
		{
		System.out.println("The LogIn Page Title is Match :- PASS");
		Sheet.getRow(1).createCell(4).setCellValue(Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("PASS");
		}
		else {
		System.out.println("The LogIn Page Title is NOT Match :- FAIL");
		Sheet.getRow(1).createCell(4).setCellValue("NOT Match - "+Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("FAIL");
		}


		//===================================================================================================================================================


		// UserName - Test Data

		XSSFRow row=Sheet.getRow(1);

		String userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		By userNameProperty=By.id("txtUsername");
		WebElement userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		String password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		By passwordProperty=By.name("txtPassword");
		WebElement password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		By logInProperty=By.className("button");
		WebElement logIn=driver.findElement(logInProperty);
		logIn.click();


		//===================================================================================================================================================


		 //   *********** Expected Text - Welcome (should have)

		// ---->>>>>>>>>>>>>> Performing click on the Welcome WebElement
		         
		         
		// <a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>

		String Expect_WebpageText= "Admin";
		System.out.println("The Expected OrangeHrm Home page text is Welcome  :-  "+Expect_WebpageText);


		By welcomeAdminProperty=By.linkText("Welcome Admin");
		WebElement welcome=driver.findElement(welcomeAdminProperty);


		//String actual_welcomeHrefAttributeValue=welcome.getAttribute("id");

		            //OR

		String actual_welcomeHrefAttributeValue=welcome.getText();
		System.out.println("The href Attribute value of welcome webElement is :- "+actual_welcomeHrefAttributeValue);


		//if(actual_welcomeHrefAttributeValue.equals(Expect_WebpageText))

		                 //OR

		if(actual_welcomeHrefAttributeValue.contains(Expect_WebpageText))
		{
		System.out.println("The text is Match :- PASS");
		Sheet.getRow(1).createCell(9).setCellValue(actual_welcomeHrefAttributeValue);
		Sheet.getRow(1).createCell(10).setCellValue("PASS ");
		}
		else {
		System.out.println("The text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(9).setCellValue("Not Match the title Welcome");
		Sheet.getRow(1).createCell(10).setCellValue("Not Match the webpage FAIL");
		}



		//===================================================================================================================================================


		 
		//************Automation  Header link PIM  Button

		   //<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/viewPimModule"
		//id="menu_pim_viewPimModule" class="firstLevelMenu"><b>PIM</b></a>

		By PIMButtonProperty= By.linkText("PIM");
		WebElement PIMElement= driver.findElement(PIMButtonProperty);
		       
		Actions mouseHoverOperation=new Actions(driver);
		mouseHoverOperation.moveToElement(PIMElement).build().perform();

		//************Automation  Header link Add Employee  Button
		       
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee"
		   //id="menu_pim_addEmployee">Add Employee</a>

		By AddEmployeeProperty=By.linkText("Add Employee");
		WebElement AddEmployee=driver.findElement(AddEmployeeProperty);
		AddEmployee.click();



		//===================================================================================================================================================



		//   *********** Expected AddEmployeeText - Full Name (should be same)

		String Expect_AddAdminText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_AddAdminText);

		//<label class="hasTopFieldHelp">Full Name</label>
		By fullNameProperty=By.className("hasTopFieldHelp");
		WebElement fullName=driver.findElement(fullNameProperty);

		String Actual_AddEmployeeText=fullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_AddEmployeeText);

		if(Actual_AddEmployeeText.equals(Expect_AddAdminText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(1).createCell(12).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(12).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("FAIL");
		}



		//===================================================================================================================================================
		String addEmployeeUrlAddress="http://127.0.0.1/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee";

		for(int indexrow=1; indexrow<=Sheet.getLastRowNum(); indexrow++) {



		XSSFRow row_AddAdmin=Sheet.getRow(indexrow);

		// --->>>>> This Names is Expected TestData in the Excel Sheet

		            // FirstName - Test Data

		String firstName_TestData=row_AddAdmin.getCell(14).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="firstName" id="firstName">
		By firstNameProperty=By.id("firstName");
		WebElement firstName=driver.findElement(firstNameProperty);
		firstName.sendKeys(firstName_TestData);

		// MiddleName - Test Data
		String middleName_TestData=row_AddAdmin.getCell(15).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="middleName" id="middleName">
		By middleNameProperty=By.id("middleName");
		WebElement middleName=driver.findElement(middleNameProperty);
		middleName.sendKeys(middleName_TestData);

		// LastName - Test Data

		   String lastName_TestData=row_AddAdmin.getCell(16).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="lastName" id="lastName">
		By lastNameProperty=By.id("lastName");
		WebElement lastName=driver.findElement(lastNameProperty);
		lastName.sendKeys(lastName_TestData);

		 
		 
		  //********Enter AddName EmployeeId Automation      



		//<input class="formInputText valid" maxlength="10" type="text"
		//name="employeeId" value="0001" id="employeeId">
		     
		   By employeeIdProperty=By.id("employeeId");
		WebElement employeeId=driver.findElement(employeeIdProperty);
		String Id=employeeId.getAttribute("value");
		     
		System.out.println("the EmployId number is :-  "+Id);
		     
		Sheet.getRow(indexrow).createCell(17).setCellValue(Id);


		 //*************  Automation Save Button
		     
		    //<input type="button" class="" id="btnSave" value="Save">
		   
		    By saveProperty= By.id("btnSave");
		    WebElement  save= driver.findElement(saveProperty);
		    save.click();
		     

		//===================================================================================================================================================

		   

		//   *********** Expected Personal Details Text After Click on Save - Full Name (should be same)

		String Expect_PersonalDetailsPageText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_PersonalDetailsPageText);


		//<label for="Full_Name" class="hasTopFieldHelp">Full Name</label>
		By PersonalDetailsPage_FullNameProperty=By.className("hasTopFieldHelp");
		WebElement PersonalDetailsPage_FullName=driver.findElement(PersonalDetailsPage_FullNameProperty);

		String Actual_PersonalDetailsPageText=PersonalDetailsPage_FullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_PersonalDetailsPageText);

		if(Actual_PersonalDetailsPageText.equals(Expect_PersonalDetailsPageText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(indexrow).createCell(19).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(indexrow).createCell(19).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("FAIL");
		}


		System.out.println();
		//===================================================================================================================================================


		// --->>>>> This Names is Actual TestData in the Add Employee Page

		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving FirstName


		   
		//<input value="Madhu" type="text" name="personal[txtEmpFirstName]" class="block default editable" maxlength="30"
		//title="First Name" id="personal_txtEmpFirstName" disabled="disabled">
		 
		By afterSaveFirstNameProperty= By.id("personal_txtEmpFirstName");
		WebElement afterSaveFirstName = driver.findElement(afterSaveFirstNameProperty);
		String Actual_FirstName=afterSaveFirstName.getAttribute("value");
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving MiddleName
		 
		//<input value="Sai" type="text" name="personal[txtEmpMiddleName]" class="block default editable" maxlength="30"
		//title="Middle Name" id="personal_txtEmpMiddleName" disabled="disabled">
		     
		By afterSaveMiddleNameProperty= By.id("personal_txtEmpMiddleName");
		WebElement  afterSaveMiddleName= driver.findElement(afterSaveMiddleNameProperty);
		String Actual_MiddleName=afterSaveMiddleName.getAttribute("value");  
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving LastName
		 
		//<input value="Chandu" type="text" name="personal[txtEmpLastName]" class="block default editable" maxlength="30"
		//title="Last Name" id="personal_txtEmpLastName" disabled="disabled">
		   
		By afterSaveLastNameProperty=By.id("personal_txtEmpLastName");
		WebElement afterSaveLastName=driver.findElement(afterSaveLastNameProperty);
		String Actual_LastName=afterSaveLastName.getAttribute("value");
		 
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving EmployeeId
		 
		//<input value="0021" type="text" name="personal[txtEmployeeId]" maxlength="10" class="editable"
		//id="personal_txtEmployeeId" disabled="disabled">
		 
		   By afterSaveEmployeeIdPrperty=By.id("personal_txtEmployeeId");
		   WebElement afterSaveEmployeeId=driver.findElement(afterSaveEmployeeIdPrperty);
		String Actual_EmployeeId= afterSaveEmployeeId.getAttribute("value");
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  FristName  
		 
		if(Actual_FirstName.equals("Madhu"))
		{
		      System.out.println("After saving the FirstName are same :-  PASS");
		      Sheet.getRow(indexrow).createCell(21).setCellValue(Actual_FirstName);
		      Sheet.getRow(indexrow).createCell(22).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the FirstName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(21).setCellValue("NOT Match - "+Actual_FirstName);
		   Sheet.getRow(indexrow).createCell(22).setCellValue("FAIL");
		}
		 
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  MiddleName  

		if(Actual_MiddleName.equals("Sai"))
		{
		System.out.println("After saving the MiddleName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(23).setCellValue(Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the MiddleName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(23).setCellValue("NOT Match - "+Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  LastName  
		 
		if(Actual_LastName.equals("Chandu"))
		{
		System.out.println("After saving the LastName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(25).setCellValue(Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the LastName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(25).setCellValue("NOT Match - "+Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  EmployeeId
		 
		 
		if(Actual_EmployeeId.equals(Id))
		{
		System.out.println("After saving the EmployeeId are same :-  PASS");
		Sheet.getRow(indexrow).createCell(27).setCellValue(Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("PASS");
		   
		   
		}
		else
		{
		System.out.println("After saving the EmployeeId are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(27).setCellValue("NOT Match - "+Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("FAIL");

		}


		//...............................................................................................



		 
		//*************  Automation  Welcome Admin Button
		   
		//<a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>
		     

		welcomeAdminProperty=By.linkText("Welcome Admin");
		welcome=driver.findElement(welcomeAdminProperty);

		welcome.click();
		     
		Thread.sleep(5000);
		     
		//*************  Automation  Welcome Admin Button  
		     
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/auth/logout">Logout</a>
		     
		By logOutProperty= By.linkText("Logout");
		WebElement logOut=driver.findElement(logOutProperty);
		logOut.click();
		     


		//===================================================================================================================================================


		//Expected Text - LOGIN Panel (should be same)

		//<div id="logInPanelHeading">LOGIN Panel</div>

		expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		  // of the current webpage - identifying the LOGIN Panel



		OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(indexrow).createCell(30).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(indexrow).createCell(30).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("FAIL");
		}






		FileOutputStream Madhu=new FileOutputStream("./src/main/java/testDataResult/AddEmployee.xlsx");
		                 
		       workbook.write(Madhu);

		System.out.println();


		driver.get(addEmployeeUrlAddress);





		// UserName - Test Data

		row=Sheet.getRow(1);

		userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		   userNameProperty=By.id("txtUsername");
		userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		passwordProperty=By.name("txtPassword");
		password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		logInProperty=By.className("button");
		logIn=driver.findElement(logInProperty);
		logIn.click();




		}

		



}













}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-16 20:09:27.401
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-16 20:09:27.402
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-16 20:11:32.071
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.OrangeHrmApplication;

import org.testng.annotations.Test;

import com.utility.Log;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;


public class OrangeHrmEmpolyleListadded extends BaseTest{

	@Test 
	public void Webpage() throws IOException, InterruptedException {
		FileInputStream file=new FileInputStream("./src/main/java/testDataFiles/AddEmployee.xlsx");

		XSSFWorkbook workbook=new XSSFWorkbook(file);

		XSSFSheet Sheet=workbook.getSheet("TestData");

		int row_count=Sheet.getLastRowNum();

		System.out.println("The number of row in the Sheet is :-  "+row_count);

		int rowOfCells_Count=Sheet.getLeftCol();

		System.out.println("The number of roeOfCells in the sheet is :-  "+rowOfCells_Count);

		//===================================================================================================================================================


		//<div id="logInPanelHeading">LOGIN Panel</div>

		String expected_OrangeHrmLogInPanel="LOGIN Panel";
		Log.info("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		// of the current webpage - identifying the LOGIN Panel



		By OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		WebElement OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);
		String actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		Log.info("The Actual OrangeHrm LogIn Page Title is :- "+ actual_OrangeHrmLogInPanel);


		
		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
			Log.info("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(1).createCell(1).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(1).createCell(1).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("FAIL");
		}

		//===================================================================================================================================================

		//Expect Title is - OrangeHRM  (should be same)

		String Expected_orangeHrmLogInPage="OrangeHRM";
		Log.info("The OrangeHRM logIn Page title is :-  "+Expected_orangeHrmLogInPage);


		String Actual_orangenHrmLogInPageText=driver.getTitle();
		Log.info("The OrangenHrm LogIn Page Title is :-  "+Actual_orangenHrmLogInPageText);


		if(Actual_orangenHrmLogInPageText.equals(Expected_orangeHrmLogInPage))
		{
			Log.info("The LogIn Page Title is Match :- PASS");
		Sheet.getRow(1).createCell(4).setCellValue(Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("PASS");
		}
		else {
			Log.info("The LogIn Page Title is NOT Match :- FAIL");
		Sheet.getRow(1).createCell(4).setCellValue("NOT Match - "+Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("FAIL");
		}


		//===================================================================================================================================================


		// UserName - Test Data

		XSSFRow row=Sheet.getRow(1);

		String userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		By userNameProperty=By.id("txtUsername");
		WebElement userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		String password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		By passwordProperty=By.name("txtPassword");
		WebElement password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		By logInProperty=By.className("button");
		WebElement logIn=driver.findElement(logInProperty);
		logIn.click();


		//===================================================================================================================================================


		 //   *********** Expected Text - Welcome (should have)

		// ---->>>>>>>>>>>>>> Performing click on the Welcome WebElement
		         
		         
		// <a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>

		String Expect_WebpageText= "Admin";
		Log.info("The Expected OrangeHrm Home page text is Welcome  :-  "+Expect_WebpageText);


		By welcomeAdminProperty=By.linkText("Welcome Admin");
		WebElement welcome=driver.findElement(welcomeAdminProperty);


		//String actual_welcomeHrefAttributeValue=welcome.getAttribute("id");

		            //OR

		String actual_welcomeHrefAttributeValue=welcome.getText();
		Log.info("The href Attribute value of welcome webElement is :- "+actual_welcomeHrefAttributeValue);


		//if(actual_welcomeHrefAttributeValue.equals(Expect_WebpageText))

		                 //OR

		if(actual_welcomeHrefAttributeValue.contains(Expect_WebpageText))
		{
			Log.info("The text is Match :- PASS");
		Sheet.getRow(1).createCell(9).setCellValue(actual_welcomeHrefAttributeValue);
		Sheet.getRow(1).createCell(10).setCellValue("PASS ");
		}
		else {
			Log.info("The text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(9).setCellValue("Not Match the title Welcome");
		Sheet.getRow(1).createCell(10).setCellValue("Not Match the webpage FAIL");
		}



		//===================================================================================================================================================


		 
		//************Automation  Header link PIM  Button

		   //<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/viewPimModule"
		//id="menu_pim_viewPimModule" class="firstLevelMenu"><b>PIM</b></a>

		By PIMButtonProperty= By.linkText("PIM");
		WebElement PIMElement= driver.findElement(PIMButtonProperty);
		       
		Actions mouseHoverOperation=new Actions(driver);
		mouseHoverOperation.moveToElement(PIMElement).build().perform();

		//************Automation  Header link Add Employee  Button
		       
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee"
		   //id="menu_pim_addEmployee">Add Employee</a>

		By AddEmployeeProperty=By.linkText("Add Employee");
		WebElement AddEmployee=driver.findElement(AddEmployeeProperty);
		AddEmployee.click();



		//===================================================================================================================================================



		//   *********** Expected AddEmployeeText - Full Name (should be same)

		String Expect_AddAdminText="Full Name";
		("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_AddAdminText);

		//<label class="hasTopFieldHelp">Full Name</label>
		By fullNameProperty=By.className("hasTopFieldHelp");
		WebElement fullName=driver.findElement(fullNameProperty);

		String Actual_AddEmployeeText=fullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_AddEmployeeText);

		if(Actual_AddEmployeeText.equals(Expect_AddAdminText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(1).createCell(12).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(12).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("FAIL");
		}



		//===================================================================================================================================================
		String addEmployeeUrlAddress="http://127.0.0.1/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee";

		for(int indexrow=1; indexrow<=Sheet.getLastRowNum(); indexrow++) {



		XSSFRow row_AddAdmin=Sheet.getRow(indexrow);

		// --->>>>> This Names is Expected TestData in the Excel Sheet

		            // FirstName - Test Data

		String firstName_TestData=row_AddAdmin.getCell(14).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="firstName" id="firstName">
		By firstNameProperty=By.id("firstName");
		WebElement firstName=driver.findElement(firstNameProperty);
		firstName.sendKeys(firstName_TestData);

		// MiddleName - Test Data
		String middleName_TestData=row_AddAdmin.getCell(15).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="middleName" id="middleName">
		By middleNameProperty=By.id("middleName");
		WebElement middleName=driver.findElement(middleNameProperty);
		middleName.sendKeys(middleName_TestData);

		// LastName - Test Data

		   String lastName_TestData=row_AddAdmin.getCell(16).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="lastName" id="lastName">
		By lastNameProperty=By.id("lastName");
		WebElement lastName=driver.findElement(lastNameProperty);
		lastName.sendKeys(lastName_TestData);

		 
		 
		  //********Enter AddName EmployeeId Automation      



		//<input class="formInputText valid" maxlength="10" type="text"
		//name="employeeId" value="0001" id="employeeId">
		     
		   By employeeIdProperty=By.id("employeeId");
		WebElement employeeId=driver.findElement(employeeIdProperty);
		String Id=employeeId.getAttribute("value");
		     
		System.out.println("the EmployId number is :-  "+Id);
		     
		Sheet.getRow(indexrow).createCell(17).setCellValue(Id);


		 //*************  Automation Save Button
		     
		    //<input type="button" class="" id="btnSave" value="Save">
		   
		    By saveProperty= By.id("btnSave");
		    WebElement  save= driver.findElement(saveProperty);
		    save.click();
		     

		//===================================================================================================================================================

		   

		//   *********** Expected Personal Details Text After Click on Save - Full Name (should be same)

		String Expect_PersonalDetailsPageText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_PersonalDetailsPageText);


		//<label for="Full_Name" class="hasTopFieldHelp">Full Name</label>
		By PersonalDetailsPage_FullNameProperty=By.className("hasTopFieldHelp");
		WebElement PersonalDetailsPage_FullName=driver.findElement(PersonalDetailsPage_FullNameProperty);

		String Actual_PersonalDetailsPageText=PersonalDetailsPage_FullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_PersonalDetailsPageText);

		if(Actual_PersonalDetailsPageText.equals(Expect_PersonalDetailsPageText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(indexrow).createCell(19).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(indexrow).createCell(19).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("FAIL");
		}


		System.out.println();
		//===================================================================================================================================================


		// --->>>>> This Names is Actual TestData in the Add Employee Page

		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving FirstName


		   
		//<input value="Madhu" type="text" name="personal[txtEmpFirstName]" class="block default editable" maxlength="30"
		//title="First Name" id="personal_txtEmpFirstName" disabled="disabled">
		 
		By afterSaveFirstNameProperty= By.id("personal_txtEmpFirstName");
		WebElement afterSaveFirstName = driver.findElement(afterSaveFirstNameProperty);
		String Actual_FirstName=afterSaveFirstName.getAttribute("value");
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving MiddleName
		 
		//<input value="Sai" type="text" name="personal[txtEmpMiddleName]" class="block default editable" maxlength="30"
		//title="Middle Name" id="personal_txtEmpMiddleName" disabled="disabled">
		     
		By afterSaveMiddleNameProperty= By.id("personal_txtEmpMiddleName");
		WebElement  afterSaveMiddleName= driver.findElement(afterSaveMiddleNameProperty);
		String Actual_MiddleName=afterSaveMiddleName.getAttribute("value");  
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving LastName
		 
		//<input value="Chandu" type="text" name="personal[txtEmpLastName]" class="block default editable" maxlength="30"
		//title="Last Name" id="personal_txtEmpLastName" disabled="disabled">
		   
		By afterSaveLastNameProperty=By.id("personal_txtEmpLastName");
		WebElement afterSaveLastName=driver.findElement(afterSaveLastNameProperty);
		String Actual_LastName=afterSaveLastName.getAttribute("value");
		 
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving EmployeeId
		 
		//<input value="0021" type="text" name="personal[txtEmployeeId]" maxlength="10" class="editable"
		//id="personal_txtEmployeeId" disabled="disabled">
		 
		   By afterSaveEmployeeIdPrperty=By.id("personal_txtEmployeeId");
		   WebElement afterSaveEmployeeId=driver.findElement(afterSaveEmployeeIdPrperty);
		String Actual_EmployeeId= afterSaveEmployeeId.getAttribute("value");
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  FristName  
		 
		if(Actual_FirstName.equals("Madhu"))
		{
		      System.out.println("After saving the FirstName are same :-  PASS");
		      Sheet.getRow(indexrow).createCell(21).setCellValue(Actual_FirstName);
		      Sheet.getRow(indexrow).createCell(22).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the FirstName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(21).setCellValue("NOT Match - "+Actual_FirstName);
		   Sheet.getRow(indexrow).createCell(22).setCellValue("FAIL");
		}
		 
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  MiddleName  

		if(Actual_MiddleName.equals("Sai"))
		{
		System.out.println("After saving the MiddleName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(23).setCellValue(Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the MiddleName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(23).setCellValue("NOT Match - "+Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  LastName  
		 
		if(Actual_LastName.equals("Chandu"))
		{
		System.out.println("After saving the LastName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(25).setCellValue(Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the LastName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(25).setCellValue("NOT Match - "+Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  EmployeeId
		 
		 
		if(Actual_EmployeeId.equals(Id))
		{
		System.out.println("After saving the EmployeeId are same :-  PASS");
		Sheet.getRow(indexrow).createCell(27).setCellValue(Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("PASS");
		   
		   
		}
		else
		{
		System.out.println("After saving the EmployeeId are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(27).setCellValue("NOT Match - "+Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("FAIL");

		}


		//...............................................................................................



		 
		//*************  Automation  Welcome Admin Button
		   
		//<a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>
		     

		welcomeAdminProperty=By.linkText("Welcome Admin");
		welcome=driver.findElement(welcomeAdminProperty);

		welcome.click();
		     
		Thread.sleep(5000);
		     
		//*************  Automation  Welcome Admin Button  
		     
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/auth/logout">Logout</a>
		     
		By logOutProperty= By.linkText("Logout");
		WebElement logOut=driver.findElement(logOutProperty);
		logOut.click();
		     


		//===================================================================================================================================================


		//Expected Text - LOGIN Panel (should be same)

		//<div id="logInPanelHeading">LOGIN Panel</div>

		expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		  // of the current webpage - identifying the LOGIN Panel



		OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(indexrow).createCell(30).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(indexrow).createCell(30).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("FAIL");
		}






		FileOutputStream Madhu=new FileOutputStream("./src/main/java/testDataResult/AddEmployee.xlsx");
		                 
		       workbook.write(Madhu);

		System.out.println();


		driver.get(addEmployeeUrlAddress);





		// UserName - Test Data

		row=Sheet.getRow(1);

		userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		   userNameProperty=By.id("txtUsername");
		userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		passwordProperty=By.name("txtPassword");
		password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		logInProperty=By.className("button");
		logIn=driver.findElement(logInProperty);
		logIn.click();




		}

		



}













}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-16 20:11:32.072
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-16 20:11:32.073
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-16 20:11:32.086
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.OrangeHrmApplication;

import org.testng.annotations.Test;

import com.utility.Log;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;


public class OrangeHrmEmpolyleListadded extends BaseTest{

	@Test 
	public void Webpage() throws IOException, InterruptedException {
		FileInputStream file=new FileInputStream("./src/main/java/testDataFiles/AddEmployee.xlsx");

		XSSFWorkbook workbook=new XSSFWorkbook(file);

		XSSFSheet Sheet=workbook.getSheet("TestData");

		int row_count=Sheet.getLastRowNum();

		System.out.println("The number of row in the Sheet is :-  "+row_count);

		int rowOfCells_Count=Sheet.getLeftCol();

		System.out.println("The number of roeOfCells in the sheet is :-  "+rowOfCells_Count);

		//===================================================================================================================================================


		//<div id="logInPanelHeading">LOGIN Panel</div>

		String expected_OrangeHrmLogInPanel="LOGIN Panel";
		Log.info("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		// of the current webpage - identifying the LOGIN Panel



		By OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		WebElement OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);
		String actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		Log.info("The Actual OrangeHrm LogIn Page Title is :- "+ actual_OrangeHrmLogInPanel);


		
		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
			Log.info("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(1).createCell(1).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(1).createCell(1).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("FAIL");
		}

		//===================================================================================================================================================

		//Expect Title is - OrangeHRM  (should be same)

		String Expected_orangeHrmLogInPage="OrangeHRM";
		Log.info("The OrangeHRM logIn Page title is :-  "+Expected_orangeHrmLogInPage);


		String Actual_orangenHrmLogInPageText=driver.getTitle();
		Log.info("The OrangenHrm LogIn Page Title is :-  "+Actual_orangenHrmLogInPageText);


		if(Actual_orangenHrmLogInPageText.equals(Expected_orangeHrmLogInPage))
		{
			Log.info("The LogIn Page Title is Match :- PASS");
		Sheet.getRow(1).createCell(4).setCellValue(Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("PASS");
		}
		else {
			Log.info("The LogIn Page Title is NOT Match :- FAIL");
		Sheet.getRow(1).createCell(4).setCellValue("NOT Match - "+Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("FAIL");
		}


		//===================================================================================================================================================


		// UserName - Test Data

		XSSFRow row=Sheet.getRow(1);

		String userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		By userNameProperty=By.id("txtUsername");
		WebElement userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		String password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		By passwordProperty=By.name("txtPassword");
		WebElement password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		By logInProperty=By.className("button");
		WebElement logIn=driver.findElement(logInProperty);
		logIn.click();


		//===================================================================================================================================================


		 //   *********** Expected Text - Welcome (should have)

		// ---->>>>>>>>>>>>>> Performing click on the Welcome WebElement
		         
		         
		// <a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>

		String Expect_WebpageText= "Admin";
		Log.info("The Expected OrangeHrm Home page text is Welcome  :-  "+Expect_WebpageText);


		By welcomeAdminProperty=By.linkText("Welcome Admin");
		WebElement welcome=driver.findElement(welcomeAdminProperty);


		//String actual_welcomeHrefAttributeValue=welcome.getAttribute("id");

		            //OR

		String actual_welcomeHrefAttributeValue=welcome.getText();
		Log.info("The href Attribute value of welcome webElement is :- "+actual_welcomeHrefAttributeValue);


		//if(actual_welcomeHrefAttributeValue.equals(Expect_WebpageText))

		                 //OR

		if(actual_welcomeHrefAttributeValue.contains(Expect_WebpageText))
		{
			Log.info("The text is Match :- PASS");
		Sheet.getRow(1).createCell(9).setCellValue(actual_welcomeHrefAttributeValue);
		Sheet.getRow(1).createCell(10).setCellValue("PASS ");
		}
		else {
			Log.info("The text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(9).setCellValue("Not Match the title Welcome");
		Sheet.getRow(1).createCell(10).setCellValue("Not Match the webpage FAIL");
		}



		//===================================================================================================================================================


		 
		//************Automation  Header link PIM  Button

		   //<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/viewPimModule"
		//id="menu_pim_viewPimModule" class="firstLevelMenu"><b>PIM</b></a>

		By PIMButtonProperty= By.linkText("PIM");
		WebElement PIMElement= driver.findElement(PIMButtonProperty);
		       
		Actions mouseHoverOperation=new Actions(driver);
		mouseHoverOperation.moveToElement(PIMElement).build().perform();

		//************Automation  Header link Add Employee  Button
		       
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee"
		   //id="menu_pim_addEmployee">Add Employee</a>

		By AddEmployeeProperty=By.linkText("Add Employee");
		WebElement AddEmployee=driver.findElement(AddEmployeeProperty);
		AddEmployee.click();



		//===================================================================================================================================================



		//   *********** Expected AddEmployeeText - Full Name (should be same)

		String Expect_AddAdminText="Full Name";
		("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_AddAdminText);

		//<label class="hasTopFieldHelp">Full Name</label>
		By fullNameProperty=By.className("hasTopFieldHelp");
		WebElement fullName=driver.findElement(fullNameProperty);

		String Actual_AddEmployeeText=fullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_AddEmployeeText);

		if(Actual_AddEmployeeText.equals(Expect_AddAdminText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(1).createCell(12).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(12).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("FAIL");
		}



		//===================================================================================================================================================
		String addEmployeeUrlAddress="http://127.0.0.1/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee";

		for(int indexrow=1; indexrow<=Sheet.getLastRowNum(); indexrow++) {



		XSSFRow row_AddAdmin=Sheet.getRow(indexrow);

		// --->>>>> This Names is Expected TestData in the Excel Sheet

		            // FirstName - Test Data

		String firstName_TestData=row_AddAdmin.getCell(14).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="firstName" id="firstName">
		By firstNameProperty=By.id("firstName");
		WebElement firstName=driver.findElement(firstNameProperty);
		firstName.sendKeys(firstName_TestData);

		// MiddleName - Test Data
		String middleName_TestData=row_AddAdmin.getCell(15).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="middleName" id="middleName">
		By middleNameProperty=By.id("middleName");
		WebElement middleName=driver.findElement(middleNameProperty);
		middleName.sendKeys(middleName_TestData);

		// LastName - Test Data

		   String lastName_TestData=row_AddAdmin.getCell(16).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="lastName" id="lastName">
		By lastNameProperty=By.id("lastName");
		WebElement lastName=driver.findElement(lastNameProperty);
		lastName.sendKeys(lastName_TestData);

		 
		 
		  //********Enter AddName EmployeeId Automation      



		//<input class="formInputText valid" maxlength="10" type="text"
		//name="employeeId" value="0001" id="employeeId">
		     
		   By employeeIdProperty=By.id("employeeId");
		WebElement employeeId=driver.findElement(employeeIdProperty);
		String Id=employeeId.getAttribute("value");
		     
		System.out.println("the EmployId number is :-  "+Id);
		     
		Sheet.getRow(indexrow).createCell(17).setCellValue(Id);


		 //*************  Automation Save Button
		     
		    //<input type="button" class="" id="btnSave" value="Save">
		   
		    By saveProperty= By.id("btnSave");
		    WebElement  save= driver.findElement(saveProperty);
		    save.click();
		     

		//===================================================================================================================================================

		   

		//   *********** Expected Personal Details Text After Click on Save - Full Name (should be same)

		String Expect_PersonalDetailsPageText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_PersonalDetailsPageText);


		//<label for="Full_Name" class="hasTopFieldHelp">Full Name</label>
		By PersonalDetailsPage_FullNameProperty=By.className("hasTopFieldHelp");
		WebElement PersonalDetailsPage_FullName=driver.findElement(PersonalDetailsPage_FullNameProperty);

		String Actual_PersonalDetailsPageText=PersonalDetailsPage_FullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_PersonalDetailsPageText);

		if(Actual_PersonalDetailsPageText.equals(Expect_PersonalDetailsPageText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(indexrow).createCell(19).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(indexrow).createCell(19).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("FAIL");
		}


		System.out.println();
		//===================================================================================================================================================


		// --->>>>> This Names is Actual TestData in the Add Employee Page

		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving FirstName


		   
		//<input value="Madhu" type="text" name="personal[txtEmpFirstName]" class="block default editable" maxlength="30"
		//title="First Name" id="personal_txtEmpFirstName" disabled="disabled">
		 
		By afterSaveFirstNameProperty= By.id("personal_txtEmpFirstName");
		WebElement afterSaveFirstName = driver.findElement(afterSaveFirstNameProperty);
		String Actual_FirstName=afterSaveFirstName.getAttribute("value");
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving MiddleName
		 
		//<input value="Sai" type="text" name="personal[txtEmpMiddleName]" class="block default editable" maxlength="30"
		//title="Middle Name" id="personal_txtEmpMiddleName" disabled="disabled">
		     
		By afterSaveMiddleNameProperty= By.id("personal_txtEmpMiddleName");
		WebElement  afterSaveMiddleName= driver.findElement(afterSaveMiddleNameProperty);
		String Actual_MiddleName=afterSaveMiddleName.getAttribute("value");  
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving LastName
		 
		//<input value="Chandu" type="text" name="personal[txtEmpLastName]" class="block default editable" maxlength="30"
		//title="Last Name" id="personal_txtEmpLastName" disabled="disabled">
		   
		By afterSaveLastNameProperty=By.id("personal_txtEmpLastName");
		WebElement afterSaveLastName=driver.findElement(afterSaveLastNameProperty);
		String Actual_LastName=afterSaveLastName.getAttribute("value");
		 
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving EmployeeId
		 
		//<input value="0021" type="text" name="personal[txtEmployeeId]" maxlength="10" class="editable"
		//id="personal_txtEmployeeId" disabled="disabled">
		 
		   By afterSaveEmployeeIdPrperty=By.id("personal_txtEmployeeId");
		   WebElement afterSaveEmployeeId=driver.findElement(afterSaveEmployeeIdPrperty);
		String Actual_EmployeeId= afterSaveEmployeeId.getAttribute("value");
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  FristName  
		 
		if(Actual_FirstName.equals("Madhu"))
		{
		      System.out.println("After saving the FirstName are same :-  PASS");
		      Sheet.getRow(indexrow).createCell(21).setCellValue(Actual_FirstName);
		      Sheet.getRow(indexrow).createCell(22).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the FirstName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(21).setCellValue("NOT Match - "+Actual_FirstName);
		   Sheet.getRow(indexrow).createCell(22).setCellValue("FAIL");
		}
		 
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  MiddleName  

		if(Actual_MiddleName.equals("Sai"))
		{
		System.out.println("After saving the MiddleName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(23).setCellValue(Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the MiddleName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(23).setCellValue("NOT Match - "+Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  LastName  
		 
		if(Actual_LastName.equals("Chandu"))
		{
		System.out.println("After saving the LastName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(25).setCellValue(Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the LastName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(25).setCellValue("NOT Match - "+Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  EmployeeId
		 
		 
		if(Actual_EmployeeId.equals(Id))
		{
		System.out.println("After saving the EmployeeId are same :-  PASS");
		Sheet.getRow(indexrow).createCell(27).setCellValue(Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("PASS");
		   
		   
		}
		else
		{
		System.out.println("After saving the EmployeeId are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(27).setCellValue("NOT Match - "+Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("FAIL");

		}


		//...............................................................................................



		 
		//*************  Automation  Welcome Admin Button
		   
		//<a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>
		     

		welcomeAdminProperty=By.linkText("Welcome Admin");
		welcome=driver.findElement(welcomeAdminProperty);

		welcome.click();
		     
		Thread.sleep(5000);
		     
		//*************  Automation  Welcome Admin Button  
		     
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/auth/logout">Logout</a>
		     
		By logOutProperty= By.linkText("Logout");
		WebElement logOut=driver.findElement(logOutProperty);
		logOut.click();
		     


		//===================================================================================================================================================


		//Expected Text - LOGIN Panel (should be same)

		//<div id="logInPanelHeading">LOGIN Panel</div>

		expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		  // of the current webpage - identifying the LOGIN Panel



		OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(indexrow).createCell(30).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(indexrow).createCell(30).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("FAIL");
		}






		FileOutputStream Madhu=new FileOutputStream("./src/main/java/testDataResult/AddEmployee.xlsx");
		                 
		       workbook.write(Madhu);

		System.out.println();


		driver.get(addEmployeeUrlAddress);





		// UserName - Test Data

		row=Sheet.getRow(1);

		userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		   userNameProperty=By.id("txtUsername");
		userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		passwordProperty=By.name("txtPassword");
		password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		logInProperty=By.className("button");
		logIn=driver.findElement(logInProperty);
		logIn.click();




		}

		



}













}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-16 20:11:32.088
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-16 20:11:32.089
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-16 20:11:37.603
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.OrangeHrmApplication;

import org.testng.annotations.Test;

import com.utility.Log;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;


public class OrangeHrmEmpolyleListadded extends BaseTest{

	@Test 
	public void Webpage() throws IOException, InterruptedException {
		FileInputStream file=new FileInputStream("./src/main/java/testDataFiles/AddEmployee.xlsx");

		XSSFWorkbook workbook=new XSSFWorkbook(file);

		XSSFSheet Sheet=workbook.getSheet("TestData");

		int row_count=Sheet.getLastRowNum();

		System.out.println("The number of row in the Sheet is :-  "+row_count);

		int rowOfCells_Count=Sheet.getLeftCol();

		System.out.println("The number of roeOfCells in the sheet is :-  "+rowOfCells_Count);

		//===================================================================================================================================================


		//<div id="logInPanelHeading">LOGIN Panel</div>

		String expected_OrangeHrmLogInPanel="LOGIN Panel";
		Log.info("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		// of the current webpage - identifying the LOGIN Panel



		By OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		WebElement OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);
		String actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		Log.info("The Actual OrangeHrm LogIn Page Title is :- "+ actual_OrangeHrmLogInPanel);


		
		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
			Log.info("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(1).createCell(1).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(1).createCell(1).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("FAIL");
		}

		//===================================================================================================================================================

		//Expect Title is - OrangeHRM  (should be same)

		String Expected_orangeHrmLogInPage="OrangeHRM";
		Log.info("The OrangeHRM logIn Page title is :-  "+Expected_orangeHrmLogInPage);


		String Actual_orangenHrmLogInPageText=driver.getTitle();
		Log.info("The OrangenHrm LogIn Page Title is :-  "+Actual_orangenHrmLogInPageText);


		if(Actual_orangenHrmLogInPageText.equals(Expected_orangeHrmLogInPage))
		{
			Log.info("The LogIn Page Title is Match :- PASS");
		Sheet.getRow(1).createCell(4).setCellValue(Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("PASS");
		}
		else {
			Log.info("The LogIn Page Title is NOT Match :- FAIL");
		Sheet.getRow(1).createCell(4).setCellValue("NOT Match - "+Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("FAIL");
		}


		//===================================================================================================================================================


		// UserName - Test Data

		XSSFRow row=Sheet.getRow(1);

		String userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		By userNameProperty=By.id("txtUsername");
		WebElement userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		String password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		By passwordProperty=By.name("txtPassword");
		WebElement password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		By logInProperty=By.className("button");
		WebElement logIn=driver.findElement(logInProperty);
		logIn.click();


		//===================================================================================================================================================


		 //   *********** Expected Text - Welcome (should have)

		// ---->>>>>>>>>>>>>> Performing click on the Welcome WebElement
		         
		         
		// <a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>

		String Expect_WebpageText= "Admin";
		Log.info("The Expected OrangeHrm Home page text is Welcome  :-  "+Expect_WebpageText);


		By welcomeAdminProperty=By.linkText("Welcome Admin");
		WebElement welcome=driver.findElement(welcomeAdminProperty);


		//String actual_welcomeHrefAttributeValue=welcome.getAttribute("id");

		            //OR

		String actual_welcomeHrefAttributeValue=welcome.getText();
		Log.info("The href Attribute value of welcome webElement is :- "+actual_welcomeHrefAttributeValue);


		//if(actual_welcomeHrefAttributeValue.equals(Expect_WebpageText))

		                 //OR

		if(actual_welcomeHrefAttributeValue.contains(Expect_WebpageText))
		{
			Log.info("The text is Match :- PASS");
		Sheet.getRow(1).createCell(9).setCellValue(actual_welcomeHrefAttributeValue);
		Sheet.getRow(1).createCell(10).setCellValue("PASS ");
		}
		else {
			Log.info("The text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(9).setCellValue("Not Match the title Welcome");
		Sheet.getRow(1).createCell(10).setCellValue("Not Match the webpage FAIL");
		}



		//===================================================================================================================================================


		 
		//************Automation  Header link PIM  Button

		   //<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/viewPimModule"
		//id="menu_pim_viewPimModule" class="firstLevelMenu"><b>PIM</b></a>

		By PIMButtonProperty= By.linkText("PIM");
		WebElement PIMElement= driver.findElement(PIMButtonProperty);
		       
		Actions mouseHoverOperation=new Actions(driver);
		mouseHoverOperation.moveToElement(PIMElement).build().perform();

		//************Automation  Header link Add Employee  Button
		       
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee"
		   //id="menu_pim_addEmployee">Add Employee</a>

		By AddEmployeeProperty=By.linkText("Add Employee");
		WebElement AddEmployee=driver.findElement(AddEmployeeProperty);
		AddEmployee.click();



		//===================================================================================================================================================



		//   *********** Expected AddEmployeeText - Full Name (should be same)

		String Expect_AddAdminText="Full Name";
		Log.info("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_AddAdminText);

		//<label class="hasTopFieldHelp">Full Name</label>
		By fullNameProperty=By.className("hasTopFieldHelp");
		WebElement fullName=driver.findElement(fullNameProperty);

		String Actual_AddEmployeeText=fullName.getText();
	("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_AddEmployeeText);

		if(Actual_AddEmployeeText.equals(Expect_AddAdminText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(1).createCell(12).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(12).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("FAIL");
		}



		//===================================================================================================================================================
		String addEmployeeUrlAddress="http://127.0.0.1/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee";

		for(int indexrow=1; indexrow<=Sheet.getLastRowNum(); indexrow++) {



		XSSFRow row_AddAdmin=Sheet.getRow(indexrow);

		// --->>>>> This Names is Expected TestData in the Excel Sheet

		            // FirstName - Test Data

		String firstName_TestData=row_AddAdmin.getCell(14).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="firstName" id="firstName">
		By firstNameProperty=By.id("firstName");
		WebElement firstName=driver.findElement(firstNameProperty);
		firstName.sendKeys(firstName_TestData);

		// MiddleName - Test Data
		String middleName_TestData=row_AddAdmin.getCell(15).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="middleName" id="middleName">
		By middleNameProperty=By.id("middleName");
		WebElement middleName=driver.findElement(middleNameProperty);
		middleName.sendKeys(middleName_TestData);

		// LastName - Test Data

		   String lastName_TestData=row_AddAdmin.getCell(16).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="lastName" id="lastName">
		By lastNameProperty=By.id("lastName");
		WebElement lastName=driver.findElement(lastNameProperty);
		lastName.sendKeys(lastName_TestData);

		 
		 
		  //********Enter AddName EmployeeId Automation      



		//<input class="formInputText valid" maxlength="10" type="text"
		//name="employeeId" value="0001" id="employeeId">
		     
		   By employeeIdProperty=By.id("employeeId");
		WebElement employeeId=driver.findElement(employeeIdProperty);
		String Id=employeeId.getAttribute("value");
		     
		System.out.println("the EmployId number is :-  "+Id);
		     
		Sheet.getRow(indexrow).createCell(17).setCellValue(Id);


		 //*************  Automation Save Button
		     
		    //<input type="button" class="" id="btnSave" value="Save">
		   
		    By saveProperty= By.id("btnSave");
		    WebElement  save= driver.findElement(saveProperty);
		    save.click();
		     

		//===================================================================================================================================================

		   

		//   *********** Expected Personal Details Text After Click on Save - Full Name (should be same)

		String Expect_PersonalDetailsPageText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_PersonalDetailsPageText);


		//<label for="Full_Name" class="hasTopFieldHelp">Full Name</label>
		By PersonalDetailsPage_FullNameProperty=By.className("hasTopFieldHelp");
		WebElement PersonalDetailsPage_FullName=driver.findElement(PersonalDetailsPage_FullNameProperty);

		String Actual_PersonalDetailsPageText=PersonalDetailsPage_FullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_PersonalDetailsPageText);

		if(Actual_PersonalDetailsPageText.equals(Expect_PersonalDetailsPageText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(indexrow).createCell(19).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(indexrow).createCell(19).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("FAIL");
		}


		System.out.println();
		//===================================================================================================================================================


		// --->>>>> This Names is Actual TestData in the Add Employee Page

		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving FirstName


		   
		//<input value="Madhu" type="text" name="personal[txtEmpFirstName]" class="block default editable" maxlength="30"
		//title="First Name" id="personal_txtEmpFirstName" disabled="disabled">
		 
		By afterSaveFirstNameProperty= By.id("personal_txtEmpFirstName");
		WebElement afterSaveFirstName = driver.findElement(afterSaveFirstNameProperty);
		String Actual_FirstName=afterSaveFirstName.getAttribute("value");
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving MiddleName
		 
		//<input value="Sai" type="text" name="personal[txtEmpMiddleName]" class="block default editable" maxlength="30"
		//title="Middle Name" id="personal_txtEmpMiddleName" disabled="disabled">
		     
		By afterSaveMiddleNameProperty= By.id("personal_txtEmpMiddleName");
		WebElement  afterSaveMiddleName= driver.findElement(afterSaveMiddleNameProperty);
		String Actual_MiddleName=afterSaveMiddleName.getAttribute("value");  
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving LastName
		 
		//<input value="Chandu" type="text" name="personal[txtEmpLastName]" class="block default editable" maxlength="30"
		//title="Last Name" id="personal_txtEmpLastName" disabled="disabled">
		   
		By afterSaveLastNameProperty=By.id("personal_txtEmpLastName");
		WebElement afterSaveLastName=driver.findElement(afterSaveLastNameProperty);
		String Actual_LastName=afterSaveLastName.getAttribute("value");
		 
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving EmployeeId
		 
		//<input value="0021" type="text" name="personal[txtEmployeeId]" maxlength="10" class="editable"
		//id="personal_txtEmployeeId" disabled="disabled">
		 
		   By afterSaveEmployeeIdPrperty=By.id("personal_txtEmployeeId");
		   WebElement afterSaveEmployeeId=driver.findElement(afterSaveEmployeeIdPrperty);
		String Actual_EmployeeId= afterSaveEmployeeId.getAttribute("value");
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  FristName  
		 
		if(Actual_FirstName.equals("Madhu"))
		{
		      System.out.println("After saving the FirstName are same :-  PASS");
		      Sheet.getRow(indexrow).createCell(21).setCellValue(Actual_FirstName);
		      Sheet.getRow(indexrow).createCell(22).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the FirstName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(21).setCellValue("NOT Match - "+Actual_FirstName);
		   Sheet.getRow(indexrow).createCell(22).setCellValue("FAIL");
		}
		 
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  MiddleName  

		if(Actual_MiddleName.equals("Sai"))
		{
		System.out.println("After saving the MiddleName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(23).setCellValue(Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the MiddleName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(23).setCellValue("NOT Match - "+Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  LastName  
		 
		if(Actual_LastName.equals("Chandu"))
		{
		System.out.println("After saving the LastName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(25).setCellValue(Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the LastName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(25).setCellValue("NOT Match - "+Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  EmployeeId
		 
		 
		if(Actual_EmployeeId.equals(Id))
		{
		System.out.println("After saving the EmployeeId are same :-  PASS");
		Sheet.getRow(indexrow).createCell(27).setCellValue(Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("PASS");
		   
		   
		}
		else
		{
		System.out.println("After saving the EmployeeId are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(27).setCellValue("NOT Match - "+Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("FAIL");

		}


		//...............................................................................................



		 
		//*************  Automation  Welcome Admin Button
		   
		//<a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>
		     

		welcomeAdminProperty=By.linkText("Welcome Admin");
		welcome=driver.findElement(welcomeAdminProperty);

		welcome.click();
		     
		Thread.sleep(5000);
		     
		//*************  Automation  Welcome Admin Button  
		     
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/auth/logout">Logout</a>
		     
		By logOutProperty= By.linkText("Logout");
		WebElement logOut=driver.findElement(logOutProperty);
		logOut.click();
		     


		//===================================================================================================================================================


		//Expected Text - LOGIN Panel (should be same)

		//<div id="logInPanelHeading">LOGIN Panel</div>

		expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		  // of the current webpage - identifying the LOGIN Panel



		OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(indexrow).createCell(30).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(indexrow).createCell(30).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("FAIL");
		}






		FileOutputStream Madhu=new FileOutputStream("./src/main/java/testDataResult/AddEmployee.xlsx");
		                 
		       workbook.write(Madhu);

		System.out.println();


		driver.get(addEmployeeUrlAddress);





		// UserName - Test Data

		row=Sheet.getRow(1);

		userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		   userNameProperty=By.id("txtUsername");
		userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		passwordProperty=By.name("txtPassword");
		password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		logInProperty=By.className("button");
		logIn=driver.findElement(logInProperty);
		logIn.click();




		}

		



}













}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-16 20:11:37.604
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-16 20:11:37.605
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-16 20:11:37.619
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.OrangeHrmApplication;

import org.testng.annotations.Test;

import com.utility.Log;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;


public class OrangeHrmEmpolyleListadded extends BaseTest{

	@Test 
	public void Webpage() throws IOException, InterruptedException {
		FileInputStream file=new FileInputStream("./src/main/java/testDataFiles/AddEmployee.xlsx");

		XSSFWorkbook workbook=new XSSFWorkbook(file);

		XSSFSheet Sheet=workbook.getSheet("TestData");

		int row_count=Sheet.getLastRowNum();

		System.out.println("The number of row in the Sheet is :-  "+row_count);

		int rowOfCells_Count=Sheet.getLeftCol();

		System.out.println("The number of roeOfCells in the sheet is :-  "+rowOfCells_Count);

		//===================================================================================================================================================


		//<div id="logInPanelHeading">LOGIN Panel</div>

		String expected_OrangeHrmLogInPanel="LOGIN Panel";
		Log.info("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		// of the current webpage - identifying the LOGIN Panel



		By OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		WebElement OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);
		String actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		Log.info("The Actual OrangeHrm LogIn Page Title is :- "+ actual_OrangeHrmLogInPanel);


		
		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
			Log.info("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(1).createCell(1).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(1).createCell(1).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("FAIL");
		}

		//===================================================================================================================================================

		//Expect Title is - OrangeHRM  (should be same)

		String Expected_orangeHrmLogInPage="OrangeHRM";
		Log.info("The OrangeHRM logIn Page title is :-  "+Expected_orangeHrmLogInPage);


		String Actual_orangenHrmLogInPageText=driver.getTitle();
		Log.info("The OrangenHrm LogIn Page Title is :-  "+Actual_orangenHrmLogInPageText);


		if(Actual_orangenHrmLogInPageText.equals(Expected_orangeHrmLogInPage))
		{
			Log.info("The LogIn Page Title is Match :- PASS");
		Sheet.getRow(1).createCell(4).setCellValue(Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("PASS");
		}
		else {
			Log.info("The LogIn Page Title is NOT Match :- FAIL");
		Sheet.getRow(1).createCell(4).setCellValue("NOT Match - "+Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("FAIL");
		}


		//===================================================================================================================================================


		// UserName - Test Data

		XSSFRow row=Sheet.getRow(1);

		String userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		By userNameProperty=By.id("txtUsername");
		WebElement userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		String password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		By passwordProperty=By.name("txtPassword");
		WebElement password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		By logInProperty=By.className("button");
		WebElement logIn=driver.findElement(logInProperty);
		logIn.click();


		//===================================================================================================================================================


		 //   *********** Expected Text - Welcome (should have)

		// ---->>>>>>>>>>>>>> Performing click on the Welcome WebElement
		         
		         
		// <a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>

		String Expect_WebpageText= "Admin";
		Log.info("The Expected OrangeHrm Home page text is Welcome  :-  "+Expect_WebpageText);


		By welcomeAdminProperty=By.linkText("Welcome Admin");
		WebElement welcome=driver.findElement(welcomeAdminProperty);


		//String actual_welcomeHrefAttributeValue=welcome.getAttribute("id");

		            //OR

		String actual_welcomeHrefAttributeValue=welcome.getText();
		Log.info("The href Attribute value of welcome webElement is :- "+actual_welcomeHrefAttributeValue);


		//if(actual_welcomeHrefAttributeValue.equals(Expect_WebpageText))

		                 //OR

		if(actual_welcomeHrefAttributeValue.contains(Expect_WebpageText))
		{
			Log.info("The text is Match :- PASS");
		Sheet.getRow(1).createCell(9).setCellValue(actual_welcomeHrefAttributeValue);
		Sheet.getRow(1).createCell(10).setCellValue("PASS ");
		}
		else {
			Log.info("The text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(9).setCellValue("Not Match the title Welcome");
		Sheet.getRow(1).createCell(10).setCellValue("Not Match the webpage FAIL");
		}



		//===================================================================================================================================================


		 
		//************Automation  Header link PIM  Button

		   //<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/viewPimModule"
		//id="menu_pim_viewPimModule" class="firstLevelMenu"><b>PIM</b></a>

		By PIMButtonProperty= By.linkText("PIM");
		WebElement PIMElement= driver.findElement(PIMButtonProperty);
		       
		Actions mouseHoverOperation=new Actions(driver);
		mouseHoverOperation.moveToElement(PIMElement).build().perform();

		//************Automation  Header link Add Employee  Button
		       
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee"
		   //id="menu_pim_addEmployee">Add Employee</a>

		By AddEmployeeProperty=By.linkText("Add Employee");
		WebElement AddEmployee=driver.findElement(AddEmployeeProperty);
		AddEmployee.click();



		//===================================================================================================================================================



		//   *********** Expected AddEmployeeText - Full Name (should be same)

		String Expect_AddAdminText="Full Name";
		Log.info("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_AddAdminText);

		//<label class="hasTopFieldHelp">Full Name</label>
		By fullNameProperty=By.className("hasTopFieldHelp");
		WebElement fullName=driver.findElement(fullNameProperty);

		String Actual_AddEmployeeText=fullName.getText();
	("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_AddEmployeeText);

		if(Actual_AddEmployeeText.equals(Expect_AddAdminText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(1).createCell(12).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(12).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("FAIL");
		}



		//===================================================================================================================================================
		String addEmployeeUrlAddress="http://127.0.0.1/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee";

		for(int indexrow=1; indexrow<=Sheet.getLastRowNum(); indexrow++) {



		XSSFRow row_AddAdmin=Sheet.getRow(indexrow);

		// --->>>>> This Names is Expected TestData in the Excel Sheet

		            // FirstName - Test Data

		String firstName_TestData=row_AddAdmin.getCell(14).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="firstName" id="firstName">
		By firstNameProperty=By.id("firstName");
		WebElement firstName=driver.findElement(firstNameProperty);
		firstName.sendKeys(firstName_TestData);

		// MiddleName - Test Data
		String middleName_TestData=row_AddAdmin.getCell(15).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="middleName" id="middleName">
		By middleNameProperty=By.id("middleName");
		WebElement middleName=driver.findElement(middleNameProperty);
		middleName.sendKeys(middleName_TestData);

		// LastName - Test Data

		   String lastName_TestData=row_AddAdmin.getCell(16).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="lastName" id="lastName">
		By lastNameProperty=By.id("lastName");
		WebElement lastName=driver.findElement(lastNameProperty);
		lastName.sendKeys(lastName_TestData);

		 
		 
		  //********Enter AddName EmployeeId Automation      



		//<input class="formInputText valid" maxlength="10" type="text"
		//name="employeeId" value="0001" id="employeeId">
		     
		   By employeeIdProperty=By.id("employeeId");
		WebElement employeeId=driver.findElement(employeeIdProperty);
		String Id=employeeId.getAttribute("value");
		     
		System.out.println("the EmployId number is :-  "+Id);
		     
		Sheet.getRow(indexrow).createCell(17).setCellValue(Id);


		 //*************  Automation Save Button
		     
		    //<input type="button" class="" id="btnSave" value="Save">
		   
		    By saveProperty= By.id("btnSave");
		    WebElement  save= driver.findElement(saveProperty);
		    save.click();
		     

		//===================================================================================================================================================

		   

		//   *********** Expected Personal Details Text After Click on Save - Full Name (should be same)

		String Expect_PersonalDetailsPageText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_PersonalDetailsPageText);


		//<label for="Full_Name" class="hasTopFieldHelp">Full Name</label>
		By PersonalDetailsPage_FullNameProperty=By.className("hasTopFieldHelp");
		WebElement PersonalDetailsPage_FullName=driver.findElement(PersonalDetailsPage_FullNameProperty);

		String Actual_PersonalDetailsPageText=PersonalDetailsPage_FullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_PersonalDetailsPageText);

		if(Actual_PersonalDetailsPageText.equals(Expect_PersonalDetailsPageText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(indexrow).createCell(19).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(indexrow).createCell(19).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("FAIL");
		}


		System.out.println();
		//===================================================================================================================================================


		// --->>>>> This Names is Actual TestData in the Add Employee Page

		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving FirstName


		   
		//<input value="Madhu" type="text" name="personal[txtEmpFirstName]" class="block default editable" maxlength="30"
		//title="First Name" id="personal_txtEmpFirstName" disabled="disabled">
		 
		By afterSaveFirstNameProperty= By.id("personal_txtEmpFirstName");
		WebElement afterSaveFirstName = driver.findElement(afterSaveFirstNameProperty);
		String Actual_FirstName=afterSaveFirstName.getAttribute("value");
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving MiddleName
		 
		//<input value="Sai" type="text" name="personal[txtEmpMiddleName]" class="block default editable" maxlength="30"
		//title="Middle Name" id="personal_txtEmpMiddleName" disabled="disabled">
		     
		By afterSaveMiddleNameProperty= By.id("personal_txtEmpMiddleName");
		WebElement  afterSaveMiddleName= driver.findElement(afterSaveMiddleNameProperty);
		String Actual_MiddleName=afterSaveMiddleName.getAttribute("value");  
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving LastName
		 
		//<input value="Chandu" type="text" name="personal[txtEmpLastName]" class="block default editable" maxlength="30"
		//title="Last Name" id="personal_txtEmpLastName" disabled="disabled">
		   
		By afterSaveLastNameProperty=By.id("personal_txtEmpLastName");
		WebElement afterSaveLastName=driver.findElement(afterSaveLastNameProperty);
		String Actual_LastName=afterSaveLastName.getAttribute("value");
		 
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving EmployeeId
		 
		//<input value="0021" type="text" name="personal[txtEmployeeId]" maxlength="10" class="editable"
		//id="personal_txtEmployeeId" disabled="disabled">
		 
		   By afterSaveEmployeeIdPrperty=By.id("personal_txtEmployeeId");
		   WebElement afterSaveEmployeeId=driver.findElement(afterSaveEmployeeIdPrperty);
		String Actual_EmployeeId= afterSaveEmployeeId.getAttribute("value");
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  FristName  
		 
		if(Actual_FirstName.equals("Madhu"))
		{
		      System.out.println("After saving the FirstName are same :-  PASS");
		      Sheet.getRow(indexrow).createCell(21).setCellValue(Actual_FirstName);
		      Sheet.getRow(indexrow).createCell(22).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the FirstName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(21).setCellValue("NOT Match - "+Actual_FirstName);
		   Sheet.getRow(indexrow).createCell(22).setCellValue("FAIL");
		}
		 
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  MiddleName  

		if(Actual_MiddleName.equals("Sai"))
		{
		System.out.println("After saving the MiddleName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(23).setCellValue(Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the MiddleName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(23).setCellValue("NOT Match - "+Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  LastName  
		 
		if(Actual_LastName.equals("Chandu"))
		{
		System.out.println("After saving the LastName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(25).setCellValue(Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the LastName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(25).setCellValue("NOT Match - "+Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  EmployeeId
		 
		 
		if(Actual_EmployeeId.equals(Id))
		{
		System.out.println("After saving the EmployeeId are same :-  PASS");
		Sheet.getRow(indexrow).createCell(27).setCellValue(Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("PASS");
		   
		   
		}
		else
		{
		System.out.println("After saving the EmployeeId are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(27).setCellValue("NOT Match - "+Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("FAIL");

		}


		//...............................................................................................



		 
		//*************  Automation  Welcome Admin Button
		   
		//<a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>
		     

		welcomeAdminProperty=By.linkText("Welcome Admin");
		welcome=driver.findElement(welcomeAdminProperty);

		welcome.click();
		     
		Thread.sleep(5000);
		     
		//*************  Automation  Welcome Admin Button  
		     
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/auth/logout">Logout</a>
		     
		By logOutProperty= By.linkText("Logout");
		WebElement logOut=driver.findElement(logOutProperty);
		logOut.click();
		     


		//===================================================================================================================================================


		//Expected Text - LOGIN Panel (should be same)

		//<div id="logInPanelHeading">LOGIN Panel</div>

		expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		  // of the current webpage - identifying the LOGIN Panel



		OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(indexrow).createCell(30).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(indexrow).createCell(30).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("FAIL");
		}






		FileOutputStream Madhu=new FileOutputStream("./src/main/java/testDataResult/AddEmployee.xlsx");
		                 
		       workbook.write(Madhu);

		System.out.println();


		driver.get(addEmployeeUrlAddress);





		// UserName - Test Data

		row=Sheet.getRow(1);

		userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		   userNameProperty=By.id("txtUsername");
		userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		passwordProperty=By.name("txtPassword");
		password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		logInProperty=By.className("button");
		logIn=driver.findElement(logInProperty);
		logIn.click();




		}

		



}













}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-16 20:11:37.620
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-16 20:11:37.622
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-16 20:12:03.200
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.OrangeHrmApplication;

import org.testng.annotations.Test;

import com.utility.Log;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;


public class OrangeHrmEmpolyleListadded extends BaseTest{

	@Test 
	public void Webpage() throws IOException, InterruptedException {
		FileInputStream file=new FileInputStream("./src/main/java/testDataFiles/AddEmployee.xlsx");

		XSSFWorkbook workbook=new XSSFWorkbook(file);

		XSSFSheet Sheet=workbook.getSheet("TestData");

		int row_count=Sheet.getLastRowNum();

		System.out.println("The number of row in the Sheet is :-  "+row_count);

		int rowOfCells_Count=Sheet.getLeftCol();

		System.out.println("The number of roeOfCells in the sheet is :-  "+rowOfCells_Count);

		//===================================================================================================================================================


		//<div id="logInPanelHeading">LOGIN Panel</div>

		String expected_OrangeHrmLogInPanel="LOGIN Panel";
		Log.info("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		// of the current webpage - identifying the LOGIN Panel



		By OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		WebElement OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);
		String actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		Log.info("The Actual OrangeHrm LogIn Page Title is :- "+ actual_OrangeHrmLogInPanel);


		
		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
			Log.info("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(1).createCell(1).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(1).createCell(1).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("FAIL");
		}

		//===================================================================================================================================================

		//Expect Title is - OrangeHRM  (should be same)

		String Expected_orangeHrmLogInPage="OrangeHRM";
		Log.info("The OrangeHRM logIn Page title is :-  "+Expected_orangeHrmLogInPage);


		String Actual_orangenHrmLogInPageText=driver.getTitle();
		Log.info("The OrangenHrm LogIn Page Title is :-  "+Actual_orangenHrmLogInPageText);


		if(Actual_orangenHrmLogInPageText.equals(Expected_orangeHrmLogInPage))
		{
			Log.info("The LogIn Page Title is Match :- PASS");
		Sheet.getRow(1).createCell(4).setCellValue(Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("PASS");
		}
		else {
			Log.info("The LogIn Page Title is NOT Match :- FAIL");
		Sheet.getRow(1).createCell(4).setCellValue("NOT Match - "+Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("FAIL");
		}


		//===================================================================================================================================================


		// UserName - Test Data

		XSSFRow row=Sheet.getRow(1);

		String userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		By userNameProperty=By.id("txtUsername");
		WebElement userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		String password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		By passwordProperty=By.name("txtPassword");
		WebElement password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		By logInProperty=By.className("button");
		WebElement logIn=driver.findElement(logInProperty);
		logIn.click();


		//===================================================================================================================================================


		 //   *********** Expected Text - Welcome (should have)

		// ---->>>>>>>>>>>>>> Performing click on the Welcome WebElement
		         
		         
		// <a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>

		String Expect_WebpageText= "Admin";
		Log.info("The Expected OrangeHrm Home page text is Welcome  :-  "+Expect_WebpageText);


		By welcomeAdminProperty=By.linkText("Welcome Admin");
		WebElement welcome=driver.findElement(welcomeAdminProperty);


		//String actual_welcomeHrefAttributeValue=welcome.getAttribute("id");

		            //OR

		String actual_welcomeHrefAttributeValue=welcome.getText();
		Log.info("The href Attribute value of welcome webElement is :- "+actual_welcomeHrefAttributeValue);


		//if(actual_welcomeHrefAttributeValue.equals(Expect_WebpageText))

		                 //OR

		if(actual_welcomeHrefAttributeValue.contains(Expect_WebpageText))
		{
			Log.info("The text is Match :- PASS");
		Sheet.getRow(1).createCell(9).setCellValue(actual_welcomeHrefAttributeValue);
		Sheet.getRow(1).createCell(10).setCellValue("PASS ");
		}
		else {
			Log.info("The text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(9).setCellValue("Not Match the title Welcome");
		Sheet.getRow(1).createCell(10).setCellValue("Not Match the webpage FAIL");
		}



		//===================================================================================================================================================


		 
		//************Automation  Header link PIM  Button

		   //<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/viewPimModule"
		//id="menu_pim_viewPimModule" class="firstLevelMenu"><b>PIM</b></a>

		By PIMButtonProperty= By.linkText("PIM");
		WebElement PIMElement= driver.findElement(PIMButtonProperty);
		       
		Actions mouseHoverOperation=new Actions(driver);
		mouseHoverOperation.moveToElement(PIMElement).build().perform();

		//************Automation  Header link Add Employee  Button
		       
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee"
		   //id="menu_pim_addEmployee">Add Employee</a>

		By AddEmployeeProperty=By.linkText("Add Employee");
		WebElement AddEmployee=driver.findElement(AddEmployeeProperty);
		AddEmployee.click();



		//===================================================================================================================================================



		//   *********** Expected AddEmployeeText - Full Name (should be same)

		String Expect_AddAdminText="Full Name";
		Log.info("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_AddAdminText);

		//<label class="hasTopFieldHelp">Full Name</label>
		By fullNameProperty=By.className("hasTopFieldHelp");
		WebElement fullName=driver.findElement(fullNameProperty);

		String Actual_AddEmployeeText=fullName.getText();
		Log.info("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_AddEmployeeText);

		if(Actual_AddEmployeeText.equals(Expect_AddAdminText))
		{
			Log.info("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(1).createCell(12).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("PASS");
		}
		else {
			Log.info("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(12).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("FAIL");
		}



		//===================================================================================================================================================
		String addEmployeeUrlAddress="http://127.0.0.1/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee";

		for(int indexrow=1; indexrow<=Sheet.getLastRowNum(); indexrow++) {



		XSSFRow row_AddAdmin=Sheet.getRow(indexrow);

		// --->>>>> This Names is Expected TestData in the Excel Sheet

		            // FirstName - Test Data

		String firstName_TestData=row_AddAdmin.getCell(14).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="firstName" id="firstName">
		By firstNameProperty=By.id("firstName");
		WebElement firstName=driver.findElement(firstNameProperty);
		firstName.sendKeys(firstName_TestData);

		// MiddleName - Test Data
		String middleName_TestData=row_AddAdmin.getCell(15).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="middleName" id="middleName">
		By middleNameProperty=By.id("middleName");
		WebElement middleName=driver.findElement(middleNameProperty);
		middleName.sendKeys(middleName_TestData);

		// LastName - Test Data

		   String lastName_TestData=row_AddAdmin.getCell(16).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="lastName" id="lastName">
		By lastNameProperty=By.id("lastName");
		WebElement lastName=driver.findElement(lastNameProperty);
		lastName.sendKeys(lastName_TestData);

		 
		 
		  //********Enter AddName EmployeeId Automation      



		//<input class="formInputText valid" maxlength="10" type="text"
		//name="employeeId" value="0001" id="employeeId">
		     
		   By employeeIdProperty=By.id("employeeId");
		WebElement employeeId=driver.findElement(employeeIdProperty);
		String Id=employeeId.getAttribute("value");
		     
		("the EmployId number is :-  "+Id);
		     
		Sheet.getRow(indexrow).createCell(17).setCellValue(Id);


		 //*************  Automation Save Button
		     
		    //<input type="button" class="" id="btnSave" value="Save">
		   
		    By saveProperty= By.id("btnSave");
		    WebElement  save= driver.findElement(saveProperty);
		    save.click();
		     

		//===================================================================================================================================================

		   

		//   *********** Expected Personal Details Text After Click on Save - Full Name (should be same)

		String Expect_PersonalDetailsPageText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_PersonalDetailsPageText);


		//<label for="Full_Name" class="hasTopFieldHelp">Full Name</label>
		By PersonalDetailsPage_FullNameProperty=By.className("hasTopFieldHelp");
		WebElement PersonalDetailsPage_FullName=driver.findElement(PersonalDetailsPage_FullNameProperty);

		String Actual_PersonalDetailsPageText=PersonalDetailsPage_FullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_PersonalDetailsPageText);

		if(Actual_PersonalDetailsPageText.equals(Expect_PersonalDetailsPageText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(indexrow).createCell(19).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(indexrow).createCell(19).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("FAIL");
		}


		System.out.println();
		//===================================================================================================================================================


		// --->>>>> This Names is Actual TestData in the Add Employee Page

		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving FirstName


		   
		//<input value="Madhu" type="text" name="personal[txtEmpFirstName]" class="block default editable" maxlength="30"
		//title="First Name" id="personal_txtEmpFirstName" disabled="disabled">
		 
		By afterSaveFirstNameProperty= By.id("personal_txtEmpFirstName");
		WebElement afterSaveFirstName = driver.findElement(afterSaveFirstNameProperty);
		String Actual_FirstName=afterSaveFirstName.getAttribute("value");
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving MiddleName
		 
		//<input value="Sai" type="text" name="personal[txtEmpMiddleName]" class="block default editable" maxlength="30"
		//title="Middle Name" id="personal_txtEmpMiddleName" disabled="disabled">
		     
		By afterSaveMiddleNameProperty= By.id("personal_txtEmpMiddleName");
		WebElement  afterSaveMiddleName= driver.findElement(afterSaveMiddleNameProperty);
		String Actual_MiddleName=afterSaveMiddleName.getAttribute("value");  
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving LastName
		 
		//<input value="Chandu" type="text" name="personal[txtEmpLastName]" class="block default editable" maxlength="30"
		//title="Last Name" id="personal_txtEmpLastName" disabled="disabled">
		   
		By afterSaveLastNameProperty=By.id("personal_txtEmpLastName");
		WebElement afterSaveLastName=driver.findElement(afterSaveLastNameProperty);
		String Actual_LastName=afterSaveLastName.getAttribute("value");
		 
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving EmployeeId
		 
		//<input value="0021" type="text" name="personal[txtEmployeeId]" maxlength="10" class="editable"
		//id="personal_txtEmployeeId" disabled="disabled">
		 
		   By afterSaveEmployeeIdPrperty=By.id("personal_txtEmployeeId");
		   WebElement afterSaveEmployeeId=driver.findElement(afterSaveEmployeeIdPrperty);
		String Actual_EmployeeId= afterSaveEmployeeId.getAttribute("value");
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  FristName  
		 
		if(Actual_FirstName.equals("Madhu"))
		{
		      System.out.println("After saving the FirstName are same :-  PASS");
		      Sheet.getRow(indexrow).createCell(21).setCellValue(Actual_FirstName);
		      Sheet.getRow(indexrow).createCell(22).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the FirstName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(21).setCellValue("NOT Match - "+Actual_FirstName);
		   Sheet.getRow(indexrow).createCell(22).setCellValue("FAIL");
		}
		 
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  MiddleName  

		if(Actual_MiddleName.equals("Sai"))
		{
		System.out.println("After saving the MiddleName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(23).setCellValue(Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the MiddleName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(23).setCellValue("NOT Match - "+Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  LastName  
		 
		if(Actual_LastName.equals("Chandu"))
		{
		System.out.println("After saving the LastName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(25).setCellValue(Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the LastName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(25).setCellValue("NOT Match - "+Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  EmployeeId
		 
		 
		if(Actual_EmployeeId.equals(Id))
		{
		System.out.println("After saving the EmployeeId are same :-  PASS");
		Sheet.getRow(indexrow).createCell(27).setCellValue(Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("PASS");
		   
		   
		}
		else
		{
		System.out.println("After saving the EmployeeId are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(27).setCellValue("NOT Match - "+Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("FAIL");

		}


		//...............................................................................................



		 
		//*************  Automation  Welcome Admin Button
		   
		//<a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>
		     

		welcomeAdminProperty=By.linkText("Welcome Admin");
		welcome=driver.findElement(welcomeAdminProperty);

		welcome.click();
		     
		Thread.sleep(5000);
		     
		//*************  Automation  Welcome Admin Button  
		     
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/auth/logout">Logout</a>
		     
		By logOutProperty= By.linkText("Logout");
		WebElement logOut=driver.findElement(logOutProperty);
		logOut.click();
		     


		//===================================================================================================================================================


		//Expected Text - LOGIN Panel (should be same)

		//<div id="logInPanelHeading">LOGIN Panel</div>

		expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		  // of the current webpage - identifying the LOGIN Panel



		OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(indexrow).createCell(30).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(indexrow).createCell(30).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("FAIL");
		}






		FileOutputStream Madhu=new FileOutputStream("./src/main/java/testDataResult/AddEmployee.xlsx");
		                 
		       workbook.write(Madhu);

		System.out.println();


		driver.get(addEmployeeUrlAddress);





		// UserName - Test Data

		row=Sheet.getRow(1);

		userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		   userNameProperty=By.id("txtUsername");
		userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		passwordProperty=By.name("txtPassword");
		password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		logInProperty=By.className("button");
		logIn=driver.findElement(logInProperty);
		logIn.click();




		}

		



}













}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-16 20:12:03.201
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-16 20:12:03.202
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-16 20:12:03.216
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.OrangeHrmApplication;

import org.testng.annotations.Test;

import com.utility.Log;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;


public class OrangeHrmEmpolyleListadded extends BaseTest{

	@Test 
	public void Webpage() throws IOException, InterruptedException {
		FileInputStream file=new FileInputStream("./src/main/java/testDataFiles/AddEmployee.xlsx");

		XSSFWorkbook workbook=new XSSFWorkbook(file);

		XSSFSheet Sheet=workbook.getSheet("TestData");

		int row_count=Sheet.getLastRowNum();

		System.out.println("The number of row in the Sheet is :-  "+row_count);

		int rowOfCells_Count=Sheet.getLeftCol();

		System.out.println("The number of roeOfCells in the sheet is :-  "+rowOfCells_Count);

		//===================================================================================================================================================


		//<div id="logInPanelHeading">LOGIN Panel</div>

		String expected_OrangeHrmLogInPanel="LOGIN Panel";
		Log.info("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		// of the current webpage - identifying the LOGIN Panel



		By OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		WebElement OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);
		String actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		Log.info("The Actual OrangeHrm LogIn Page Title is :- "+ actual_OrangeHrmLogInPanel);


		
		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
			Log.info("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(1).createCell(1).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(1).createCell(1).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("FAIL");
		}

		//===================================================================================================================================================

		//Expect Title is - OrangeHRM  (should be same)

		String Expected_orangeHrmLogInPage="OrangeHRM";
		Log.info("The OrangeHRM logIn Page title is :-  "+Expected_orangeHrmLogInPage);


		String Actual_orangenHrmLogInPageText=driver.getTitle();
		Log.info("The OrangenHrm LogIn Page Title is :-  "+Actual_orangenHrmLogInPageText);


		if(Actual_orangenHrmLogInPageText.equals(Expected_orangeHrmLogInPage))
		{
			Log.info("The LogIn Page Title is Match :- PASS");
		Sheet.getRow(1).createCell(4).setCellValue(Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("PASS");
		}
		else {
			Log.info("The LogIn Page Title is NOT Match :- FAIL");
		Sheet.getRow(1).createCell(4).setCellValue("NOT Match - "+Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("FAIL");
		}


		//===================================================================================================================================================


		// UserName - Test Data

		XSSFRow row=Sheet.getRow(1);

		String userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		By userNameProperty=By.id("txtUsername");
		WebElement userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		String password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		By passwordProperty=By.name("txtPassword");
		WebElement password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		By logInProperty=By.className("button");
		WebElement logIn=driver.findElement(logInProperty);
		logIn.click();


		//===================================================================================================================================================


		 //   *********** Expected Text - Welcome (should have)

		// ---->>>>>>>>>>>>>> Performing click on the Welcome WebElement
		         
		         
		// <a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>

		String Expect_WebpageText= "Admin";
		Log.info("The Expected OrangeHrm Home page text is Welcome  :-  "+Expect_WebpageText);


		By welcomeAdminProperty=By.linkText("Welcome Admin");
		WebElement welcome=driver.findElement(welcomeAdminProperty);


		//String actual_welcomeHrefAttributeValue=welcome.getAttribute("id");

		            //OR

		String actual_welcomeHrefAttributeValue=welcome.getText();
		Log.info("The href Attribute value of welcome webElement is :- "+actual_welcomeHrefAttributeValue);


		//if(actual_welcomeHrefAttributeValue.equals(Expect_WebpageText))

		                 //OR

		if(actual_welcomeHrefAttributeValue.contains(Expect_WebpageText))
		{
			Log.info("The text is Match :- PASS");
		Sheet.getRow(1).createCell(9).setCellValue(actual_welcomeHrefAttributeValue);
		Sheet.getRow(1).createCell(10).setCellValue("PASS ");
		}
		else {
			Log.info("The text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(9).setCellValue("Not Match the title Welcome");
		Sheet.getRow(1).createCell(10).setCellValue("Not Match the webpage FAIL");
		}



		//===================================================================================================================================================


		 
		//************Automation  Header link PIM  Button

		   //<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/viewPimModule"
		//id="menu_pim_viewPimModule" class="firstLevelMenu"><b>PIM</b></a>

		By PIMButtonProperty= By.linkText("PIM");
		WebElement PIMElement= driver.findElement(PIMButtonProperty);
		       
		Actions mouseHoverOperation=new Actions(driver);
		mouseHoverOperation.moveToElement(PIMElement).build().perform();

		//************Automation  Header link Add Employee  Button
		       
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee"
		   //id="menu_pim_addEmployee">Add Employee</a>

		By AddEmployeeProperty=By.linkText("Add Employee");
		WebElement AddEmployee=driver.findElement(AddEmployeeProperty);
		AddEmployee.click();



		//===================================================================================================================================================



		//   *********** Expected AddEmployeeText - Full Name (should be same)

		String Expect_AddAdminText="Full Name";
		Log.info("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_AddAdminText);

		//<label class="hasTopFieldHelp">Full Name</label>
		By fullNameProperty=By.className("hasTopFieldHelp");
		WebElement fullName=driver.findElement(fullNameProperty);

		String Actual_AddEmployeeText=fullName.getText();
		Log.info("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_AddEmployeeText);

		if(Actual_AddEmployeeText.equals(Expect_AddAdminText))
		{
			Log.info("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(1).createCell(12).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("PASS");
		}
		else {
			Log.info("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(12).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("FAIL");
		}



		//===================================================================================================================================================
		String addEmployeeUrlAddress="http://127.0.0.1/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee";

		for(int indexrow=1; indexrow<=Sheet.getLastRowNum(); indexrow++) {



		XSSFRow row_AddAdmin=Sheet.getRow(indexrow);

		// --->>>>> This Names is Expected TestData in the Excel Sheet

		            // FirstName - Test Data

		String firstName_TestData=row_AddAdmin.getCell(14).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="firstName" id="firstName">
		By firstNameProperty=By.id("firstName");
		WebElement firstName=driver.findElement(firstNameProperty);
		firstName.sendKeys(firstName_TestData);

		// MiddleName - Test Data
		String middleName_TestData=row_AddAdmin.getCell(15).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="middleName" id="middleName">
		By middleNameProperty=By.id("middleName");
		WebElement middleName=driver.findElement(middleNameProperty);
		middleName.sendKeys(middleName_TestData);

		// LastName - Test Data

		   String lastName_TestData=row_AddAdmin.getCell(16).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="lastName" id="lastName">
		By lastNameProperty=By.id("lastName");
		WebElement lastName=driver.findElement(lastNameProperty);
		lastName.sendKeys(lastName_TestData);

		 
		 
		  //********Enter AddName EmployeeId Automation      



		//<input class="formInputText valid" maxlength="10" type="text"
		//name="employeeId" value="0001" id="employeeId">
		     
		   By employeeIdProperty=By.id("employeeId");
		WebElement employeeId=driver.findElement(employeeIdProperty);
		String Id=employeeId.getAttribute("value");
		     
		("the EmployId number is :-  "+Id);
		     
		Sheet.getRow(indexrow).createCell(17).setCellValue(Id);


		 //*************  Automation Save Button
		     
		    //<input type="button" class="" id="btnSave" value="Save">
		   
		    By saveProperty= By.id("btnSave");
		    WebElement  save= driver.findElement(saveProperty);
		    save.click();
		     

		//===================================================================================================================================================

		   

		//   *********** Expected Personal Details Text After Click on Save - Full Name (should be same)

		String Expect_PersonalDetailsPageText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_PersonalDetailsPageText);


		//<label for="Full_Name" class="hasTopFieldHelp">Full Name</label>
		By PersonalDetailsPage_FullNameProperty=By.className("hasTopFieldHelp");
		WebElement PersonalDetailsPage_FullName=driver.findElement(PersonalDetailsPage_FullNameProperty);

		String Actual_PersonalDetailsPageText=PersonalDetailsPage_FullName.getText();
		System.out.println("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_PersonalDetailsPageText);

		if(Actual_PersonalDetailsPageText.equals(Expect_PersonalDetailsPageText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(indexrow).createCell(19).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(indexrow).createCell(19).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("FAIL");
		}


		System.out.println();
		//===================================================================================================================================================


		// --->>>>> This Names is Actual TestData in the Add Employee Page

		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving FirstName


		   
		//<input value="Madhu" type="text" name="personal[txtEmpFirstName]" class="block default editable" maxlength="30"
		//title="First Name" id="personal_txtEmpFirstName" disabled="disabled">
		 
		By afterSaveFirstNameProperty= By.id("personal_txtEmpFirstName");
		WebElement afterSaveFirstName = driver.findElement(afterSaveFirstNameProperty);
		String Actual_FirstName=afterSaveFirstName.getAttribute("value");
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving MiddleName
		 
		//<input value="Sai" type="text" name="personal[txtEmpMiddleName]" class="block default editable" maxlength="30"
		//title="Middle Name" id="personal_txtEmpMiddleName" disabled="disabled">
		     
		By afterSaveMiddleNameProperty= By.id("personal_txtEmpMiddleName");
		WebElement  afterSaveMiddleName= driver.findElement(afterSaveMiddleNameProperty);
		String Actual_MiddleName=afterSaveMiddleName.getAttribute("value");  
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving LastName
		 
		//<input value="Chandu" type="text" name="personal[txtEmpLastName]" class="block default editable" maxlength="30"
		//title="Last Name" id="personal_txtEmpLastName" disabled="disabled">
		   
		By afterSaveLastNameProperty=By.id("personal_txtEmpLastName");
		WebElement afterSaveLastName=driver.findElement(afterSaveLastNameProperty);
		String Actual_LastName=afterSaveLastName.getAttribute("value");
		 
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving EmployeeId
		 
		//<input value="0021" type="text" name="personal[txtEmployeeId]" maxlength="10" class="editable"
		//id="personal_txtEmployeeId" disabled="disabled">
		 
		   By afterSaveEmployeeIdPrperty=By.id("personal_txtEmployeeId");
		   WebElement afterSaveEmployeeId=driver.findElement(afterSaveEmployeeIdPrperty);
		String Actual_EmployeeId= afterSaveEmployeeId.getAttribute("value");
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  FristName  
		 
		if(Actual_FirstName.equals("Madhu"))
		{
		      System.out.println("After saving the FirstName are same :-  PASS");
		      Sheet.getRow(indexrow).createCell(21).setCellValue(Actual_FirstName);
		      Sheet.getRow(indexrow).createCell(22).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the FirstName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(21).setCellValue("NOT Match - "+Actual_FirstName);
		   Sheet.getRow(indexrow).createCell(22).setCellValue("FAIL");
		}
		 
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  MiddleName  

		if(Actual_MiddleName.equals("Sai"))
		{
		System.out.println("After saving the MiddleName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(23).setCellValue(Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the MiddleName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(23).setCellValue("NOT Match - "+Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  LastName  
		 
		if(Actual_LastName.equals("Chandu"))
		{
		System.out.println("After saving the LastName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(25).setCellValue(Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the LastName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(25).setCellValue("NOT Match - "+Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  EmployeeId
		 
		 
		if(Actual_EmployeeId.equals(Id))
		{
		System.out.println("After saving the EmployeeId are same :-  PASS");
		Sheet.getRow(indexrow).createCell(27).setCellValue(Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("PASS");
		   
		   
		}
		else
		{
		System.out.println("After saving the EmployeeId are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(27).setCellValue("NOT Match - "+Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("FAIL");

		}


		//...............................................................................................



		 
		//*************  Automation  Welcome Admin Button
		   
		//<a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>
		     

		welcomeAdminProperty=By.linkText("Welcome Admin");
		welcome=driver.findElement(welcomeAdminProperty);

		welcome.click();
		     
		Thread.sleep(5000);
		     
		//*************  Automation  Welcome Admin Button  
		     
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/auth/logout">Logout</a>
		     
		By logOutProperty= By.linkText("Logout");
		WebElement logOut=driver.findElement(logOutProperty);
		logOut.click();
		     


		//===================================================================================================================================================


		//Expected Text - LOGIN Panel (should be same)

		//<div id="logInPanelHeading">LOGIN Panel</div>

		expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		  // of the current webpage - identifying the LOGIN Panel



		OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(indexrow).createCell(30).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(indexrow).createCell(30).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("FAIL");
		}






		FileOutputStream Madhu=new FileOutputStream("./src/main/java/testDataResult/AddEmployee.xlsx");
		                 
		       workbook.write(Madhu);

		System.out.println();


		driver.get(addEmployeeUrlAddress);





		// UserName - Test Data

		row=Sheet.getRow(1);

		userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		   userNameProperty=By.id("txtUsername");
		userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		passwordProperty=By.name("txtPassword");
		password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		logInProperty=By.className("button");
		logIn=driver.findElement(logInProperty);
		logIn.click();




		}

		



}













}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-16 20:12:03.217
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-16 20:12:03.218
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-16 20:12:12.735
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.OrangeHrmApplication;

import org.testng.annotations.Test;

import com.utility.Log;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;


public class OrangeHrmEmpolyleListadded extends BaseTest{

	@Test 
	public void Webpage() throws IOException, InterruptedException {
		FileInputStream file=new FileInputStream("./src/main/java/testDataFiles/AddEmployee.xlsx");

		XSSFWorkbook workbook=new XSSFWorkbook(file);

		XSSFSheet Sheet=workbook.getSheet("TestData");

		int row_count=Sheet.getLastRowNum();

		System.out.println("The number of row in the Sheet is :-  "+row_count);

		int rowOfCells_Count=Sheet.getLeftCol();

		System.out.println("The number of roeOfCells in the sheet is :-  "+rowOfCells_Count);

		//===================================================================================================================================================


		//<div id="logInPanelHeading">LOGIN Panel</div>

		String expected_OrangeHrmLogInPanel="LOGIN Panel";
		Log.info("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		// of the current webpage - identifying the LOGIN Panel



		By OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		WebElement OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);
		String actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		Log.info("The Actual OrangeHrm LogIn Page Title is :- "+ actual_OrangeHrmLogInPanel);


		
		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
			Log.info("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(1).createCell(1).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(1).createCell(1).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("FAIL");
		}

		//===================================================================================================================================================

		//Expect Title is - OrangeHRM  (should be same)

		String Expected_orangeHrmLogInPage="OrangeHRM";
		Log.info("The OrangeHRM logIn Page title is :-  "+Expected_orangeHrmLogInPage);


		String Actual_orangenHrmLogInPageText=driver.getTitle();
		Log.info("The OrangenHrm LogIn Page Title is :-  "+Actual_orangenHrmLogInPageText);


		if(Actual_orangenHrmLogInPageText.equals(Expected_orangeHrmLogInPage))
		{
			Log.info("The LogIn Page Title is Match :- PASS");
		Sheet.getRow(1).createCell(4).setCellValue(Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("PASS");
		}
		else {
			Log.info("The LogIn Page Title is NOT Match :- FAIL");
		Sheet.getRow(1).createCell(4).setCellValue("NOT Match - "+Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("FAIL");
		}


		//===================================================================================================================================================


		// UserName - Test Data

		XSSFRow row=Sheet.getRow(1);

		String userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		By userNameProperty=By.id("txtUsername");
		WebElement userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		String password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		By passwordProperty=By.name("txtPassword");
		WebElement password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		By logInProperty=By.className("button");
		WebElement logIn=driver.findElement(logInProperty);
		logIn.click();


		//===================================================================================================================================================


		 //   *********** Expected Text - Welcome (should have)

		// ---->>>>>>>>>>>>>> Performing click on the Welcome WebElement
		         
		         
		// <a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>

		String Expect_WebpageText= "Admin";
		Log.info("The Expected OrangeHrm Home page text is Welcome  :-  "+Expect_WebpageText);


		By welcomeAdminProperty=By.linkText("Welcome Admin");
		WebElement welcome=driver.findElement(welcomeAdminProperty);


		//String actual_welcomeHrefAttributeValue=welcome.getAttribute("id");

		            //OR

		String actual_welcomeHrefAttributeValue=welcome.getText();
		Log.info("The href Attribute value of welcome webElement is :- "+actual_welcomeHrefAttributeValue);


		//if(actual_welcomeHrefAttributeValue.equals(Expect_WebpageText))

		                 //OR

		if(actual_welcomeHrefAttributeValue.contains(Expect_WebpageText))
		{
			Log.info("The text is Match :- PASS");
		Sheet.getRow(1).createCell(9).setCellValue(actual_welcomeHrefAttributeValue);
		Sheet.getRow(1).createCell(10).setCellValue("PASS ");
		}
		else {
			Log.info("The text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(9).setCellValue("Not Match the title Welcome");
		Sheet.getRow(1).createCell(10).setCellValue("Not Match the webpage FAIL");
		}



		//===================================================================================================================================================


		 
		//************Automation  Header link PIM  Button

		   //<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/viewPimModule"
		//id="menu_pim_viewPimModule" class="firstLevelMenu"><b>PIM</b></a>

		By PIMButtonProperty= By.linkText("PIM");
		WebElement PIMElement= driver.findElement(PIMButtonProperty);
		       
		Actions mouseHoverOperation=new Actions(driver);
		mouseHoverOperation.moveToElement(PIMElement).build().perform();

		//************Automation  Header link Add Employee  Button
		       
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee"
		   //id="menu_pim_addEmployee">Add Employee</a>

		By AddEmployeeProperty=By.linkText("Add Employee");
		WebElement AddEmployee=driver.findElement(AddEmployeeProperty);
		AddEmployee.click();



		//===================================================================================================================================================



		//   *********** Expected AddEmployeeText - Full Name (should be same)

		String Expect_AddAdminText="Full Name";
		Log.info("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_AddAdminText);

		//<label class="hasTopFieldHelp">Full Name</label>
		By fullNameProperty=By.className("hasTopFieldHelp");
		WebElement fullName=driver.findElement(fullNameProperty);

		String Actual_AddEmployeeText=fullName.getText();
		Log.info("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_AddEmployeeText);

		if(Actual_AddEmployeeText.equals(Expect_AddAdminText))
		{
			Log.info("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(1).createCell(12).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("PASS");
		}
		else {
			Log.info("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(12).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("FAIL");
		}



		//===================================================================================================================================================
		String addEmployeeUrlAddress="http://127.0.0.1/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee";

		for(int indexrow=1; indexrow<=Sheet.getLastRowNum(); indexrow++) {



		XSSFRow row_AddAdmin=Sheet.getRow(indexrow);

		// --->>>>> This Names is Expected TestData in the Excel Sheet

		            // FirstName - Test Data

		String firstName_TestData=row_AddAdmin.getCell(14).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="firstName" id="firstName">
		By firstNameProperty=By.id("firstName");
		WebElement firstName=driver.findElement(firstNameProperty);
		firstName.sendKeys(firstName_TestData);

		// MiddleName - Test Data
		String middleName_TestData=row_AddAdmin.getCell(15).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="middleName" id="middleName">
		By middleNameProperty=By.id("middleName");
		WebElement middleName=driver.findElement(middleNameProperty);
		middleName.sendKeys(middleName_TestData);

		// LastName - Test Data

		   String lastName_TestData=row_AddAdmin.getCell(16).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="lastName" id="lastName">
		By lastNameProperty=By.id("lastName");
		WebElement lastName=driver.findElement(lastNameProperty);
		lastName.sendKeys(lastName_TestData);

		 
		 
		  //********Enter AddName EmployeeId Automation      



		//<input class="formInputText valid" maxlength="10" type="text"
		//name="employeeId" value="0001" id="employeeId">
		     
		   By employeeIdProperty=By.id("employeeId");
		WebElement employeeId=driver.findElement(employeeIdProperty);
		String Id=employeeId.getAttribute("value");
		     
		Log.info("the EmployId number is :-  "+Id);
		     
		Sheet.getRow(indexrow).createCell(17).setCellValue(Id);


		 //*************  Automation Save Button
		     
		    //<input type="button" class="" id="btnSave" value="Save">
		   
		    By saveProperty= By.id("btnSave");
		    WebElement  save= driver.findElement(saveProperty);
		    save.click();
		     

		//===================================================================================================================================================

		   

		//   *********** Expected Personal Details Text After Click on Save - Full Name (should be same)

		String Expect_PersonalDetailsPageText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_PersonalDetailsPageText);


		//<label for="Full_Name" class="hasTopFieldHelp">Full Name</label>
		By PersonalDetailsPage_FullNameProperty=By.className("hasTopFieldHelp");
		WebElement PersonalDetailsPage_FullName=driver.findElement(PersonalDetailsPage_FullNameProperty);

		String Actual_PersonalDetailsPageText=PersonalDetailsPage_FullName.getText();
		("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_PersonalDetailsPageText);

		if(Actual_PersonalDetailsPageText.equals(Expect_PersonalDetailsPageText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(indexrow).createCell(19).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(indexrow).createCell(19).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("FAIL");
		}


		System.out.println();
		//===================================================================================================================================================


		// --->>>>> This Names is Actual TestData in the Add Employee Page

		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving FirstName


		   
		//<input value="Madhu" type="text" name="personal[txtEmpFirstName]" class="block default editable" maxlength="30"
		//title="First Name" id="personal_txtEmpFirstName" disabled="disabled">
		 
		By afterSaveFirstNameProperty= By.id("personal_txtEmpFirstName");
		WebElement afterSaveFirstName = driver.findElement(afterSaveFirstNameProperty);
		String Actual_FirstName=afterSaveFirstName.getAttribute("value");
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving MiddleName
		 
		//<input value="Sai" type="text" name="personal[txtEmpMiddleName]" class="block default editable" maxlength="30"
		//title="Middle Name" id="personal_txtEmpMiddleName" disabled="disabled">
		     
		By afterSaveMiddleNameProperty= By.id("personal_txtEmpMiddleName");
		WebElement  afterSaveMiddleName= driver.findElement(afterSaveMiddleNameProperty);
		String Actual_MiddleName=afterSaveMiddleName.getAttribute("value");  
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving LastName
		 
		//<input value="Chandu" type="text" name="personal[txtEmpLastName]" class="block default editable" maxlength="30"
		//title="Last Name" id="personal_txtEmpLastName" disabled="disabled">
		   
		By afterSaveLastNameProperty=By.id("personal_txtEmpLastName");
		WebElement afterSaveLastName=driver.findElement(afterSaveLastNameProperty);
		String Actual_LastName=afterSaveLastName.getAttribute("value");
		 
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving EmployeeId
		 
		//<input value="0021" type="text" name="personal[txtEmployeeId]" maxlength="10" class="editable"
		//id="personal_txtEmployeeId" disabled="disabled">
		 
		   By afterSaveEmployeeIdPrperty=By.id("personal_txtEmployeeId");
		   WebElement afterSaveEmployeeId=driver.findElement(afterSaveEmployeeIdPrperty);
		String Actual_EmployeeId= afterSaveEmployeeId.getAttribute("value");
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  FristName  
		 
		if(Actual_FirstName.equals("Madhu"))
		{
		      System.out.println("After saving the FirstName are same :-  PASS");
		      Sheet.getRow(indexrow).createCell(21).setCellValue(Actual_FirstName);
		      Sheet.getRow(indexrow).createCell(22).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the FirstName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(21).setCellValue("NOT Match - "+Actual_FirstName);
		   Sheet.getRow(indexrow).createCell(22).setCellValue("FAIL");
		}
		 
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  MiddleName  

		if(Actual_MiddleName.equals("Sai"))
		{
		System.out.println("After saving the MiddleName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(23).setCellValue(Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the MiddleName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(23).setCellValue("NOT Match - "+Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  LastName  
		 
		if(Actual_LastName.equals("Chandu"))
		{
		System.out.println("After saving the LastName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(25).setCellValue(Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the LastName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(25).setCellValue("NOT Match - "+Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  EmployeeId
		 
		 
		if(Actual_EmployeeId.equals(Id))
		{
		System.out.println("After saving the EmployeeId are same :-  PASS");
		Sheet.getRow(indexrow).createCell(27).setCellValue(Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("PASS");
		   
		   
		}
		else
		{
		System.out.println("After saving the EmployeeId are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(27).setCellValue("NOT Match - "+Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("FAIL");

		}


		//...............................................................................................



		 
		//*************  Automation  Welcome Admin Button
		   
		//<a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>
		     

		welcomeAdminProperty=By.linkText("Welcome Admin");
		welcome=driver.findElement(welcomeAdminProperty);

		welcome.click();
		     
		Thread.sleep(5000);
		     
		//*************  Automation  Welcome Admin Button  
		     
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/auth/logout">Logout</a>
		     
		By logOutProperty= By.linkText("Logout");
		WebElement logOut=driver.findElement(logOutProperty);
		logOut.click();
		     


		//===================================================================================================================================================


		//Expected Text - LOGIN Panel (should be same)

		//<div id="logInPanelHeading">LOGIN Panel</div>

		expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		  // of the current webpage - identifying the LOGIN Panel



		OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(indexrow).createCell(30).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(indexrow).createCell(30).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("FAIL");
		}






		FileOutputStream Madhu=new FileOutputStream("./src/main/java/testDataResult/AddEmployee.xlsx");
		                 
		       workbook.write(Madhu);

		System.out.println();


		driver.get(addEmployeeUrlAddress);





		// UserName - Test Data

		row=Sheet.getRow(1);

		userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		   userNameProperty=By.id("txtUsername");
		userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		passwordProperty=By.name("txtPassword");
		password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		logInProperty=By.className("button");
		logIn=driver.findElement(logInProperty);
		logIn.click();




		}

		



}













}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-16 20:12:12.737
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-16 20:12:12.738
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-16 20:12:12.751
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.OrangeHrmApplication;

import org.testng.annotations.Test;

import com.utility.Log;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;


public class OrangeHrmEmpolyleListadded extends BaseTest{

	@Test 
	public void Webpage() throws IOException, InterruptedException {
		FileInputStream file=new FileInputStream("./src/main/java/testDataFiles/AddEmployee.xlsx");

		XSSFWorkbook workbook=new XSSFWorkbook(file);

		XSSFSheet Sheet=workbook.getSheet("TestData");

		int row_count=Sheet.getLastRowNum();

		System.out.println("The number of row in the Sheet is :-  "+row_count);

		int rowOfCells_Count=Sheet.getLeftCol();

		System.out.println("The number of roeOfCells in the sheet is :-  "+rowOfCells_Count);

		//===================================================================================================================================================


		//<div id="logInPanelHeading">LOGIN Panel</div>

		String expected_OrangeHrmLogInPanel="LOGIN Panel";
		Log.info("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		// of the current webpage - identifying the LOGIN Panel



		By OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		WebElement OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);
		String actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		Log.info("The Actual OrangeHrm LogIn Page Title is :- "+ actual_OrangeHrmLogInPanel);


		
		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
			Log.info("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(1).createCell(1).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(1).createCell(1).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("FAIL");
		}

		//===================================================================================================================================================

		//Expect Title is - OrangeHRM  (should be same)

		String Expected_orangeHrmLogInPage="OrangeHRM";
		Log.info("The OrangeHRM logIn Page title is :-  "+Expected_orangeHrmLogInPage);


		String Actual_orangenHrmLogInPageText=driver.getTitle();
		Log.info("The OrangenHrm LogIn Page Title is :-  "+Actual_orangenHrmLogInPageText);


		if(Actual_orangenHrmLogInPageText.equals(Expected_orangeHrmLogInPage))
		{
			Log.info("The LogIn Page Title is Match :- PASS");
		Sheet.getRow(1).createCell(4).setCellValue(Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("PASS");
		}
		else {
			Log.info("The LogIn Page Title is NOT Match :- FAIL");
		Sheet.getRow(1).createCell(4).setCellValue("NOT Match - "+Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("FAIL");
		}


		//===================================================================================================================================================


		// UserName - Test Data

		XSSFRow row=Sheet.getRow(1);

		String userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		By userNameProperty=By.id("txtUsername");
		WebElement userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		String password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		By passwordProperty=By.name("txtPassword");
		WebElement password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		By logInProperty=By.className("button");
		WebElement logIn=driver.findElement(logInProperty);
		logIn.click();


		//===================================================================================================================================================


		 //   *********** Expected Text - Welcome (should have)

		// ---->>>>>>>>>>>>>> Performing click on the Welcome WebElement
		         
		         
		// <a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>

		String Expect_WebpageText= "Admin";
		Log.info("The Expected OrangeHrm Home page text is Welcome  :-  "+Expect_WebpageText);


		By welcomeAdminProperty=By.linkText("Welcome Admin");
		WebElement welcome=driver.findElement(welcomeAdminProperty);


		//String actual_welcomeHrefAttributeValue=welcome.getAttribute("id");

		            //OR

		String actual_welcomeHrefAttributeValue=welcome.getText();
		Log.info("The href Attribute value of welcome webElement is :- "+actual_welcomeHrefAttributeValue);


		//if(actual_welcomeHrefAttributeValue.equals(Expect_WebpageText))

		                 //OR

		if(actual_welcomeHrefAttributeValue.contains(Expect_WebpageText))
		{
			Log.info("The text is Match :- PASS");
		Sheet.getRow(1).createCell(9).setCellValue(actual_welcomeHrefAttributeValue);
		Sheet.getRow(1).createCell(10).setCellValue("PASS ");
		}
		else {
			Log.info("The text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(9).setCellValue("Not Match the title Welcome");
		Sheet.getRow(1).createCell(10).setCellValue("Not Match the webpage FAIL");
		}



		//===================================================================================================================================================


		 
		//************Automation  Header link PIM  Button

		   //<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/viewPimModule"
		//id="menu_pim_viewPimModule" class="firstLevelMenu"><b>PIM</b></a>

		By PIMButtonProperty= By.linkText("PIM");
		WebElement PIMElement= driver.findElement(PIMButtonProperty);
		       
		Actions mouseHoverOperation=new Actions(driver);
		mouseHoverOperation.moveToElement(PIMElement).build().perform();

		//************Automation  Header link Add Employee  Button
		       
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee"
		   //id="menu_pim_addEmployee">Add Employee</a>

		By AddEmployeeProperty=By.linkText("Add Employee");
		WebElement AddEmployee=driver.findElement(AddEmployeeProperty);
		AddEmployee.click();



		//===================================================================================================================================================



		//   *********** Expected AddEmployeeText - Full Name (should be same)

		String Expect_AddAdminText="Full Name";
		Log.info("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_AddAdminText);

		//<label class="hasTopFieldHelp">Full Name</label>
		By fullNameProperty=By.className("hasTopFieldHelp");
		WebElement fullName=driver.findElement(fullNameProperty);

		String Actual_AddEmployeeText=fullName.getText();
		Log.info("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_AddEmployeeText);

		if(Actual_AddEmployeeText.equals(Expect_AddAdminText))
		{
			Log.info("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(1).createCell(12).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("PASS");
		}
		else {
			Log.info("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(12).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("FAIL");
		}



		//===================================================================================================================================================
		String addEmployeeUrlAddress="http://127.0.0.1/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee";

		for(int indexrow=1; indexrow<=Sheet.getLastRowNum(); indexrow++) {



		XSSFRow row_AddAdmin=Sheet.getRow(indexrow);

		// --->>>>> This Names is Expected TestData in the Excel Sheet

		            // FirstName - Test Data

		String firstName_TestData=row_AddAdmin.getCell(14).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="firstName" id="firstName">
		By firstNameProperty=By.id("firstName");
		WebElement firstName=driver.findElement(firstNameProperty);
		firstName.sendKeys(firstName_TestData);

		// MiddleName - Test Data
		String middleName_TestData=row_AddAdmin.getCell(15).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="middleName" id="middleName">
		By middleNameProperty=By.id("middleName");
		WebElement middleName=driver.findElement(middleNameProperty);
		middleName.sendKeys(middleName_TestData);

		// LastName - Test Data

		   String lastName_TestData=row_AddAdmin.getCell(16).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="lastName" id="lastName">
		By lastNameProperty=By.id("lastName");
		WebElement lastName=driver.findElement(lastNameProperty);
		lastName.sendKeys(lastName_TestData);

		 
		 
		  //********Enter AddName EmployeeId Automation      



		//<input class="formInputText valid" maxlength="10" type="text"
		//name="employeeId" value="0001" id="employeeId">
		     
		   By employeeIdProperty=By.id("employeeId");
		WebElement employeeId=driver.findElement(employeeIdProperty);
		String Id=employeeId.getAttribute("value");
		     
		Log.info("the EmployId number is :-  "+Id);
		     
		Sheet.getRow(indexrow).createCell(17).setCellValue(Id);


		 //*************  Automation Save Button
		     
		    //<input type="button" class="" id="btnSave" value="Save">
		   
		    By saveProperty= By.id("btnSave");
		    WebElement  save= driver.findElement(saveProperty);
		    save.click();
		     

		//===================================================================================================================================================

		   

		//   *********** Expected Personal Details Text After Click on Save - Full Name (should be same)

		String Expect_PersonalDetailsPageText="Full Name";
		System.out.println("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_PersonalDetailsPageText);


		//<label for="Full_Name" class="hasTopFieldHelp">Full Name</label>
		By PersonalDetailsPage_FullNameProperty=By.className("hasTopFieldHelp");
		WebElement PersonalDetailsPage_FullName=driver.findElement(PersonalDetailsPage_FullNameProperty);

		String Actual_PersonalDetailsPageText=PersonalDetailsPage_FullName.getText();
		("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_PersonalDetailsPageText);

		if(Actual_PersonalDetailsPageText.equals(Expect_PersonalDetailsPageText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(indexrow).createCell(19).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(indexrow).createCell(19).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("FAIL");
		}


		System.out.println();
		//===================================================================================================================================================


		// --->>>>> This Names is Actual TestData in the Add Employee Page

		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving FirstName


		   
		//<input value="Madhu" type="text" name="personal[txtEmpFirstName]" class="block default editable" maxlength="30"
		//title="First Name" id="personal_txtEmpFirstName" disabled="disabled">
		 
		By afterSaveFirstNameProperty= By.id("personal_txtEmpFirstName");
		WebElement afterSaveFirstName = driver.findElement(afterSaveFirstNameProperty);
		String Actual_FirstName=afterSaveFirstName.getAttribute("value");
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving MiddleName
		 
		//<input value="Sai" type="text" name="personal[txtEmpMiddleName]" class="block default editable" maxlength="30"
		//title="Middle Name" id="personal_txtEmpMiddleName" disabled="disabled">
		     
		By afterSaveMiddleNameProperty= By.id("personal_txtEmpMiddleName");
		WebElement  afterSaveMiddleName= driver.findElement(afterSaveMiddleNameProperty);
		String Actual_MiddleName=afterSaveMiddleName.getAttribute("value");  
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving LastName
		 
		//<input value="Chandu" type="text" name="personal[txtEmpLastName]" class="block default editable" maxlength="30"
		//title="Last Name" id="personal_txtEmpLastName" disabled="disabled">
		   
		By afterSaveLastNameProperty=By.id("personal_txtEmpLastName");
		WebElement afterSaveLastName=driver.findElement(afterSaveLastNameProperty);
		String Actual_LastName=afterSaveLastName.getAttribute("value");
		 
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving EmployeeId
		 
		//<input value="0021" type="text" name="personal[txtEmployeeId]" maxlength="10" class="editable"
		//id="personal_txtEmployeeId" disabled="disabled">
		 
		   By afterSaveEmployeeIdPrperty=By.id("personal_txtEmployeeId");
		   WebElement afterSaveEmployeeId=driver.findElement(afterSaveEmployeeIdPrperty);
		String Actual_EmployeeId= afterSaveEmployeeId.getAttribute("value");
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  FristName  
		 
		if(Actual_FirstName.equals("Madhu"))
		{
		      System.out.println("After saving the FirstName are same :-  PASS");
		      Sheet.getRow(indexrow).createCell(21).setCellValue(Actual_FirstName);
		      Sheet.getRow(indexrow).createCell(22).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the FirstName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(21).setCellValue("NOT Match - "+Actual_FirstName);
		   Sheet.getRow(indexrow).createCell(22).setCellValue("FAIL");
		}
		 
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  MiddleName  

		if(Actual_MiddleName.equals("Sai"))
		{
		System.out.println("After saving the MiddleName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(23).setCellValue(Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the MiddleName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(23).setCellValue("NOT Match - "+Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  LastName  
		 
		if(Actual_LastName.equals("Chandu"))
		{
		System.out.println("After saving the LastName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(25).setCellValue(Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the LastName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(25).setCellValue("NOT Match - "+Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  EmployeeId
		 
		 
		if(Actual_EmployeeId.equals(Id))
		{
		System.out.println("After saving the EmployeeId are same :-  PASS");
		Sheet.getRow(indexrow).createCell(27).setCellValue(Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("PASS");
		   
		   
		}
		else
		{
		System.out.println("After saving the EmployeeId are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(27).setCellValue("NOT Match - "+Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("FAIL");

		}


		//...............................................................................................



		 
		//*************  Automation  Welcome Admin Button
		   
		//<a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>
		     

		welcomeAdminProperty=By.linkText("Welcome Admin");
		welcome=driver.findElement(welcomeAdminProperty);

		welcome.click();
		     
		Thread.sleep(5000);
		     
		//*************  Automation  Welcome Admin Button  
		     
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/auth/logout">Logout</a>
		     
		By logOutProperty= By.linkText("Logout");
		WebElement logOut=driver.findElement(logOutProperty);
		logOut.click();
		     


		//===================================================================================================================================================


		//Expected Text - LOGIN Panel (should be same)

		//<div id="logInPanelHeading">LOGIN Panel</div>

		expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		  // of the current webpage - identifying the LOGIN Panel



		OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(indexrow).createCell(30).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(indexrow).createCell(30).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("FAIL");
		}






		FileOutputStream Madhu=new FileOutputStream("./src/main/java/testDataResult/AddEmployee.xlsx");
		                 
		       workbook.write(Madhu);

		System.out.println();


		driver.get(addEmployeeUrlAddress);





		// UserName - Test Data

		row=Sheet.getRow(1);

		userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		   userNameProperty=By.id("txtUsername");
		userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		passwordProperty=By.name("txtPassword");
		password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		logInProperty=By.className("button");
		logIn=driver.findElement(logInProperty);
		logIn.click();




		}

		



}













}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-16 20:12:12.753
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-16 20:12:12.755
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-16 20:12:17.274
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.OrangeHrmApplication;

import org.testng.annotations.Test;

import com.utility.Log;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;


public class OrangeHrmEmpolyleListadded extends BaseTest{

	@Test 
	public void Webpage() throws IOException, InterruptedException {
		FileInputStream file=new FileInputStream("./src/main/java/testDataFiles/AddEmployee.xlsx");

		XSSFWorkbook workbook=new XSSFWorkbook(file);

		XSSFSheet Sheet=workbook.getSheet("TestData");

		int row_count=Sheet.getLastRowNum();

		System.out.println("The number of row in the Sheet is :-  "+row_count);

		int rowOfCells_Count=Sheet.getLeftCol();

		System.out.println("The number of roeOfCells in the sheet is :-  "+rowOfCells_Count);

		//===================================================================================================================================================


		//<div id="logInPanelHeading">LOGIN Panel</div>

		String expected_OrangeHrmLogInPanel="LOGIN Panel";
		Log.info("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		// of the current webpage - identifying the LOGIN Panel



		By OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		WebElement OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);
		String actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		Log.info("The Actual OrangeHrm LogIn Page Title is :- "+ actual_OrangeHrmLogInPanel);


		
		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
			Log.info("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(1).createCell(1).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(1).createCell(1).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("FAIL");
		}

		//===================================================================================================================================================

		//Expect Title is - OrangeHRM  (should be same)

		String Expected_orangeHrmLogInPage="OrangeHRM";
		Log.info("The OrangeHRM logIn Page title is :-  "+Expected_orangeHrmLogInPage);


		String Actual_orangenHrmLogInPageText=driver.getTitle();
		Log.info("The OrangenHrm LogIn Page Title is :-  "+Actual_orangenHrmLogInPageText);


		if(Actual_orangenHrmLogInPageText.equals(Expected_orangeHrmLogInPage))
		{
			Log.info("The LogIn Page Title is Match :- PASS");
		Sheet.getRow(1).createCell(4).setCellValue(Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("PASS");
		}
		else {
			Log.info("The LogIn Page Title is NOT Match :- FAIL");
		Sheet.getRow(1).createCell(4).setCellValue("NOT Match - "+Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("FAIL");
		}


		//===================================================================================================================================================


		// UserName - Test Data

		XSSFRow row=Sheet.getRow(1);

		String userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		By userNameProperty=By.id("txtUsername");
		WebElement userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		String password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		By passwordProperty=By.name("txtPassword");
		WebElement password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		By logInProperty=By.className("button");
		WebElement logIn=driver.findElement(logInProperty);
		logIn.click();


		//===================================================================================================================================================


		 //   *********** Expected Text - Welcome (should have)

		// ---->>>>>>>>>>>>>> Performing click on the Welcome WebElement
		         
		         
		// <a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>

		String Expect_WebpageText= "Admin";
		Log.info("The Expected OrangeHrm Home page text is Welcome  :-  "+Expect_WebpageText);


		By welcomeAdminProperty=By.linkText("Welcome Admin");
		WebElement welcome=driver.findElement(welcomeAdminProperty);


		//String actual_welcomeHrefAttributeValue=welcome.getAttribute("id");

		            //OR

		String actual_welcomeHrefAttributeValue=welcome.getText();
		Log.info("The href Attribute value of welcome webElement is :- "+actual_welcomeHrefAttributeValue);


		//if(actual_welcomeHrefAttributeValue.equals(Expect_WebpageText))

		                 //OR

		if(actual_welcomeHrefAttributeValue.contains(Expect_WebpageText))
		{
			Log.info("The text is Match :- PASS");
		Sheet.getRow(1).createCell(9).setCellValue(actual_welcomeHrefAttributeValue);
		Sheet.getRow(1).createCell(10).setCellValue("PASS ");
		}
		else {
			Log.info("The text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(9).setCellValue("Not Match the title Welcome");
		Sheet.getRow(1).createCell(10).setCellValue("Not Match the webpage FAIL");
		}



		//===================================================================================================================================================


		 
		//************Automation  Header link PIM  Button

		   //<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/viewPimModule"
		//id="menu_pim_viewPimModule" class="firstLevelMenu"><b>PIM</b></a>

		By PIMButtonProperty= By.linkText("PIM");
		WebElement PIMElement= driver.findElement(PIMButtonProperty);
		       
		Actions mouseHoverOperation=new Actions(driver);
		mouseHoverOperation.moveToElement(PIMElement).build().perform();

		//************Automation  Header link Add Employee  Button
		       
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee"
		   //id="menu_pim_addEmployee">Add Employee</a>

		By AddEmployeeProperty=By.linkText("Add Employee");
		WebElement AddEmployee=driver.findElement(AddEmployeeProperty);
		AddEmployee.click();



		//===================================================================================================================================================



		//   *********** Expected AddEmployeeText - Full Name (should be same)

		String Expect_AddAdminText="Full Name";
		Log.info("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_AddAdminText);

		//<label class="hasTopFieldHelp">Full Name</label>
		By fullNameProperty=By.className("hasTopFieldHelp");
		WebElement fullName=driver.findElement(fullNameProperty);

		String Actual_AddEmployeeText=fullName.getText();
		Log.info("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_AddEmployeeText);

		if(Actual_AddEmployeeText.equals(Expect_AddAdminText))
		{
			Log.info("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(1).createCell(12).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("PASS");
		}
		else {
			Log.info("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(12).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("FAIL");
		}



		//===================================================================================================================================================
		String addEmployeeUrlAddress="http://127.0.0.1/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee";

		for(int indexrow=1; indexrow<=Sheet.getLastRowNum(); indexrow++) {



		XSSFRow row_AddAdmin=Sheet.getRow(indexrow);

		// --->>>>> This Names is Expected TestData in the Excel Sheet

		            // FirstName - Test Data

		String firstName_TestData=row_AddAdmin.getCell(14).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="firstName" id="firstName">
		By firstNameProperty=By.id("firstName");
		WebElement firstName=driver.findElement(firstNameProperty);
		firstName.sendKeys(firstName_TestData);

		// MiddleName - Test Data
		String middleName_TestData=row_AddAdmin.getCell(15).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="middleName" id="middleName">
		By middleNameProperty=By.id("middleName");
		WebElement middleName=driver.findElement(middleNameProperty);
		middleName.sendKeys(middleName_TestData);

		// LastName - Test Data

		   String lastName_TestData=row_AddAdmin.getCell(16).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="lastName" id="lastName">
		By lastNameProperty=By.id("lastName");
		WebElement lastName=driver.findElement(lastNameProperty);
		lastName.sendKeys(lastName_TestData);

		 
		 
		  //********Enter AddName EmployeeId Automation      



		//<input class="formInputText valid" maxlength="10" type="text"
		//name="employeeId" value="0001" id="employeeId">
		     
		   By employeeIdProperty=By.id("employeeId");
		WebElement employeeId=driver.findElement(employeeIdProperty);
		String Id=employeeId.getAttribute("value");
		     
		Log.info("the EmployId number is :-  "+Id);
		     
		Sheet.getRow(indexrow).createCell(17).setCellValue(Id);


		 //*************  Automation Save Button
		     
		    //<input type="button" class="" id="btnSave" value="Save">
		   
		    By saveProperty= By.id("btnSave");
		    WebElement  save= driver.findElement(saveProperty);
		    save.click();
		     

		//===================================================================================================================================================

		   

		//   *********** Expected Personal Details Text After Click on Save - Full Name (should be same)

		String Expect_PersonalDetailsPageText="Full Name";
		("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_PersonalDetailsPageText);


		//<label for="Full_Name" class="hasTopFieldHelp">Full Name</label>
		By PersonalDetailsPage_FullNameProperty=By.className("hasTopFieldHelp");
		WebElement PersonalDetailsPage_FullName=driver.findElement(PersonalDetailsPage_FullNameProperty);

		String Actual_PersonalDetailsPageText=PersonalDetailsPage_FullName.getText();
		Log.info("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_PersonalDetailsPageText);

		if(Actual_PersonalDetailsPageText.equals(Expect_PersonalDetailsPageText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(indexrow).createCell(19).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(indexrow).createCell(19).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("FAIL");
		}


		System.out.println();
		//===================================================================================================================================================


		// --->>>>> This Names is Actual TestData in the Add Employee Page

		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving FirstName


		   
		//<input value="Madhu" type="text" name="personal[txtEmpFirstName]" class="block default editable" maxlength="30"
		//title="First Name" id="personal_txtEmpFirstName" disabled="disabled">
		 
		By afterSaveFirstNameProperty= By.id("personal_txtEmpFirstName");
		WebElement afterSaveFirstName = driver.findElement(afterSaveFirstNameProperty);
		String Actual_FirstName=afterSaveFirstName.getAttribute("value");
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving MiddleName
		 
		//<input value="Sai" type="text" name="personal[txtEmpMiddleName]" class="block default editable" maxlength="30"
		//title="Middle Name" id="personal_txtEmpMiddleName" disabled="disabled">
		     
		By afterSaveMiddleNameProperty= By.id("personal_txtEmpMiddleName");
		WebElement  afterSaveMiddleName= driver.findElement(afterSaveMiddleNameProperty);
		String Actual_MiddleName=afterSaveMiddleName.getAttribute("value");  
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving LastName
		 
		//<input value="Chandu" type="text" name="personal[txtEmpLastName]" class="block default editable" maxlength="30"
		//title="Last Name" id="personal_txtEmpLastName" disabled="disabled">
		   
		By afterSaveLastNameProperty=By.id("personal_txtEmpLastName");
		WebElement afterSaveLastName=driver.findElement(afterSaveLastNameProperty);
		String Actual_LastName=afterSaveLastName.getAttribute("value");
		 
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving EmployeeId
		 
		//<input value="0021" type="text" name="personal[txtEmployeeId]" maxlength="10" class="editable"
		//id="personal_txtEmployeeId" disabled="disabled">
		 
		   By afterSaveEmployeeIdPrperty=By.id("personal_txtEmployeeId");
		   WebElement afterSaveEmployeeId=driver.findElement(afterSaveEmployeeIdPrperty);
		String Actual_EmployeeId= afterSaveEmployeeId.getAttribute("value");
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  FristName  
		 
		if(Actual_FirstName.equals("Madhu"))
		{
		      System.out.println("After saving the FirstName are same :-  PASS");
		      Sheet.getRow(indexrow).createCell(21).setCellValue(Actual_FirstName);
		      Sheet.getRow(indexrow).createCell(22).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the FirstName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(21).setCellValue("NOT Match - "+Actual_FirstName);
		   Sheet.getRow(indexrow).createCell(22).setCellValue("FAIL");
		}
		 
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  MiddleName  

		if(Actual_MiddleName.equals("Sai"))
		{
		System.out.println("After saving the MiddleName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(23).setCellValue(Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the MiddleName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(23).setCellValue("NOT Match - "+Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  LastName  
		 
		if(Actual_LastName.equals("Chandu"))
		{
		System.out.println("After saving the LastName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(25).setCellValue(Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the LastName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(25).setCellValue("NOT Match - "+Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  EmployeeId
		 
		 
		if(Actual_EmployeeId.equals(Id))
		{
		System.out.println("After saving the EmployeeId are same :-  PASS");
		Sheet.getRow(indexrow).createCell(27).setCellValue(Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("PASS");
		   
		   
		}
		else
		{
		System.out.println("After saving the EmployeeId are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(27).setCellValue("NOT Match - "+Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("FAIL");

		}


		//...............................................................................................



		 
		//*************  Automation  Welcome Admin Button
		   
		//<a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>
		     

		welcomeAdminProperty=By.linkText("Welcome Admin");
		welcome=driver.findElement(welcomeAdminProperty);

		welcome.click();
		     
		Thread.sleep(5000);
		     
		//*************  Automation  Welcome Admin Button  
		     
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/auth/logout">Logout</a>
		     
		By logOutProperty= By.linkText("Logout");
		WebElement logOut=driver.findElement(logOutProperty);
		logOut.click();
		     


		//===================================================================================================================================================


		//Expected Text - LOGIN Panel (should be same)

		//<div id="logInPanelHeading">LOGIN Panel</div>

		expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		  // of the current webpage - identifying the LOGIN Panel



		OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(indexrow).createCell(30).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(indexrow).createCell(30).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("FAIL");
		}






		FileOutputStream Madhu=new FileOutputStream("./src/main/java/testDataResult/AddEmployee.xlsx");
		                 
		       workbook.write(Madhu);

		System.out.println();


		driver.get(addEmployeeUrlAddress);





		// UserName - Test Data

		row=Sheet.getRow(1);

		userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		   userNameProperty=By.id("txtUsername");
		userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		passwordProperty=By.name("txtPassword");
		password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		logInProperty=By.className("button");
		logIn=driver.findElement(logInProperty);
		logIn.click();




		}

		



}













}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-16 20:12:17.275
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-16 20:12:17.277
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-16 20:12:17.386
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.OrangeHrmApplication;

import org.testng.annotations.Test;

import com.utility.Log;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;


public class OrangeHrmEmpolyleListadded extends BaseTest{

	@Test 
	public void Webpage() throws IOException, InterruptedException {
		FileInputStream file=new FileInputStream("./src/main/java/testDataFiles/AddEmployee.xlsx");

		XSSFWorkbook workbook=new XSSFWorkbook(file);

		XSSFSheet Sheet=workbook.getSheet("TestData");

		int row_count=Sheet.getLastRowNum();

		System.out.println("The number of row in the Sheet is :-  "+row_count);

		int rowOfCells_Count=Sheet.getLeftCol();

		System.out.println("The number of roeOfCells in the sheet is :-  "+rowOfCells_Count);

		//===================================================================================================================================================


		//<div id="logInPanelHeading">LOGIN Panel</div>

		String expected_OrangeHrmLogInPanel="LOGIN Panel";
		Log.info("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		// of the current webpage - identifying the LOGIN Panel



		By OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		WebElement OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);
		String actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		Log.info("The Actual OrangeHrm LogIn Page Title is :- "+ actual_OrangeHrmLogInPanel);


		
		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
			Log.info("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(1).createCell(1).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(1).createCell(1).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(1).createCell(2).setCellValue("FAIL");
		}

		//===================================================================================================================================================

		//Expect Title is - OrangeHRM  (should be same)

		String Expected_orangeHrmLogInPage="OrangeHRM";
		Log.info("The OrangeHRM logIn Page title is :-  "+Expected_orangeHrmLogInPage);


		String Actual_orangenHrmLogInPageText=driver.getTitle();
		Log.info("The OrangenHrm LogIn Page Title is :-  "+Actual_orangenHrmLogInPageText);


		if(Actual_orangenHrmLogInPageText.equals(Expected_orangeHrmLogInPage))
		{
			Log.info("The LogIn Page Title is Match :- PASS");
		Sheet.getRow(1).createCell(4).setCellValue(Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("PASS");
		}
		else {
			Log.info("The LogIn Page Title is NOT Match :- FAIL");
		Sheet.getRow(1).createCell(4).setCellValue("NOT Match - "+Actual_orangenHrmLogInPageText);
		Sheet.getRow(1).createCell(5).setCellValue("FAIL");
		}


		//===================================================================================================================================================


		// UserName - Test Data

		XSSFRow row=Sheet.getRow(1);

		String userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		By userNameProperty=By.id("txtUsername");
		WebElement userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		String password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		By passwordProperty=By.name("txtPassword");
		WebElement password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		By logInProperty=By.className("button");
		WebElement logIn=driver.findElement(logInProperty);
		logIn.click();


		//===================================================================================================================================================


		 //   *********** Expected Text - Welcome (should have)

		// ---->>>>>>>>>>>>>> Performing click on the Welcome WebElement
		         
		         
		// <a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>

		String Expect_WebpageText= "Admin";
		Log.info("The Expected OrangeHrm Home page text is Welcome  :-  "+Expect_WebpageText);


		By welcomeAdminProperty=By.linkText("Welcome Admin");
		WebElement welcome=driver.findElement(welcomeAdminProperty);


		//String actual_welcomeHrefAttributeValue=welcome.getAttribute("id");

		            //OR

		String actual_welcomeHrefAttributeValue=welcome.getText();
		Log.info("The href Attribute value of welcome webElement is :- "+actual_welcomeHrefAttributeValue);


		//if(actual_welcomeHrefAttributeValue.equals(Expect_WebpageText))

		                 //OR

		if(actual_welcomeHrefAttributeValue.contains(Expect_WebpageText))
		{
			Log.info("The text is Match :- PASS");
		Sheet.getRow(1).createCell(9).setCellValue(actual_welcomeHrefAttributeValue);
		Sheet.getRow(1).createCell(10).setCellValue("PASS ");
		}
		else {
			Log.info("The text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(9).setCellValue("Not Match the title Welcome");
		Sheet.getRow(1).createCell(10).setCellValue("Not Match the webpage FAIL");
		}



		//===================================================================================================================================================


		 
		//************Automation  Header link PIM  Button

		   //<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/viewPimModule"
		//id="menu_pim_viewPimModule" class="firstLevelMenu"><b>PIM</b></a>

		By PIMButtonProperty= By.linkText("PIM");
		WebElement PIMElement= driver.findElement(PIMButtonProperty);
		       
		Actions mouseHoverOperation=new Actions(driver);
		mouseHoverOperation.moveToElement(PIMElement).build().perform();

		//************Automation  Header link Add Employee  Button
		       
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee"
		   //id="menu_pim_addEmployee">Add Employee</a>

		By AddEmployeeProperty=By.linkText("Add Employee");
		WebElement AddEmployee=driver.findElement(AddEmployeeProperty);
		AddEmployee.click();



		//===================================================================================================================================================



		//   *********** Expected AddEmployeeText - Full Name (should be same)

		String Expect_AddAdminText="Full Name";
		Log.info("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_AddAdminText);

		//<label class="hasTopFieldHelp">Full Name</label>
		By fullNameProperty=By.className("hasTopFieldHelp");
		WebElement fullName=driver.findElement(fullNameProperty);

		String Actual_AddEmployeeText=fullName.getText();
		Log.info("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_AddEmployeeText);

		if(Actual_AddEmployeeText.equals(Expect_AddAdminText))
		{
			Log.info("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(1).createCell(12).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("PASS");
		}
		else {
			Log.info("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(1).createCell(12).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(1).createCell(13).setCellValue("FAIL");
		}



		//===================================================================================================================================================
		String addEmployeeUrlAddress="http://127.0.0.1/orangehrm-4.2.0.1/symfony/web/index.php/pim/addEmployee";

		for(int indexrow=1; indexrow<=Sheet.getLastRowNum(); indexrow++) {



		XSSFRow row_AddAdmin=Sheet.getRow(indexrow);

		// --->>>>> This Names is Expected TestData in the Excel Sheet

		            // FirstName - Test Data

		String firstName_TestData=row_AddAdmin.getCell(14).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="firstName" id="firstName">
		By firstNameProperty=By.id("firstName");
		WebElement firstName=driver.findElement(firstNameProperty);
		firstName.sendKeys(firstName_TestData);

		// MiddleName - Test Data
		String middleName_TestData=row_AddAdmin.getCell(15).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="middleName" id="middleName">
		By middleNameProperty=By.id("middleName");
		WebElement middleName=driver.findElement(middleNameProperty);
		middleName.sendKeys(middleName_TestData);

		// LastName - Test Data

		   String lastName_TestData=row_AddAdmin.getCell(16).getStringCellValue();

		//<input class="formInputText" maxlength="30" type="text" name="lastName" id="lastName">
		By lastNameProperty=By.id("lastName");
		WebElement lastName=driver.findElement(lastNameProperty);
		lastName.sendKeys(lastName_TestData);

		 
		 
		  //********Enter AddName EmployeeId Automation      



		//<input class="formInputText valid" maxlength="10" type="text"
		//name="employeeId" value="0001" id="employeeId">
		     
		   By employeeIdProperty=By.id("employeeId");
		WebElement employeeId=driver.findElement(employeeIdProperty);
		String Id=employeeId.getAttribute("value");
		     
		Log.info("the EmployId number is :-  "+Id);
		     
		Sheet.getRow(indexrow).createCell(17).setCellValue(Id);


		 //*************  Automation Save Button
		     
		    //<input type="button" class="" id="btnSave" value="Save">
		   
		    By saveProperty= By.id("btnSave");
		    WebElement  save= driver.findElement(saveProperty);
		    save.click();
		     

		//===================================================================================================================================================

		   

		//   *********** Expected Personal Details Text After Click on Save - Full Name (should be same)

		String Expect_PersonalDetailsPageText="Full Name";
		("The Expect OrangeHrm AddAdmin page Text is :-  " +Expect_PersonalDetailsPageText);


		//<label for="Full_Name" class="hasTopFieldHelp">Full Name</label>
		By PersonalDetailsPage_FullNameProperty=By.className("hasTopFieldHelp");
		WebElement PersonalDetailsPage_FullName=driver.findElement(PersonalDetailsPage_FullNameProperty);

		String Actual_PersonalDetailsPageText=PersonalDetailsPage_FullName.getText();
		Log.info("The Actual OrangeHrm AddAdmin Page text is :-  "+Actual_PersonalDetailsPageText);

		if(Actual_PersonalDetailsPageText.equals(Expect_PersonalDetailsPageText))
		{
		System.out.println("The Add Employee Page Text is Match ;-  PASS");
		Sheet.getRow(indexrow).createCell(19).setCellValue(Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("PASS");
		}
		else {
		System.out.println("The Add Employee Page Text is NOT Match :-  FAIL");
		Sheet.getRow(indexrow).createCell(19).setCellValue("NOT Match Text - "+Actual_AddEmployeeText);
		Sheet.getRow(indexrow).createCell(20).setCellValue("FAIL");
		}


		System.out.println();
		//===================================================================================================================================================


		// --->>>>> This Names is Actual TestData in the Add Employee Page

		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving FirstName


		   
		//<input value="Madhu" type="text" name="personal[txtEmpFirstName]" class="block default editable" maxlength="30"
		//title="First Name" id="personal_txtEmpFirstName" disabled="disabled">
		 
		By afterSaveFirstNameProperty= By.id("personal_txtEmpFirstName");
		WebElement afterSaveFirstName = driver.findElement(afterSaveFirstNameProperty);
		String Actual_FirstName=afterSaveFirstName.getAttribute("value");
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving MiddleName
		 
		//<input value="Sai" type="text" name="personal[txtEmpMiddleName]" class="block default editable" maxlength="30"
		//title="Middle Name" id="personal_txtEmpMiddleName" disabled="disabled">
		     
		By afterSaveMiddleNameProperty= By.id("personal_txtEmpMiddleName");
		WebElement  afterSaveMiddleName= driver.findElement(afterSaveMiddleNameProperty);
		String Actual_MiddleName=afterSaveMiddleName.getAttribute("value");  
		   
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving LastName
		 
		//<input value="Chandu" type="text" name="personal[txtEmpLastName]" class="block default editable" maxlength="30"
		//title="Last Name" id="personal_txtEmpLastName" disabled="disabled">
		   
		By afterSaveLastNameProperty=By.id("personal_txtEmpLastName");
		WebElement afterSaveLastName=driver.findElement(afterSaveLastNameProperty);
		String Actual_LastName=afterSaveLastName.getAttribute("value");
		 
		//--------------->>>>>>>>>>>>>>>>>>>>      After saving EmployeeId
		 
		//<input value="0021" type="text" name="personal[txtEmployeeId]" maxlength="10" class="editable"
		//id="personal_txtEmployeeId" disabled="disabled">
		 
		   By afterSaveEmployeeIdPrperty=By.id("personal_txtEmployeeId");
		   WebElement afterSaveEmployeeId=driver.findElement(afterSaveEmployeeIdPrperty);
		String Actual_EmployeeId= afterSaveEmployeeId.getAttribute("value");
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  FristName  
		 
		if(Actual_FirstName.equals("Madhu"))
		{
		      System.out.println("After saving the FirstName are same :-  PASS");
		      Sheet.getRow(indexrow).createCell(21).setCellValue(Actual_FirstName);
		      Sheet.getRow(indexrow).createCell(22).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the FirstName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(21).setCellValue("NOT Match - "+Actual_FirstName);
		   Sheet.getRow(indexrow).createCell(22).setCellValue("FAIL");
		}
		 
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  MiddleName  

		if(Actual_MiddleName.equals("Sai"))
		{
		System.out.println("After saving the MiddleName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(23).setCellValue(Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the MiddleName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(23).setCellValue("NOT Match - "+Actual_MiddleName);
		   Sheet.getRow(indexrow).createCell(24).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  LastName  
		 
		if(Actual_LastName.equals("Chandu"))
		{
		System.out.println("After saving the LastName are same :-  PASS");
		Sheet.getRow(indexrow).createCell(25).setCellValue(Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("PASS");
		}
		else
		{
		System.out.println("After saving the LastName are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(25).setCellValue("NOT Match - "+Actual_LastName);
		   Sheet.getRow(indexrow).createCell(26).setCellValue("FAIL");
		}
		 
		//----------->>>>>>>>>>>>>>>>   Comparing Actual & Expected  EmployeeId
		 
		 
		if(Actual_EmployeeId.equals(Id))
		{
		System.out.println("After saving the EmployeeId are same :-  PASS");
		Sheet.getRow(indexrow).createCell(27).setCellValue(Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("PASS");
		   
		   
		}
		else
		{
		System.out.println("After saving the EmployeeId are NOT same :- FAIL ");
		Sheet.getRow(indexrow).createCell(27).setCellValue("NOT Match - "+Actual_EmployeeId);
		   Sheet.getRow(indexrow).createCell(28).setCellValue("FAIL");

		}


		//...............................................................................................



		 
		//*************  Automation  Welcome Admin Button
		   
		//<a href="#" id="welcome" class="panelTrigger">Welcome Admin</a>
		     

		welcomeAdminProperty=By.linkText("Welcome Admin");
		welcome=driver.findElement(welcomeAdminProperty);

		welcome.click();
		     
		Thread.sleep(5000);
		     
		//*************  Automation  Welcome Admin Button  
		     
		//<a href="/orangehrm-4.2.0.1/symfony/web/index.php/auth/logout">Logout</a>
		     
		By logOutProperty= By.linkText("Logout");
		WebElement logOut=driver.findElement(logOutProperty);
		logOut.click();
		     


		//===================================================================================================================================================


		//Expected Text - LOGIN Panel (should be same)

		//<div id="logInPanelHeading">LOGIN Panel</div>

		expected_OrangeHrmLogInPanel="LOGIN Panel";
		System.out.println("The Expected OrangeHrm logIn Page LOGIN Panel is :- "+expected_OrangeHrmLogInPanel);


		  // of the current webpage - identifying the LOGIN Panel



		OrangeHrmLogInPanelProperty=By.id("logInPanelHeading");
		OrangeHrmLogInPanel=driver.findElement(OrangeHrmLogInPanelProperty);

		actual_OrangeHrmLogInPanel=OrangeHrmLogInPanel.getText();
		System.out.println("The Actual OrangeHrm LogIn Page Title is :- "+OrangeHrmLogInPanel);


		if (expected_OrangeHrmLogInPanel.equals(actual_OrangeHrmLogInPanel))
		{
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel Matched - PASS");
		Sheet.getRow(indexrow).createCell(30).setCellValue(actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("PASS");
		}
		else {
		System.out.println("The Title of the OrangenHRM logIn page LOGIN Panel NOT Matched - FAIL");
		Sheet.getRow(indexrow).createCell(30).setCellValue("NOT Match  - "+actual_OrangeHrmLogInPanel);
		Sheet.getRow(indexrow).createCell(31).setCellValue("FAIL");
		}






		FileOutputStream Madhu=new FileOutputStream("./src/main/java/testDataResult/AddEmployee.xlsx");
		                 
		       workbook.write(Madhu);

		System.out.println();


		driver.get(addEmployeeUrlAddress);





		// UserName - Test Data

		row=Sheet.getRow(1);

		userName_TestData=row.getCell(6).getStringCellValue();

		//<input name="txtUsername" id="txtUsername" type="text">
		   userNameProperty=By.id("txtUsername");
		userName=driver.findElement(userNameProperty);
		userName.sendKeys(userName_TestData);

		//UserName Password  -  Test Data

		password_TestData=row.getCell(7).getStringCellValue();

		//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
		passwordProperty=By.name("txtPassword");
		password=driver.findElement(passwordProperty);
		password.sendKeys(password_TestData);


		// Click on LogIn Button

		//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
		logInProperty=By.className("button");
		logIn=driver.findElement(logInProperty);
		logIn.click();




		}

		



}













}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-16 20:12:17.388
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-16 20:12:17.389
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2193)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.testng.eclipse 1 0 2024-02-16 20:18:53.524
!MESSAGE [TestNGLaunchConfigurationDelegate] Launching:
  Classpath: C:\Users\ajayb\eclipse\java-2020-12\eclipse\configuration\org.eclipse.osgi\441\0\.cp\lib\testng-remote.jar C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testing libary\bin C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-codec-1.10.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-collections4-4.1.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-io-2.4.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-logging-1.2.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\curvesapi-1.04.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\log4j-1.2.17.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\mysql-connector-java-5.1.40.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-examples-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-excelant-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-ooxml-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-ooxml-schemas-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-scratchpad-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\xmlbeans-2.6.0.jar C:\Users\ajayb\Downloads\selenium-server-standalone-3.141.59.jar C:\Users\ajayb\Downloads\jar_files\jcommander-1.82.jar C:\Users\ajayb\Downloads\jar_files\jquery-3.6.1.jar C:\Users\ajayb\Downloads\jar_files\slf4j-api-1.7.36.jar C:\Users\ajayb\Downloads\jar_files\testng-7.8.0.jar
  VMArgs:    -ea
  Class:     org.testng.remote.RemoteTestNG
  Args:      -serport 50404 -protocol json -d C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testing libary\test-output C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testing libary\OrangeHrmApplication.xml
java -ea -classpath C:\Users\ajayb\eclipse\java-2020-12\eclipse\configuration\org.eclipse.osgi\441\0\.cp\lib\testng-remote.jar:C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testing libary\bin:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-codec-1.10.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-collections4-4.1.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-io-2.4.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-logging-1.2.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\curvesapi-1.04.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\log4j-1.2.17.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\mysql-connector-java-5.1.40.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-examples-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-excelant-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-ooxml-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-ooxml-schemas-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-scratchpad-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\xmlbeans-2.6.0.jar:C:\Users\ajayb\Downloads\selenium-server-standalone-3.141.59.jar:C:\Users\ajayb\Downloads\jar_files\jcommander-1.82.jar:C:\Users\ajayb\Downloads\jar_files\jquery-3.6.1.jar:C:\Users\ajayb\Downloads\jar_files\slf4j-api-1.7.36.jar:C:\Users\ajayb\Downloads\jar_files\testng-7.8.0.jar org.testng.remote.RemoteTestNG -serport 50404 -protocol json -d C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testing libary\test-output C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testing libary\OrangeHrmApplication.xml

!ENTRY org.testng.eclipse 1 0 2024-02-16 20:20:08.480
!MESSAGE [TestNGLaunchConfigurationDelegate] Launching:
  Classpath: C:\Users\ajayb\eclipse\java-2020-12\eclipse\configuration\org.eclipse.osgi\441\0\.cp\lib\testng-remote.jar C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testing libary\bin C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-codec-1.10.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-collections4-4.1.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-io-2.4.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-logging-1.2.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\curvesapi-1.04.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\log4j-1.2.17.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\mysql-connector-java-5.1.40.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-examples-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-excelant-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-ooxml-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-ooxml-schemas-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-scratchpad-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\xmlbeans-2.6.0.jar C:\Users\ajayb\Downloads\selenium-server-standalone-3.141.59.jar C:\Users\ajayb\Downloads\jar_files\jcommander-1.82.jar C:\Users\ajayb\Downloads\jar_files\jquery-3.6.1.jar C:\Users\ajayb\Downloads\jar_files\slf4j-api-1.7.36.jar C:\Users\ajayb\Downloads\jar_files\testng-7.8.0.jar
  VMArgs:    -ea
  Class:     org.testng.remote.RemoteTestNG
  Args:      -serport 50408 -protocol json -d C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testing libary\test-output C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testing libary\OrangeHrmApplication.xml
java -ea -classpath C:\Users\ajayb\eclipse\java-2020-12\eclipse\configuration\org.eclipse.osgi\441\0\.cp\lib\testng-remote.jar:C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testing libary\bin:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-codec-1.10.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-collections4-4.1.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-io-2.4.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-logging-1.2.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\curvesapi-1.04.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\log4j-1.2.17.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\mysql-connector-java-5.1.40.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-examples-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-excelant-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-ooxml-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-ooxml-schemas-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-scratchpad-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\xmlbeans-2.6.0.jar:C:\Users\ajayb\Downloads\selenium-server-standalone-3.141.59.jar:C:\Users\ajayb\Downloads\jar_files\jcommander-1.82.jar:C:\Users\ajayb\Downloads\jar_files\jquery-3.6.1.jar:C:\Users\ajayb\Downloads\jar_files\slf4j-api-1.7.36.jar:C:\Users\ajayb\Downloads\jar_files\testng-7.8.0.jar org.testng.remote.RemoteTestNG -serport 50408 -protocol json -d C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testing libary\test-output C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testing libary\OrangeHrmApplication.xml

!ENTRY org.testng.eclipse 1 0 2024-02-16 20:20:47.395
!MESSAGE [TestNGLaunchConfigurationDelegate] Launching:
  Classpath: C:\Users\ajayb\eclipse\java-2020-12\eclipse\configuration\org.eclipse.osgi\441\0\.cp\lib\testng-remote.jar C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testinglibary\target\test-classes C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testinglibary\target\classes C:\Users\ajayb\Downloads\jar_files\jcommander-1.82.jar C:\Users\ajayb\Downloads\jar_files\jquery-3.6.1.jar C:\Users\ajayb\Downloads\jar_files\slf4j-api-1.7.36.jar C:\Users\ajayb\Downloads\jar_files\testng-7.8.0.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-codec-1.10.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-collections4-4.1.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-io-2.4.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-logging-1.2.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\curvesapi-1.04.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\log4j-1.2.17.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\mysql-connector-java-5.1.40.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-examples-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-excelant-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-ooxml-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-ooxml-schemas-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-scratchpad-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\xmlbeans-2.6.0.jar C:\Users\ajayb\Downloads\selenium-server-standalone-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-server\3.141.59\selenium-server-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-java\3.141.59\selenium-java-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-api\3.141.59\selenium-api-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-chrome-driver\3.141.59\selenium-chrome-driver-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-edge-driver\3.141.59\selenium-edge-driver-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-firefox-driver\3.141.59\selenium-firefox-driver-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-ie-driver\3.141.59\selenium-ie-driver-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-opera-driver\3.141.59\selenium-opera-driver-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-remote-driver\3.141.59\selenium-remote-driver-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-safari-driver\3.141.59\selenium-safari-driver-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-support\3.141.59\selenium-support-3.141.59.jar C:\Users\ajayb\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar C:\Users\ajayb\.m2\repository\net\bytebuddy\byte-buddy\1.8.15\byte-buddy-1.8.15.jar C:\Users\ajayb\.m2\repository\org\apache\commons\commons-exec\1.3\commons-exec-1.3.jar C:\Users\ajayb\.m2\repository\com\google\guava\guava\25.0-jre\guava-25.0-jre.jar C:\Users\ajayb\.m2\repository\com\google\code\findbugs\jsr305\1.3.9\jsr305-1.3.9.jar C:\Users\ajayb\.m2\repository\org\checkerframework\checker-compat-qual\2.0.0\checker-compat-qual-2.0.0.jar C:\Users\ajayb\.m2\repository\com\google\errorprone\error_prone_annotations\2.1.3\error_prone_annotations-2.1.3.jar C:\Users\ajayb\.m2\repository\com\google\j2objc\j2objc-annotations\1.1\j2objc-annotations-1.1.jar C:\Users\ajayb\.m2\repository\org\codehaus\mojo\animal-sniffer-annotations\1.14\animal-sniffer-annotations-1.14.jar C:\Users\ajayb\.m2\repository\net\jcip\jcip-annotations\1.0\jcip-annotations-1.0.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\jetty-repacked\9.4.12.v20180830\jetty-repacked-9.4.12.v20180830.jar C:\Users\ajayb\.m2\repository\com\squareup\okhttp3\okhttp\3.11.0\okhttp-3.11.0.jar C:\Users\ajayb\.m2\repository\com\squareup\okio\okio\1.14.0\okio-1.14.0.jar C:\Users\ajayb\.m2\repository\javax\servlet\javax.servlet-api\3.1.0\javax.servlet-api-3.1.0.jar C:\Users\ajayb\.m2\repository\org\yaml\snakeyaml\1.19\snakeyaml-1.19.jar C:\Users\ajayb\.m2\repository\junit\junit\4.11\junit-4.11.jar C:\Users\ajayb\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar C:\Users\ajayb\.m2\repository\org\apache\poi\poi\3.9\poi-3.9.jar C:\Users\ajayb\.m2\repository\commons-codec\commons-codec\1.5\commons-codec-1.5.jar C:\Users\ajayb\.m2\repository\org\apache\poi\poi-ooxml\3.9\poi-ooxml-3.9.jar C:\Users\ajayb\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar C:\Users\ajayb\.m2\repository\xml-apis\xml-apis\1.0.b2\xml-apis-1.0.b2.jar C:\Users\ajayb\.m2\repository\org\apache\poi\poi-ooxml-schemas\3.9\poi-ooxml-schemas-3.9.jar C:\Users\ajayb\.m2\repository\org\apache\xmlbeans\xmlbeans\2.3.0\xmlbeans-2.3.0.jar C:\Users\ajayb\.m2\repository\stax\stax-api\1.0.1\stax-api-1.0.1.jar C:\Users\ajayb\.m2\repository\org\apache\poi\poi-scratchpad\3.9\poi-scratchpad-3.9.jar C:\Users\ajayb\.m2\repository\org\apache\poi\ooxml-schemas\1.1\ooxml-schemas-1.1.jar C:\Users\ajayb\.m2\repository\log4j\log4j\1.2.12\log4j-1.2.12.jar C:\Users\ajayb\.m2\repository\commons-io\commons-io\2.11.0\commons-io-2.11.0.jar C:\Users\ajayb\.m2\repository\org\testng\testng\7.4.0\testng-7.4.0.jar C:\Users\ajayb\.m2\repository\org\webjars\jquery\3.5.1\jquery-3.5.1.jar
  VMArgs:    -ea
  Class:     org.testng.remote.RemoteTestNG
  Args:      -serport 50410 -protocol json -d C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testinglibary\test-output C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testinglibary\OrangeHrmApplication.xml
java -ea -classpath C:\Users\ajayb\eclipse\java-2020-12\eclipse\configuration\org.eclipse.osgi\441\0\.cp\lib\testng-remote.jar:C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testinglibary\target\test-classes:C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testinglibary\target\classes:C:\Users\ajayb\Downloads\jar_files\jcommander-1.82.jar:C:\Users\ajayb\Downloads\jar_files\jquery-3.6.1.jar:C:\Users\ajayb\Downloads\jar_files\slf4j-api-1.7.36.jar:C:\Users\ajayb\Downloads\jar_files\testng-7.8.0.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-codec-1.10.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-collections4-4.1.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-io-2.4.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-logging-1.2.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\curvesapi-1.04.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\log4j-1.2.17.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\mysql-connector-java-5.1.40.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-examples-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-excelant-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-ooxml-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-ooxml-schemas-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-scratchpad-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\xmlbeans-2.6.0.jar:C:\Users\ajayb\Downloads\selenium-server-standalone-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-server\3.141.59\selenium-server-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-java\3.141.59\selenium-java-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-api\3.141.59\selenium-api-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-chrome-driver\3.141.59\selenium-chrome-driver-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-edge-driver\3.141.59\selenium-edge-driver-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-firefox-driver\3.141.59\selenium-firefox-driver-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-ie-driver\3.141.59\selenium-ie-driver-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-opera-driver\3.141.59\selenium-opera-driver-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-remote-driver\3.141.59\selenium-remote-driver-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-safari-driver\3.141.59\selenium-safari-driver-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-support\3.141.59\selenium-support-3.141.59.jar:C:\Users\ajayb\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar:C:\Users\ajayb\.m2\repository\net\bytebuddy\byte-buddy\1.8.15\byte-buddy-1.8.15.jar:C:\Users\ajayb\.m2\repository\org\apache\commons\commons-exec\1.3\commons-exec-1.3.jar:C:\Users\ajayb\.m2\repository\com\google\guava\guava\25.0-jre\guava-25.0-jre.jar:C:\Users\ajayb\.m2\repository\com\google\code\findbugs\jsr305\1.3.9\jsr305-1.3.9.jar:C:\Users\ajayb\.m2\repository\org\checkerframework\checker-compat-qual\2.0.0\checker-compat-qual-2.0.0.jar:C:\Users\ajayb\.m2\repository\com\google\errorprone\error_prone_annotations\2.1.3\error_prone_annotations-2.1.3.jar:C:\Users\ajayb\.m2\repository\com\google\j2objc\j2objc-annotations\1.1\j2objc-annotations-1.1.jar:C:\Users\ajayb\.m2\repository\org\codehaus\mojo\animal-sniffer-annotations\1.14\animal-sniffer-annotations-1.14.jar:C:\Users\ajayb\.m2\repository\net\jcip\jcip-annotations\1.0\jcip-annotations-1.0.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\jetty-repacked\9.4.12.v20180830\jetty-repacked-9.4.12.v20180830.jar:C:\Users\ajayb\.m2\repository\com\squareup\okhttp3\okhttp\3.11.0\okhttp-3.11.0.jar:C:\Users\ajayb\.m2\repository\com\squareup\okio\okio\1.14.0\okio-1.14.0.jar:C:\Users\ajayb\.m2\repository\javax\servlet\javax.servlet-api\3.1.0\javax.servlet-api-3.1.0.jar:C:\Users\ajayb\.m2\repository\org\yaml\snakeyaml\1.19\snakeyaml-1.19.jar:C:\Users\ajayb\.m2\repository\junit\junit\4.11\junit-4.11.jar:C:\Users\ajayb\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar:C:\Users\ajayb\.m2\repository\org\apache\poi\poi\3.9\poi-3.9.jar:C:\Users\ajayb\.m2\repository\commons-codec\commons-codec\1.5\commons-codec-1.5.jar:C:\Users\ajayb\.m2\repository\org\apache\poi\poi-ooxml\3.9\poi-ooxml-3.9.jar:C:\Users\ajayb\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar:C:\Users\ajayb\.m2\repository\xml-apis\xml-apis\1.0.b2\xml-apis-1.0.b2.jar:C:\Users\ajayb\.m2\repository\org\apache\poi\poi-ooxml-schemas\3.9\poi-ooxml-schemas-3.9.jar:C:\Users\ajayb\.m2\repository\org\apache\xmlbeans\xmlbeans\2.3.0\xmlbeans-2.3.0.jar:C:\Users\ajayb\.m2\repository\stax\stax-api\1.0.1\stax-api-1.0.1.jar:C:\Users\ajayb\.m2\repository\org\apache\poi\poi-scratchpad\3.9\poi-scratchpad-3.9.jar:C:\Users\ajayb\.m2\repository\org\apache\poi\ooxml-schemas\1.1\ooxml-schemas-1.1.jar:C:\Users\ajayb\.m2\repository\log4j\log4j\1.2.12\log4j-1.2.12.jar:C:\Users\ajayb\.m2\repository\commons-io\commons-io\2.11.0\commons-io-2.11.0.jar:C:\Users\ajayb\.m2\repository\org\testng\testng\7.4.0\testng-7.4.0.jar:C:\Users\ajayb\.m2\repository\org\webjars\jquery\3.5.1\jquery-3.5.1.jar org.testng.remote.RemoteTestNG -serport 50410 -protocol json -d C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testinglibary\test-output C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testinglibary\OrangeHrmApplication.xml
!SESSION 2024-02-17 20:56:23.899 -----------------------------------------------
eclipse.buildId=4.18.0.I20201202-1800
java.version=11.0.15
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_IN
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2024-02-17 20:56:45.568
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2024-02-17 20:56:45.568
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@69d021c1,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@6d5508a5,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2024-02-17 20:56:58.940
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\ajayb'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.testng.eclipse 1 0 2024-02-17 21:11:04.913
!MESSAGE [TestNGLaunchConfigurationDelegate] Launching:
  Classpath: C:\Users\ajayb\eclipse\java-2020-12\eclipse\configuration\org.eclipse.osgi\441\0\.cp\lib\testng-remote.jar C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testinglibary\target\test-classes C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testinglibary\target\classes C:\Users\ajayb\Downloads\jar_files\jcommander-1.82.jar C:\Users\ajayb\Downloads\jar_files\jquery-3.6.1.jar C:\Users\ajayb\Downloads\jar_files\slf4j-api-1.7.36.jar C:\Users\ajayb\Downloads\jar_files\testng-7.8.0.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-codec-1.10.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-collections4-4.1.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-io-2.4.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-logging-1.2.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\curvesapi-1.04.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\log4j-1.2.17.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\mysql-connector-java-5.1.40.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-examples-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-excelant-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-ooxml-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-ooxml-schemas-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-scratchpad-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\xmlbeans-2.6.0.jar C:\Users\ajayb\Downloads\selenium-server-standalone-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-server\3.141.59\selenium-server-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-java\3.141.59\selenium-java-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-api\3.141.59\selenium-api-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-chrome-driver\3.141.59\selenium-chrome-driver-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-edge-driver\3.141.59\selenium-edge-driver-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-firefox-driver\3.141.59\selenium-firefox-driver-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-ie-driver\3.141.59\selenium-ie-driver-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-opera-driver\3.141.59\selenium-opera-driver-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-remote-driver\3.141.59\selenium-remote-driver-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-safari-driver\3.141.59\selenium-safari-driver-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-support\3.141.59\selenium-support-3.141.59.jar C:\Users\ajayb\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar C:\Users\ajayb\.m2\repository\net\bytebuddy\byte-buddy\1.8.15\byte-buddy-1.8.15.jar C:\Users\ajayb\.m2\repository\org\apache\commons\commons-exec\1.3\commons-exec-1.3.jar C:\Users\ajayb\.m2\repository\com\google\guava\guava\25.0-jre\guava-25.0-jre.jar C:\Users\ajayb\.m2\repository\com\google\code\findbugs\jsr305\1.3.9\jsr305-1.3.9.jar C:\Users\ajayb\.m2\repository\org\checkerframework\checker-compat-qual\2.0.0\checker-compat-qual-2.0.0.jar C:\Users\ajayb\.m2\repository\com\google\errorprone\error_prone_annotations\2.1.3\error_prone_annotations-2.1.3.jar C:\Users\ajayb\.m2\repository\com\google\j2objc\j2objc-annotations\1.1\j2objc-annotations-1.1.jar C:\Users\ajayb\.m2\repository\org\codehaus\mojo\animal-sniffer-annotations\1.14\animal-sniffer-annotations-1.14.jar C:\Users\ajayb\.m2\repository\net\jcip\jcip-annotations\1.0\jcip-annotations-1.0.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\jetty-repacked\9.4.12.v20180830\jetty-repacked-9.4.12.v20180830.jar C:\Users\ajayb\.m2\repository\com\squareup\okhttp3\okhttp\3.11.0\okhttp-3.11.0.jar C:\Users\ajayb\.m2\repository\com\squareup\okio\okio\1.14.0\okio-1.14.0.jar C:\Users\ajayb\.m2\repository\javax\servlet\javax.servlet-api\3.1.0\javax.servlet-api-3.1.0.jar C:\Users\ajayb\.m2\repository\org\yaml\snakeyaml\1.19\snakeyaml-1.19.jar C:\Users\ajayb\.m2\repository\junit\junit\4.11\junit-4.11.jar C:\Users\ajayb\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar C:\Users\ajayb\.m2\repository\org\apache\poi\poi\3.9\poi-3.9.jar C:\Users\ajayb\.m2\repository\commons-codec\commons-codec\1.5\commons-codec-1.5.jar C:\Users\ajayb\.m2\repository\org\apache\poi\poi-ooxml\3.9\poi-ooxml-3.9.jar C:\Users\ajayb\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar C:\Users\ajayb\.m2\repository\xml-apis\xml-apis\1.0.b2\xml-apis-1.0.b2.jar C:\Users\ajayb\.m2\repository\org\apache\poi\poi-ooxml-schemas\3.9\poi-ooxml-schemas-3.9.jar C:\Users\ajayb\.m2\repository\org\apache\xmlbeans\xmlbeans\2.3.0\xmlbeans-2.3.0.jar C:\Users\ajayb\.m2\repository\stax\stax-api\1.0.1\stax-api-1.0.1.jar C:\Users\ajayb\.m2\repository\org\apache\poi\poi-scratchpad\3.9\poi-scratchpad-3.9.jar C:\Users\ajayb\.m2\repository\org\apache\poi\ooxml-schemas\1.1\ooxml-schemas-1.1.jar C:\Users\ajayb\.m2\repository\log4j\log4j\1.2.12\log4j-1.2.12.jar C:\Users\ajayb\.m2\repository\commons-io\commons-io\2.11.0\commons-io-2.11.0.jar C:\Users\ajayb\.m2\repository\org\testng\testng\7.4.0\testng-7.4.0.jar C:\Users\ajayb\.m2\repository\org\webjars\jquery\3.5.1\jquery-3.5.1.jar
  VMArgs:    -ea
  Class:     org.testng.remote.RemoteTestNG
  Args:      -serport 50316 -protocol json -d C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testinglibary\test-output C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testinglibary\OrangeHrmApplication.xml
java -ea -classpath C:\Users\ajayb\eclipse\java-2020-12\eclipse\configuration\org.eclipse.osgi\441\0\.cp\lib\testng-remote.jar:C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testinglibary\target\test-classes:C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testinglibary\target\classes:C:\Users\ajayb\Downloads\jar_files\jcommander-1.82.jar:C:\Users\ajayb\Downloads\jar_files\jquery-3.6.1.jar:C:\Users\ajayb\Downloads\jar_files\slf4j-api-1.7.36.jar:C:\Users\ajayb\Downloads\jar_files\testng-7.8.0.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-codec-1.10.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-collections4-4.1.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-io-2.4.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-logging-1.2.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\curvesapi-1.04.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\log4j-1.2.17.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\mysql-connector-java-5.1.40.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-examples-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-excelant-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-ooxml-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-ooxml-schemas-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-scratchpad-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\xmlbeans-2.6.0.jar:C:\Users\ajayb\Downloads\selenium-server-standalone-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-server\3.141.59\selenium-server-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-java\3.141.59\selenium-java-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-api\3.141.59\selenium-api-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-chrome-driver\3.141.59\selenium-chrome-driver-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-edge-driver\3.141.59\selenium-edge-driver-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-firefox-driver\3.141.59\selenium-firefox-driver-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-ie-driver\3.141.59\selenium-ie-driver-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-opera-driver\3.141.59\selenium-opera-driver-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-remote-driver\3.141.59\selenium-remote-driver-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-safari-driver\3.141.59\selenium-safari-driver-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-support\3.141.59\selenium-support-3.141.59.jar:C:\Users\ajayb\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar:C:\Users\ajayb\.m2\repository\net\bytebuddy\byte-buddy\1.8.15\byte-buddy-1.8.15.jar:C:\Users\ajayb\.m2\repository\org\apache\commons\commons-exec\1.3\commons-exec-1.3.jar:C:\Users\ajayb\.m2\repository\com\google\guava\guava\25.0-jre\guava-25.0-jre.jar:C:\Users\ajayb\.m2\repository\com\google\code\findbugs\jsr305\1.3.9\jsr305-1.3.9.jar:C:\Users\ajayb\.m2\repository\org\checkerframework\checker-compat-qual\2.0.0\checker-compat-qual-2.0.0.jar:C:\Users\ajayb\.m2\repository\com\google\errorprone\error_prone_annotations\2.1.3\error_prone_annotations-2.1.3.jar:C:\Users\ajayb\.m2\repository\com\google\j2objc\j2objc-annotations\1.1\j2objc-annotations-1.1.jar:C:\Users\ajayb\.m2\repository\org\codehaus\mojo\animal-sniffer-annotations\1.14\animal-sniffer-annotations-1.14.jar:C:\Users\ajayb\.m2\repository\net\jcip\jcip-annotations\1.0\jcip-annotations-1.0.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\jetty-repacked\9.4.12.v20180830\jetty-repacked-9.4.12.v20180830.jar:C:\Users\ajayb\.m2\repository\com\squareup\okhttp3\okhttp\3.11.0\okhttp-3.11.0.jar:C:\Users\ajayb\.m2\repository\com\squareup\okio\okio\1.14.0\okio-1.14.0.jar:C:\Users\ajayb\.m2\repository\javax\servlet\javax.servlet-api\3.1.0\javax.servlet-api-3.1.0.jar:C:\Users\ajayb\.m2\repository\org\yaml\snakeyaml\1.19\snakeyaml-1.19.jar:C:\Users\ajayb\.m2\repository\junit\junit\4.11\junit-4.11.jar:C:\Users\ajayb\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar:C:\Users\ajayb\.m2\repository\org\apache\poi\poi\3.9\poi-3.9.jar:C:\Users\ajayb\.m2\repository\commons-codec\commons-codec\1.5\commons-codec-1.5.jar:C:\Users\ajayb\.m2\repository\org\apache\poi\poi-ooxml\3.9\poi-ooxml-3.9.jar:C:\Users\ajayb\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar:C:\Users\ajayb\.m2\repository\xml-apis\xml-apis\1.0.b2\xml-apis-1.0.b2.jar:C:\Users\ajayb\.m2\repository\org\apache\poi\poi-ooxml-schemas\3.9\poi-ooxml-schemas-3.9.jar:C:\Users\ajayb\.m2\repository\org\apache\xmlbeans\xmlbeans\2.3.0\xmlbeans-2.3.0.jar:C:\Users\ajayb\.m2\repository\stax\stax-api\1.0.1\stax-api-1.0.1.jar:C:\Users\ajayb\.m2\repository\org\apache\poi\poi-scratchpad\3.9\poi-scratchpad-3.9.jar:C:\Users\ajayb\.m2\repository\org\apache\poi\ooxml-schemas\1.1\ooxml-schemas-1.1.jar:C:\Users\ajayb\.m2\repository\log4j\log4j\1.2.12\log4j-1.2.12.jar:C:\Users\ajayb\.m2\repository\commons-io\commons-io\2.11.0\commons-io-2.11.0.jar:C:\Users\ajayb\.m2\repository\org\testng\testng\7.4.0\testng-7.4.0.jar:C:\Users\ajayb\.m2\repository\org\webjars\jquery\3.5.1\jquery-3.5.1.jar org.testng.remote.RemoteTestNG -serport 50316 -protocol json -d C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testinglibary\test-output C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testinglibary\OrangeHrmApplication.xml

!ENTRY org.testng.eclipse 1 0 2024-02-17 21:12:05.150
!MESSAGE [TestNGLaunchConfigurationDelegate] Launching:
  Classpath: C:\Users\ajayb\eclipse\java-2020-12\eclipse\configuration\org.eclipse.osgi\441\0\.cp\lib\testng-remote.jar C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testinglibary\target\test-classes C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testinglibary\target\classes C:\Users\ajayb\Downloads\jar_files\jcommander-1.82.jar C:\Users\ajayb\Downloads\jar_files\jquery-3.6.1.jar C:\Users\ajayb\Downloads\jar_files\slf4j-api-1.7.36.jar C:\Users\ajayb\Downloads\jar_files\testng-7.8.0.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-codec-1.10.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-collections4-4.1.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-io-2.4.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-logging-1.2.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\curvesapi-1.04.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\log4j-1.2.17.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\mysql-connector-java-5.1.40.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-examples-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-excelant-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-ooxml-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-ooxml-schemas-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-scratchpad-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\xmlbeans-2.6.0.jar C:\Users\ajayb\Downloads\selenium-server-standalone-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-server\3.141.59\selenium-server-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-java\3.141.59\selenium-java-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-api\3.141.59\selenium-api-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-chrome-driver\3.141.59\selenium-chrome-driver-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-edge-driver\3.141.59\selenium-edge-driver-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-firefox-driver\3.141.59\selenium-firefox-driver-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-ie-driver\3.141.59\selenium-ie-driver-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-opera-driver\3.141.59\selenium-opera-driver-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-remote-driver\3.141.59\selenium-remote-driver-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-safari-driver\3.141.59\selenium-safari-driver-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-support\3.141.59\selenium-support-3.141.59.jar C:\Users\ajayb\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar C:\Users\ajayb\.m2\repository\net\bytebuddy\byte-buddy\1.8.15\byte-buddy-1.8.15.jar C:\Users\ajayb\.m2\repository\org\apache\commons\commons-exec\1.3\commons-exec-1.3.jar C:\Users\ajayb\.m2\repository\com\google\guava\guava\25.0-jre\guava-25.0-jre.jar C:\Users\ajayb\.m2\repository\com\google\code\findbugs\jsr305\1.3.9\jsr305-1.3.9.jar C:\Users\ajayb\.m2\repository\org\checkerframework\checker-compat-qual\2.0.0\checker-compat-qual-2.0.0.jar C:\Users\ajayb\.m2\repository\com\google\errorprone\error_prone_annotations\2.1.3\error_prone_annotations-2.1.3.jar C:\Users\ajayb\.m2\repository\com\google\j2objc\j2objc-annotations\1.1\j2objc-annotations-1.1.jar C:\Users\ajayb\.m2\repository\org\codehaus\mojo\animal-sniffer-annotations\1.14\animal-sniffer-annotations-1.14.jar C:\Users\ajayb\.m2\repository\net\jcip\jcip-annotations\1.0\jcip-annotations-1.0.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\jetty-repacked\9.4.12.v20180830\jetty-repacked-9.4.12.v20180830.jar C:\Users\ajayb\.m2\repository\com\squareup\okhttp3\okhttp\3.11.0\okhttp-3.11.0.jar C:\Users\ajayb\.m2\repository\com\squareup\okio\okio\1.14.0\okio-1.14.0.jar C:\Users\ajayb\.m2\repository\javax\servlet\javax.servlet-api\3.1.0\javax.servlet-api-3.1.0.jar C:\Users\ajayb\.m2\repository\org\yaml\snakeyaml\1.19\snakeyaml-1.19.jar C:\Users\ajayb\.m2\repository\junit\junit\4.11\junit-4.11.jar C:\Users\ajayb\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar C:\Users\ajayb\.m2\repository\org\apache\poi\poi\3.9\poi-3.9.jar C:\Users\ajayb\.m2\repository\commons-codec\commons-codec\1.5\commons-codec-1.5.jar C:\Users\ajayb\.m2\repository\org\apache\poi\poi-ooxml\3.9\poi-ooxml-3.9.jar C:\Users\ajayb\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar C:\Users\ajayb\.m2\repository\xml-apis\xml-apis\1.0.b2\xml-apis-1.0.b2.jar C:\Users\ajayb\.m2\repository\org\apache\poi\poi-ooxml-schemas\3.9\poi-ooxml-schemas-3.9.jar C:\Users\ajayb\.m2\repository\org\apache\xmlbeans\xmlbeans\2.3.0\xmlbeans-2.3.0.jar C:\Users\ajayb\.m2\repository\stax\stax-api\1.0.1\stax-api-1.0.1.jar C:\Users\ajayb\.m2\repository\org\apache\poi\poi-scratchpad\3.9\poi-scratchpad-3.9.jar C:\Users\ajayb\.m2\repository\org\apache\poi\ooxml-schemas\1.1\ooxml-schemas-1.1.jar C:\Users\ajayb\.m2\repository\log4j\log4j\1.2.12\log4j-1.2.12.jar C:\Users\ajayb\.m2\repository\commons-io\commons-io\2.11.0\commons-io-2.11.0.jar C:\Users\ajayb\.m2\repository\org\testng\testng\7.4.0\testng-7.4.0.jar C:\Users\ajayb\.m2\repository\org\webjars\jquery\3.5.1\jquery-3.5.1.jar
  VMArgs:    -ea
  Class:     org.testng.remote.RemoteTestNG
  Args:      -serport 50319 -protocol json -d C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testinglibary\test-output C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testinglibary\OrangeHrmApplication.xml
java -ea -classpath C:\Users\ajayb\eclipse\java-2020-12\eclipse\configuration\org.eclipse.osgi\441\0\.cp\lib\testng-remote.jar:C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testinglibary\target\test-classes:C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testinglibary\target\classes:C:\Users\ajayb\Downloads\jar_files\jcommander-1.82.jar:C:\Users\ajayb\Downloads\jar_files\jquery-3.6.1.jar:C:\Users\ajayb\Downloads\jar_files\slf4j-api-1.7.36.jar:C:\Users\ajayb\Downloads\jar_files\testng-7.8.0.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-codec-1.10.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-collections4-4.1.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-io-2.4.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-logging-1.2.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\curvesapi-1.04.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\log4j-1.2.17.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\mysql-connector-java-5.1.40.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-examples-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-excelant-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-ooxml-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-ooxml-schemas-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-scratchpad-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\xmlbeans-2.6.0.jar:C:\Users\ajayb\Downloads\selenium-server-standalone-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-server\3.141.59\selenium-server-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-java\3.141.59\selenium-java-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-api\3.141.59\selenium-api-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-chrome-driver\3.141.59\selenium-chrome-driver-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-edge-driver\3.141.59\selenium-edge-driver-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-firefox-driver\3.141.59\selenium-firefox-driver-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-ie-driver\3.141.59\selenium-ie-driver-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-opera-driver\3.141.59\selenium-opera-driver-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-remote-driver\3.141.59\selenium-remote-driver-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-safari-driver\3.141.59\selenium-safari-driver-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-support\3.141.59\selenium-support-3.141.59.jar:C:\Users\ajayb\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar:C:\Users\ajayb\.m2\repository\net\bytebuddy\byte-buddy\1.8.15\byte-buddy-1.8.15.jar:C:\Users\ajayb\.m2\repository\org\apache\commons\commons-exec\1.3\commons-exec-1.3.jar:C:\Users\ajayb\.m2\repository\com\google\guava\guava\25.0-jre\guava-25.0-jre.jar:C:\Users\ajayb\.m2\repository\com\google\code\findbugs\jsr305\1.3.9\jsr305-1.3.9.jar:C:\Users\ajayb\.m2\repository\org\checkerframework\checker-compat-qual\2.0.0\checker-compat-qual-2.0.0.jar:C:\Users\ajayb\.m2\repository\com\google\errorprone\error_prone_annotations\2.1.3\error_prone_annotations-2.1.3.jar:C:\Users\ajayb\.m2\repository\com\google\j2objc\j2objc-annotations\1.1\j2objc-annotations-1.1.jar:C:\Users\ajayb\.m2\repository\org\codehaus\mojo\animal-sniffer-annotations\1.14\animal-sniffer-annotations-1.14.jar:C:\Users\ajayb\.m2\repository\net\jcip\jcip-annotations\1.0\jcip-annotations-1.0.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\jetty-repacked\9.4.12.v20180830\jetty-repacked-9.4.12.v20180830.jar:C:\Users\ajayb\.m2\repository\com\squareup\okhttp3\okhttp\3.11.0\okhttp-3.11.0.jar:C:\Users\ajayb\.m2\repository\com\squareup\okio\okio\1.14.0\okio-1.14.0.jar:C:\Users\ajayb\.m2\repository\javax\servlet\javax.servlet-api\3.1.0\javax.servlet-api-3.1.0.jar:C:\Users\ajayb\.m2\repository\org\yaml\snakeyaml\1.19\snakeyaml-1.19.jar:C:\Users\ajayb\.m2\repository\junit\junit\4.11\junit-4.11.jar:C:\Users\ajayb\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar:C:\Users\ajayb\.m2\repository\org\apache\poi\poi\3.9\poi-3.9.jar:C:\Users\ajayb\.m2\repository\commons-codec\commons-codec\1.5\commons-codec-1.5.jar:C:\Users\ajayb\.m2\repository\org\apache\poi\poi-ooxml\3.9\poi-ooxml-3.9.jar:C:\Users\ajayb\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar:C:\Users\ajayb\.m2\repository\xml-apis\xml-apis\1.0.b2\xml-apis-1.0.b2.jar:C:\Users\ajayb\.m2\repository\org\apache\poi\poi-ooxml-schemas\3.9\poi-ooxml-schemas-3.9.jar:C:\Users\ajayb\.m2\repository\org\apache\xmlbeans\xmlbeans\2.3.0\xmlbeans-2.3.0.jar:C:\Users\ajayb\.m2\repository\stax\stax-api\1.0.1\stax-api-1.0.1.jar:C:\Users\ajayb\.m2\repository\org\apache\poi\poi-scratchpad\3.9\poi-scratchpad-3.9.jar:C:\Users\ajayb\.m2\repository\org\apache\poi\ooxml-schemas\1.1\ooxml-schemas-1.1.jar:C:\Users\ajayb\.m2\repository\log4j\log4j\1.2.12\log4j-1.2.12.jar:C:\Users\ajayb\.m2\repository\commons-io\commons-io\2.11.0\commons-io-2.11.0.jar:C:\Users\ajayb\.m2\repository\org\testng\testng\7.4.0\testng-7.4.0.jar:C:\Users\ajayb\.m2\repository\org\webjars\jquery\3.5.1\jquery-3.5.1.jar org.testng.remote.RemoteTestNG -serport 50319 -protocol json -d C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testinglibary\test-output C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testinglibary\OrangeHrmApplication.xml

!ENTRY org.eclipse.debug.ui 4 120 2024-02-17 21:24:46.898
!MESSAGE Error logged from Debug UI: 
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.FutureTask.awaitDone(FutureTask.java:418)
	at java.base/java.util.concurrent.FutureTask.get(FutureTask.java:203)
	at org.eclipse.debug.internal.ui.stringsubstitution.SelectedResourceManager.runInUIThreadWithTimeout(SelectedResourceManager.java:262)
	at org.eclipse.debug.internal.ui.stringsubstitution.SelectedResourceManager.getFromUI(SelectedResourceManager.java:240)
	at org.eclipse.debug.internal.ui.stringsubstitution.SelectedResourceManager.getActiveWindow(SelectedResourceManager.java:231)
	at org.eclipse.debug.ui.DebugUITools.getDebugContext(DebugUITools.java:247)
	at org.eclipse.jdt.internal.debug.ui.JavaDebugHover.getFrame(JavaDebugHover.java:97)
	at org.eclipse.jdt.internal.debug.ui.JavaDebugHover.getHoverInfo2(JavaDebugHover.java:251)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.testng.eclipse 1 0 2024-02-17 21:26:32.465
!MESSAGE [TestNGLaunchConfigurationDelegate] Launching:
  Classpath: C:\Users\ajayb\eclipse\java-2020-12\eclipse\configuration\org.eclipse.osgi\441\0\.cp\lib\testng-remote.jar C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testinglibary\target\test-classes C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testinglibary\target\classes C:\Users\ajayb\Downloads\jar_files\jcommander-1.82.jar C:\Users\ajayb\Downloads\jar_files\jquery-3.6.1.jar C:\Users\ajayb\Downloads\jar_files\slf4j-api-1.7.36.jar C:\Users\ajayb\Downloads\jar_files\testng-7.8.0.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-codec-1.10.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-collections4-4.1.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-io-2.4.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-logging-1.2.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\curvesapi-1.04.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\log4j-1.2.17.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\mysql-connector-java-5.1.40.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-examples-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-excelant-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-ooxml-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-ooxml-schemas-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-scratchpad-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\xmlbeans-2.6.0.jar C:\Users\ajayb\Downloads\selenium-server-standalone-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-server\3.141.59\selenium-server-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-java\3.141.59\selenium-java-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-api\3.141.59\selenium-api-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-chrome-driver\3.141.59\selenium-chrome-driver-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-edge-driver\3.141.59\selenium-edge-driver-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-firefox-driver\3.141.59\selenium-firefox-driver-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-ie-driver\3.141.59\selenium-ie-driver-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-opera-driver\3.141.59\selenium-opera-driver-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-remote-driver\3.141.59\selenium-remote-driver-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-safari-driver\3.141.59\selenium-safari-driver-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-support\3.141.59\selenium-support-3.141.59.jar C:\Users\ajayb\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar C:\Users\ajayb\.m2\repository\net\bytebuddy\byte-buddy\1.8.15\byte-buddy-1.8.15.jar C:\Users\ajayb\.m2\repository\org\apache\commons\commons-exec\1.3\commons-exec-1.3.jar C:\Users\ajayb\.m2\repository\com\google\guava\guava\25.0-jre\guava-25.0-jre.jar C:\Users\ajayb\.m2\repository\com\google\code\findbugs\jsr305\1.3.9\jsr305-1.3.9.jar C:\Users\ajayb\.m2\repository\org\checkerframework\checker-compat-qual\2.0.0\checker-compat-qual-2.0.0.jar C:\Users\ajayb\.m2\repository\com\google\errorprone\error_prone_annotations\2.1.3\error_prone_annotations-2.1.3.jar C:\Users\ajayb\.m2\repository\com\google\j2objc\j2objc-annotations\1.1\j2objc-annotations-1.1.jar C:\Users\ajayb\.m2\repository\org\codehaus\mojo\animal-sniffer-annotations\1.14\animal-sniffer-annotations-1.14.jar C:\Users\ajayb\.m2\repository\net\jcip\jcip-annotations\1.0\jcip-annotations-1.0.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\jetty-repacked\9.4.12.v20180830\jetty-repacked-9.4.12.v20180830.jar C:\Users\ajayb\.m2\repository\com\squareup\okhttp3\okhttp\3.11.0\okhttp-3.11.0.jar C:\Users\ajayb\.m2\repository\com\squareup\okio\okio\1.14.0\okio-1.14.0.jar C:\Users\ajayb\.m2\repository\javax\servlet\javax.servlet-api\3.1.0\javax.servlet-api-3.1.0.jar C:\Users\ajayb\.m2\repository\org\yaml\snakeyaml\1.19\snakeyaml-1.19.jar C:\Users\ajayb\.m2\repository\junit\junit\4.11\junit-4.11.jar C:\Users\ajayb\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar C:\Users\ajayb\.m2\repository\org\apache\poi\poi\3.9\poi-3.9.jar C:\Users\ajayb\.m2\repository\commons-codec\commons-codec\1.5\commons-codec-1.5.jar C:\Users\ajayb\.m2\repository\org\apache\poi\poi-ooxml\3.9\poi-ooxml-3.9.jar C:\Users\ajayb\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar C:\Users\ajayb\.m2\repository\xml-apis\xml-apis\1.0.b2\xml-apis-1.0.b2.jar C:\Users\ajayb\.m2\repository\org\apache\poi\poi-ooxml-schemas\3.9\poi-ooxml-schemas-3.9.jar C:\Users\ajayb\.m2\repository\org\apache\xmlbeans\xmlbeans\2.3.0\xmlbeans-2.3.0.jar C:\Users\ajayb\.m2\repository\stax\stax-api\1.0.1\stax-api-1.0.1.jar C:\Users\ajayb\.m2\repository\org\apache\poi\poi-scratchpad\3.9\poi-scratchpad-3.9.jar C:\Users\ajayb\.m2\repository\org\apache\poi\ooxml-schemas\1.1\ooxml-schemas-1.1.jar C:\Users\ajayb\.m2\repository\log4j\log4j\1.2.12\log4j-1.2.12.jar C:\Users\ajayb\.m2\repository\commons-io\commons-io\2.11.0\commons-io-2.11.0.jar C:\Users\ajayb\.m2\repository\org\testng\testng\7.4.0\testng-7.4.0.jar C:\Users\ajayb\.m2\repository\org\webjars\jquery\3.5.1\jquery-3.5.1.jar
  VMArgs:    -ea
  Class:     org.testng.remote.RemoteTestNG
  Args:      -serport 50489 -protocol json -d C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testinglibary\test-output C:\Users\ajayb\AppData\Local\Temp\testng-eclipse--90316689\testng-customsuite.xml
java -ea -classpath C:\Users\ajayb\eclipse\java-2020-12\eclipse\configuration\org.eclipse.osgi\441\0\.cp\lib\testng-remote.jar:C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testinglibary\target\test-classes:C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testinglibary\target\classes:C:\Users\ajayb\Downloads\jar_files\jcommander-1.82.jar:C:\Users\ajayb\Downloads\jar_files\jquery-3.6.1.jar:C:\Users\ajayb\Downloads\jar_files\slf4j-api-1.7.36.jar:C:\Users\ajayb\Downloads\jar_files\testng-7.8.0.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-codec-1.10.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-collections4-4.1.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-io-2.4.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-logging-1.2.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\curvesapi-1.04.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\log4j-1.2.17.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\mysql-connector-java-5.1.40.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-examples-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-excelant-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-ooxml-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-ooxml-schemas-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-scratchpad-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\xmlbeans-2.6.0.jar:C:\Users\ajayb\Downloads\selenium-server-standalone-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-server\3.141.59\selenium-server-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-java\3.141.59\selenium-java-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-api\3.141.59\selenium-api-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-chrome-driver\3.141.59\selenium-chrome-driver-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-edge-driver\3.141.59\selenium-edge-driver-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-firefox-driver\3.141.59\selenium-firefox-driver-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-ie-driver\3.141.59\selenium-ie-driver-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-opera-driver\3.141.59\selenium-opera-driver-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-remote-driver\3.141.59\selenium-remote-driver-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-safari-driver\3.141.59\selenium-safari-driver-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-support\3.141.59\selenium-support-3.141.59.jar:C:\Users\ajayb\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar:C:\Users\ajayb\.m2\repository\net\bytebuddy\byte-buddy\1.8.15\byte-buddy-1.8.15.jar:C:\Users\ajayb\.m2\repository\org\apache\commons\commons-exec\1.3\commons-exec-1.3.jar:C:\Users\ajayb\.m2\repository\com\google\guava\guava\25.0-jre\guava-25.0-jre.jar:C:\Users\ajayb\.m2\repository\com\google\code\findbugs\jsr305\1.3.9\jsr305-1.3.9.jar:C:\Users\ajayb\.m2\repository\org\checkerframework\checker-compat-qual\2.0.0\checker-compat-qual-2.0.0.jar:C:\Users\ajayb\.m2\repository\com\google\errorprone\error_prone_annotations\2.1.3\error_prone_annotations-2.1.3.jar:C:\Users\ajayb\.m2\repository\com\google\j2objc\j2objc-annotations\1.1\j2objc-annotations-1.1.jar:C:\Users\ajayb\.m2\repository\org\codehaus\mojo\animal-sniffer-annotations\1.14\animal-sniffer-annotations-1.14.jar:C:\Users\ajayb\.m2\repository\net\jcip\jcip-annotations\1.0\jcip-annotations-1.0.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\jetty-repacked\9.4.12.v20180830\jetty-repacked-9.4.12.v20180830.jar:C:\Users\ajayb\.m2\repository\com\squareup\okhttp3\okhttp\3.11.0\okhttp-3.11.0.jar:C:\Users\ajayb\.m2\repository\com\squareup\okio\okio\1.14.0\okio-1.14.0.jar:C:\Users\ajayb\.m2\repository\javax\servlet\javax.servlet-api\3.1.0\javax.servlet-api-3.1.0.jar:C:\Users\ajayb\.m2\repository\org\yaml\snakeyaml\1.19\snakeyaml-1.19.jar:C:\Users\ajayb\.m2\repository\junit\junit\4.11\junit-4.11.jar:C:\Users\ajayb\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar:C:\Users\ajayb\.m2\repository\org\apache\poi\poi\3.9\poi-3.9.jar:C:\Users\ajayb\.m2\repository\commons-codec\commons-codec\1.5\commons-codec-1.5.jar:C:\Users\ajayb\.m2\repository\org\apache\poi\poi-ooxml\3.9\poi-ooxml-3.9.jar:C:\Users\ajayb\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar:C:\Users\ajayb\.m2\repository\xml-apis\xml-apis\1.0.b2\xml-apis-1.0.b2.jar:C:\Users\ajayb\.m2\repository\org\apache\poi\poi-ooxml-schemas\3.9\poi-ooxml-schemas-3.9.jar:C:\Users\ajayb\.m2\repository\org\apache\xmlbeans\xmlbeans\2.3.0\xmlbeans-2.3.0.jar:C:\Users\ajayb\.m2\repository\stax\stax-api\1.0.1\stax-api-1.0.1.jar:C:\Users\ajayb\.m2\repository\org\apache\poi\poi-scratchpad\3.9\poi-scratchpad-3.9.jar:C:\Users\ajayb\.m2\repository\org\apache\poi\ooxml-schemas\1.1\ooxml-schemas-1.1.jar:C:\Users\ajayb\.m2\repository\log4j\log4j\1.2.12\log4j-1.2.12.jar:C:\Users\ajayb\.m2\repository\commons-io\commons-io\2.11.0\commons-io-2.11.0.jar:C:\Users\ajayb\.m2\repository\org\testng\testng\7.4.0\testng-7.4.0.jar:C:\Users\ajayb\.m2\repository\org\webjars\jquery\3.5.1\jquery-3.5.1.jar org.testng.remote.RemoteTestNG -serport 50489 -protocol json -d C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testinglibary\test-output C:\Users\ajayb\AppData\Local\Temp\testng-eclipse--90316689\testng-customsuite.xml

!ENTRY org.testng.eclipse 1 0 2024-02-17 21:27:19.883
!MESSAGE [TestNGLaunchConfigurationDelegate] Launching:
  Classpath: C:\Users\ajayb\eclipse\java-2020-12\eclipse\configuration\org.eclipse.osgi\441\0\.cp\lib\testng-remote.jar C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testinglibary\target\test-classes C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testinglibary\target\classes C:\Users\ajayb\Downloads\jar_files\jcommander-1.82.jar C:\Users\ajayb\Downloads\jar_files\jquery-3.6.1.jar C:\Users\ajayb\Downloads\jar_files\slf4j-api-1.7.36.jar C:\Users\ajayb\Downloads\jar_files\testng-7.8.0.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-codec-1.10.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-collections4-4.1.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-io-2.4.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-logging-1.2.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\curvesapi-1.04.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\log4j-1.2.17.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\mysql-connector-java-5.1.40.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-examples-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-excelant-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-ooxml-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-ooxml-schemas-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-scratchpad-3.15.jar C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\xmlbeans-2.6.0.jar C:\Users\ajayb\Downloads\selenium-server-standalone-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-server\3.141.59\selenium-server-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-java\3.141.59\selenium-java-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-api\3.141.59\selenium-api-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-chrome-driver\3.141.59\selenium-chrome-driver-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-edge-driver\3.141.59\selenium-edge-driver-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-firefox-driver\3.141.59\selenium-firefox-driver-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-ie-driver\3.141.59\selenium-ie-driver-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-opera-driver\3.141.59\selenium-opera-driver-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-remote-driver\3.141.59\selenium-remote-driver-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-safari-driver\3.141.59\selenium-safari-driver-3.141.59.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-support\3.141.59\selenium-support-3.141.59.jar C:\Users\ajayb\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar C:\Users\ajayb\.m2\repository\net\bytebuddy\byte-buddy\1.8.15\byte-buddy-1.8.15.jar C:\Users\ajayb\.m2\repository\org\apache\commons\commons-exec\1.3\commons-exec-1.3.jar C:\Users\ajayb\.m2\repository\com\google\guava\guava\25.0-jre\guava-25.0-jre.jar C:\Users\ajayb\.m2\repository\com\google\code\findbugs\jsr305\1.3.9\jsr305-1.3.9.jar C:\Users\ajayb\.m2\repository\org\checkerframework\checker-compat-qual\2.0.0\checker-compat-qual-2.0.0.jar C:\Users\ajayb\.m2\repository\com\google\errorprone\error_prone_annotations\2.1.3\error_prone_annotations-2.1.3.jar C:\Users\ajayb\.m2\repository\com\google\j2objc\j2objc-annotations\1.1\j2objc-annotations-1.1.jar C:\Users\ajayb\.m2\repository\org\codehaus\mojo\animal-sniffer-annotations\1.14\animal-sniffer-annotations-1.14.jar C:\Users\ajayb\.m2\repository\net\jcip\jcip-annotations\1.0\jcip-annotations-1.0.jar C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\jetty-repacked\9.4.12.v20180830\jetty-repacked-9.4.12.v20180830.jar C:\Users\ajayb\.m2\repository\com\squareup\okhttp3\okhttp\3.11.0\okhttp-3.11.0.jar C:\Users\ajayb\.m2\repository\com\squareup\okio\okio\1.14.0\okio-1.14.0.jar C:\Users\ajayb\.m2\repository\javax\servlet\javax.servlet-api\3.1.0\javax.servlet-api-3.1.0.jar C:\Users\ajayb\.m2\repository\org\yaml\snakeyaml\1.19\snakeyaml-1.19.jar C:\Users\ajayb\.m2\repository\junit\junit\4.11\junit-4.11.jar C:\Users\ajayb\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar C:\Users\ajayb\.m2\repository\org\apache\poi\poi\3.9\poi-3.9.jar C:\Users\ajayb\.m2\repository\commons-codec\commons-codec\1.5\commons-codec-1.5.jar C:\Users\ajayb\.m2\repository\org\apache\poi\poi-ooxml\3.9\poi-ooxml-3.9.jar C:\Users\ajayb\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar C:\Users\ajayb\.m2\repository\xml-apis\xml-apis\1.0.b2\xml-apis-1.0.b2.jar C:\Users\ajayb\.m2\repository\org\apache\poi\poi-ooxml-schemas\3.9\poi-ooxml-schemas-3.9.jar C:\Users\ajayb\.m2\repository\org\apache\xmlbeans\xmlbeans\2.3.0\xmlbeans-2.3.0.jar C:\Users\ajayb\.m2\repository\stax\stax-api\1.0.1\stax-api-1.0.1.jar C:\Users\ajayb\.m2\repository\org\apache\poi\poi-scratchpad\3.9\poi-scratchpad-3.9.jar C:\Users\ajayb\.m2\repository\org\apache\poi\ooxml-schemas\1.1\ooxml-schemas-1.1.jar C:\Users\ajayb\.m2\repository\log4j\log4j\1.2.12\log4j-1.2.12.jar C:\Users\ajayb\.m2\repository\commons-io\commons-io\2.11.0\commons-io-2.11.0.jar C:\Users\ajayb\.m2\repository\org\testng\testng\7.4.0\testng-7.4.0.jar C:\Users\ajayb\.m2\repository\org\webjars\jquery\3.5.1\jquery-3.5.1.jar
  VMArgs:    -ea
  Class:     org.testng.remote.RemoteTestNG
  Args:      -serport 50529 -protocol json -d C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testinglibary\test-output C:\Users\ajayb\AppData\Local\Temp\testng-eclipse-697157040\testng-customsuite.xml
java -ea -classpath C:\Users\ajayb\eclipse\java-2020-12\eclipse\configuration\org.eclipse.osgi\441\0\.cp\lib\testng-remote.jar:C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testinglibary\target\test-classes:C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testinglibary\target\classes:C:\Users\ajayb\Downloads\jar_files\jcommander-1.82.jar:C:\Users\ajayb\Downloads\jar_files\jquery-3.6.1.jar:C:\Users\ajayb\Downloads\jar_files\slf4j-api-1.7.36.jar:C:\Users\ajayb\Downloads\jar_files\testng-7.8.0.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-codec-1.10.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-collections4-4.1.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-io-2.4.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\commons-logging-1.2.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\curvesapi-1.04.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\log4j-1.2.17.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\mysql-connector-java-5.1.40.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-examples-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-excelant-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-ooxml-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-ooxml-schemas-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\poi-scratchpad-3.15.jar:C:\Users\ajayb\OneDrive\Desktop\Apchepoi files\xmlbeans-2.6.0.jar:C:\Users\ajayb\Downloads\selenium-server-standalone-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-server\3.141.59\selenium-server-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-java\3.141.59\selenium-java-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-api\3.141.59\selenium-api-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-chrome-driver\3.141.59\selenium-chrome-driver-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-edge-driver\3.141.59\selenium-edge-driver-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-firefox-driver\3.141.59\selenium-firefox-driver-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-ie-driver\3.141.59\selenium-ie-driver-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-opera-driver\3.141.59\selenium-opera-driver-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-remote-driver\3.141.59\selenium-remote-driver-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-safari-driver\3.141.59\selenium-safari-driver-3.141.59.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\selenium-support\3.141.59\selenium-support-3.141.59.jar:C:\Users\ajayb\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar:C:\Users\ajayb\.m2\repository\net\bytebuddy\byte-buddy\1.8.15\byte-buddy-1.8.15.jar:C:\Users\ajayb\.m2\repository\org\apache\commons\commons-exec\1.3\commons-exec-1.3.jar:C:\Users\ajayb\.m2\repository\com\google\guava\guava\25.0-jre\guava-25.0-jre.jar:C:\Users\ajayb\.m2\repository\com\google\code\findbugs\jsr305\1.3.9\jsr305-1.3.9.jar:C:\Users\ajayb\.m2\repository\org\checkerframework\checker-compat-qual\2.0.0\checker-compat-qual-2.0.0.jar:C:\Users\ajayb\.m2\repository\com\google\errorprone\error_prone_annotations\2.1.3\error_prone_annotations-2.1.3.jar:C:\Users\ajayb\.m2\repository\com\google\j2objc\j2objc-annotations\1.1\j2objc-annotations-1.1.jar:C:\Users\ajayb\.m2\repository\org\codehaus\mojo\animal-sniffer-annotations\1.14\animal-sniffer-annotations-1.14.jar:C:\Users\ajayb\.m2\repository\net\jcip\jcip-annotations\1.0\jcip-annotations-1.0.jar:C:\Users\ajayb\.m2\repository\org\seleniumhq\selenium\jetty-repacked\9.4.12.v20180830\jetty-repacked-9.4.12.v20180830.jar:C:\Users\ajayb\.m2\repository\com\squareup\okhttp3\okhttp\3.11.0\okhttp-3.11.0.jar:C:\Users\ajayb\.m2\repository\com\squareup\okio\okio\1.14.0\okio-1.14.0.jar:C:\Users\ajayb\.m2\repository\javax\servlet\javax.servlet-api\3.1.0\javax.servlet-api-3.1.0.jar:C:\Users\ajayb\.m2\repository\org\yaml\snakeyaml\1.19\snakeyaml-1.19.jar:C:\Users\ajayb\.m2\repository\junit\junit\4.11\junit-4.11.jar:C:\Users\ajayb\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar:C:\Users\ajayb\.m2\repository\org\apache\poi\poi\3.9\poi-3.9.jar:C:\Users\ajayb\.m2\repository\commons-codec\commons-codec\1.5\commons-codec-1.5.jar:C:\Users\ajayb\.m2\repository\org\apache\poi\poi-ooxml\3.9\poi-ooxml-3.9.jar:C:\Users\ajayb\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar:C:\Users\ajayb\.m2\repository\xml-apis\xml-apis\1.0.b2\xml-apis-1.0.b2.jar:C:\Users\ajayb\.m2\repository\org\apache\poi\poi-ooxml-schemas\3.9\poi-ooxml-schemas-3.9.jar:C:\Users\ajayb\.m2\repository\org\apache\xmlbeans\xmlbeans\2.3.0\xmlbeans-2.3.0.jar:C:\Users\ajayb\.m2\repository\stax\stax-api\1.0.1\stax-api-1.0.1.jar:C:\Users\ajayb\.m2\repository\org\apache\poi\poi-scratchpad\3.9\poi-scratchpad-3.9.jar:C:\Users\ajayb\.m2\repository\org\apache\poi\ooxml-schemas\1.1\ooxml-schemas-1.1.jar:C:\Users\ajayb\.m2\repository\log4j\log4j\1.2.12\log4j-1.2.12.jar:C:\Users\ajayb\.m2\repository\commons-io\commons-io\2.11.0\commons-io-2.11.0.jar:C:\Users\ajayb\.m2\repository\org\testng\testng\7.4.0\testng-7.4.0.jar:C:\Users\ajayb\.m2\repository\org\webjars\jquery\3.5.1\jquery-3.5.1.jar org.testng.remote.RemoteTestNG -serport 50529 -protocol json -d C:\Users\ajayb\OneDrive\Desktop\BasireddyAjay\Testinglibary\test-output C:\Users\ajayb\AppData\Local\Temp\testng-eclipse-697157040\testng-customsuite.xml
